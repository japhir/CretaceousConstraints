#+title: Cretaceous Constraints
#+author: Ilja J. Kocken
#+PROPERTY: header-args:R  :session *R:cretaceous-constraints* :exports results :results output :eval no-export
#+options: TOC:3 broken-links:ignore H:4
#+startup: overview

\newpage
* quick links to most relevant sections for Richard
:PROPERTIES:
:CREATED:  [2023-11-15 Wed 15:23]
:UNNUMBERED: t
:END:

Hi Richard, this doc is getting quite big, so here are some links to jump through quickly! They should be clickable!
- [[cref:sec:shared-code]] has my R code for MTM spectral analysis, bandpass filtering, plotting spectra, and getting/filtering the astronomical solutions.
- I list all the sites I found data for and create some quick figures, but the Zumaia and Sopelana [[cref:sec:Zumaia-Sopelana]] is the most promising and has the most advanced analysis.
- See [[cref:fig:best-age]] for the most recent figure of filtered Zumaia/Sopelana records compared to La11, ZB18a, and ZB20a solutions!
* Introduction
"Cool quote that addresses how crucial good dating is". (I like how some of RZ's paper's start with an ancient quote).
Maybe something from [cite:@Berger1980] review?

As we move to older and older time-periods, the available records will get further distorted and

This work is an extension of earlier work that used geological data to constrain which astronomical solution most accurately reflects what happened to the orbit of the Earth [cite:@ZeebeLourens2019;@ZeebeLourens2022EPSL].
The Walvis Ridge record is exceptional in its quality, so finding comparable records that capture precession-scale alternations and patterns of amplitude modulation for older time periods is highly unlikely.

Zumaia/Sopelana terrestrial composite records, as generated by [cite:@Batenburg2012;@Batenburg2014].

Here we aim to use the best available records older than the K/T boundary to constrain which astronomical solution best reflects this time period.

* some shared code
:PROPERTIES:
:CREATED:  [2023-11-14 Tue 14:57]
:header-args:R: :session *R:cretaceous-constraints* :exports code :eval no-export :results output
:CUSTOM_ID: sec:shared-code
:END:
** libraries
#+begin_src R
  library(tidyverse)
  library(patchwork)
  # I also use `astrochron` and `snvecR` throughout,
  # but always use them like `package::function()`

  # we use this to make sure the data are in the correct format
  # or we don't have too many rows
  library(assertr)
  # this is for parallel computing
  library(future)
  library(furrr)

  theme_set(theme_bw())
  plan(multisession, workers = 4)
#+end_src

#+RESULTS:
#+begin_example
── Attaching core tidyverse packages ───────────────────────────────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2
── Conflicts ─────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
#+end_example
** functions
:PROPERTIES:
:CREATED:  [2023-09-28 Thu 14:00]
:END:
*** spectral analysis
:PROPERTIES:
:CREATED:  [2023-09-28 Thu 14:00]
:END:
This does spectral analysis on data within each group in ~nest~ based on parameters ~x~ and ~y~. In ~astrochron~, you have to give it a ~data.frame~ with only 2 columns, which loses all the rich metadata for the data.

#+begin_src R
  spectral_analysis <- function(data, nest, x, y) {
    if (! "data.frame" %in% class(data)) {
      cli::cli_abort(c(
             "{.var data} must be a {.cls data.frame}",
             "x" = "You supplied a {.cls {class(data)}}"))
    }
    if (! all(nest %in% colnames(data))) {
      cli::cli_abort(c("{.var nest} must have columns that exist in {.var data}",
                       "i" = "{.var data} has column{?s} {.val {colnames(data)}}",
                       "x" = "You've supplied {.val {nest}}"))
    }

    data |>
      nest(.by = all_of(nest)) |>
      mutate(
        mtm = map(data,
                  ~ . |>
                    select({{x}}, {{y}}) |>
                    astrochron::linterp(genplot = FALSE, verbose = FALSE) |>
                    astrochron::mtm(output = 1, genplot = FALSE, verbose = FALSE))
      ) |>
      select(-data) |>
      unnest(mtm) |>
      pivot_longer(c(AR1_90_power, AR1_95_power, AR1_99_power),
                   names_to = c("AR1", ".width"), names_pattern = "^(AR1)_(9[950])",
                   values_to = "AR1_power") |>
      select(-AR1) |>
      mutate(.width = parse_double(paste0(".", .width))) |>
      rename(freq = Frequency, power = Power, harmonic_cl = Harmonic_CL,
             AR1_CL = AR1_CL, AR1_fit = AR1_fit, .width = .width)##  |>
      ## pivot_longer(c(Harmonic_CL,
      ##                AR1_CL, AR1_fit,
      ##                AR1_90_power, AR1_95_power, AR1_99_power),
      ##              names_to = c("fit_type", "x"),
      ##              names_pattern = "^([A-z0-9]+)_9?[095]?_?([A-z]+)$",
      ##              values_to = "power") |>
      ## separate(fit_type, into = c("fit_type", ".width")) |>
      ## mutate(.width = parse_integer(.width))
  }
#+end_src

#+RESULTS:
**** SOME add astrochron::periodogram as fft?
:PROPERTIES:
:CREATED:  [2023-11-15 Wed 16:30]
:END:
:LOGBOOK:
- State "SOME"       from              [2023-11-15 Wed 16:30]
:END:
I've done this manually for MS: [[file:~/SurfDrive/Postdoc1/prj/2023-05-19_cretaceous_constraints/cretaceous_constraints.org::*do spectral analysis][do spectral analysis]]
It's not much better, gets a bit messy if plotted on log10 scale.

**** SOME add Blackman--Tukey as well?
:PROPERTIES:
:CREATED:  [2023-11-15 Wed 21:50]
:END:
:LOGBOOK:
- State "SOME"       from "DONE"       [2023-11-15 Wed 21:50]
:END:

*** bandpass filter
:PROPERTIES:
:CREATED:  [2023-09-28 Thu 14:08]
:END:
This filters out all the frequencies in dataframe ~freqs~.
#+begin_src R
  bandpass_filter <- function(data, freqs, x, y, nest) {
    if (! "data.frame" %in% class(data)) {
      cli::cli_abort(c(
             "{.var data} must be a {.cls data.frame}",
             "x" = "You supplied a {.cls {class(data)}}"))
    }
    if (! "data.frame" %in% class(freqs)) {
      cli::cli_abort(c(
             "{.var freqs} must be a {.cls data.frame}",
             "x" = "You've supplied a {.cls {class(freqs)}}"))
    }
    if (! all(c("fhigh", "flow") %in% colnames(freqs))) {
      cli::cli_abort(c("{.var freqs} must have columns `flow` and `fhigh`",
                       "i" = "{.var freqs} has column{?s} {.val {colnames(freqs)}}"))
    }
    if (! all(nest %in% colnames(data))) {
      cli::cli_abort(c("{.var nest} must have columns that exist in {.var data}",
                       "i" = "{.var data} has column{?s} {.val {colnames(data)}}",
                       "x" = "You've supplied {.val {nest}}"))
    }


    data |>
      nest(.by = all_of(nest)) |>
      mutate(filt = list(freqs)) |>
      unnest(filt) |>
      mutate(
        bp = pmap(list(data, flow, fhigh),
                  \(d, l, h) d |>
                             select({{x}}, {{y}}) |>
                             astrochron::linterp(genplot = FALSE, verbose = FALSE) |>
                             astrochron::bandpass(flow = l, fhigh = h, win = 0,
                                                  genplot = FALSE, verbose = FALSE) |>
                             rename(filt = {{y}}))
      ) |>
      select(-data) |>
      unnest(cols = c(bp)) #|>
      ## select(sln, target, {{x}}, filt) |>
      ## pivot_wider(names_from = target, values_from = filt) |>
      ## mutate(filter = scale(1 * `405 kyr` + 1 * `100 kyr`)[, 1])
  }
#+end_src

#+RESULTS:

*** plot spectrum
:PROPERTIES:
:CREATED:  [2023-09-28 Thu 16:16]
:END:
This plots the MTM spectrum with a log axis on both x and y.
#+begin_src R
  plot_spectrum <- function(spec) {
    spec |>
      ggplot(aes(x = freq, y = power)) +
      geom_ribbon(aes(ymin = AR1_fit, ymax = AR1_power,
                      linetype = NA, group = .width),
                  alpha = .1) +
      geom_line() +
      annotation_logticks() +
      scale_y_log10() +
      scale_x_log10(sec.axis = sec_axis(trans = ~ 1 / .x, name = "Period (m)")) +
      labs(x = "Frequency (cycles/m)", y = "Spectral power (-)")
  }
#+end_src

#+RESULTS:

*** SOME hilbert transform
:PROPERTIES:
:CREATED:  [2023-09-28 Thu 14:40]
:END:
:LOGBOOK:
- State "SOME"       from              [2023-09-28 Thu 14:48]
:END:
I haven't written clean code for this yet, not sure if it'll be useful. The idea is to filter precession, then do a hilbert transform for it to get the amplitude modulation, which should correspond to the eccentricity signal.

*** get_rmcd
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 11:58]
:END:
This function calculates the (r)mcd from a dataset with mbsf and a splice table.

#+begin_src R :exports code
  get_rmcd <- function(data, rmcd = "dat/ODP208_1267_rmcd.csv") {
    rmcd <- readr::read_csv(rmcd) |>
      separate(label, into = c("sitehole", "coretype", "Sec"),
                 sep = "-", remove = FALSE) |>
      separate(sitehole, into = c("Site", "H"), sep = -1) |>
      separate(coretype, into = c("Core", "T"), sep = -1) |>
      # we do not rename the interval, may not be the same as in the data!
      # rename the CC sections into 7, the naming convention in the MS data
      mutate(Sec = ifelse(Sec == "7", "7", Sec),
             Sec = ifelse(Sec == "cc", "C", Sec)) |>
      mutate(diff = depth_rmcd - depth_mbsf, .after = depth_rmcd) |>
      mutate(diff2 = depth_rmcd2 - depth_mbsf2, .after = depth_rmcd2) |>
      mutate(row = 1:n())

    # the right side of the splice table only
    rmcd2 <- rmcd |>
      select(label, link, label2, interval2, depth_mbsf2, depth_rmcd2, diff2, row) |>
      separate(label2, into = c("sitehole", "coretype", "Sec"),
                 sep = "-", remove = FALSE) |>
      separate(sitehole, into = c("Site", "H"), sep = -1) |>
      separate(coretype, into = c("Core", "T"), sep = -1) |>
      # we do not rename the interval, may not be the same as in the data!
      mutate(Sec = ifelse(Sec == "7", "7", Sec),
             Sec = ifelse(Sec == "cc", "C", Sec))

    out <- data |>
      tidylog::left_join(rmcd |>
                       # make the types the same
                       mutate(across(c(Site, Core), parse_double)) |>
                       # do NOT match by section, only by core!
                       rename(section = Sec) |>
                       select(top = label, to = label2,
                              Site, H, Core, T, section, interval,
                              depth_mbsf, depth_rmcd, diff, row)) |>
      # add the right-hand side of the splice table
      tidylog::left_join(rmcd2 |>
                         mutate(across(c(Site, Core), parse_double)) |>
                         rename(section2 = Sec) |>
                         select(from = label, bot = label2,
                                Site, H, Core, T, section2, interval2,
                                depth_mbsf2, depth_rmcd2, diff2, row2 = row)) |>
    mutate(my_rmcd = case_when(
    (Sec <= section) | ((Sec == section) & (`Top (cm)` <= interval)) ~
      `Depth (mbsf)` + diff,
    (Sec >= section2) | ((Sec == section2) & (`Top (cm)` >= interval2)) ~
      `Depth (mbsf)` + diff2,
    TRUE ~ NA_real_)) |>
      mutate(on_splice = (Sec < section | ((Sec == section) &
                                           (`Top (cm)` <= interval))) &
               (Sec > section2 | ((Sec == section2) &
                                  `Top (cm)` >= interval2))) |>
      mutate(on_splice = ifelse(is.na(on_splice), FALSE, on_splice))

    return(out)
  }
#+end_src

#+RESULTS:

** Astronomical Solutions
:PROPERTIES:
:CREATED:  [2023-09-27 Wed 18:50]
:END:
To compare the record with.
*** COMMENT orbital frequencies to bandpass filter
:PROPERTIES:
:CREATED:  [2023-09-28 Thu 11:15]
:END:
Just 405 kyr and 100 kyr \pm30%.

#+begin_src R
  my_os_freqs <- tribble(
    ~ target, ~ p,
    "405 kyr", 405,
    "100 kyr", 100,
  ) |>
    mutate(f = 1 / p,
           fr = 0.3 * f,
           flow = f - fr,
           fhigh = f + fr) #|>
    ## select(target, p, f, flow, fhigh)
#+end_src

#+RESULTS:
*** get ZB18a
:PROPERTIES:
:CREATED:  [2023-09-26 Tue 16:51]
:END:
I can reuse my ~snvecR~ code here!
#+begin_src R
  # get the first orbital solution in there
  ZB18a <- snvecR::get_ZB18a() |>
    select(age, ecc = ee) |>
    filter(age >= 56000 & age <= 80000) |>
    mutate(scl = scale(ecc)[, 1]) |>
    mutate(sln = "ZB18a", .before = age)

  sln <- ZB18a
#+end_src


#+RESULTS:
*** get ZB20a
:PROPERTIES:
:CREATED:  [2023-09-27 Wed 17:22]
:END:
Download the solution once from the website, then save to file locally. Similar to how ~snvecR~ does it.
#+begin_src R :eval never
  sln2 <- readr::read_table("http://www.soest.hawaii.edu/oceanography/faculty/zeebe_files/Astro/300Myr/ZB20a.dat",
                            comment = "%",
                            col_names = c("age", "ecc", "inc")) |>
    write_rds("out/ZB20a.rds")
#+end_src

Load the saved file, then process it further.
#+begin_src R
  ZB20a <- read_rds("out/ZB20a.rds") |>
    select(age, ecc) |>
    filter(age >= 56000 & age <= 80000) |>
    mutate(scl = scale(ecc)[, 1]) |>
    mutate(sln = "ZB20a", .before = age)

  sln2 <- ZB20a
#+end_src

#+RESULTS:
*** get La11
:PROPERTIES:
:CREATED:  [2023-10-03 Tue 13:47]
:END:
This solution is *not* available on [[http://vo.imcce.fr/insola/earth/online/earth/earth.html][Laskar's website]], so I get it through ~astrochron~.

#+begin_src R :eval never :results both
  La11 <- astrochron::getLaskar(sol = "la11") |>
    readr::write_rds("out/La11.rds")
#+end_src

#+RESULTS:
#+begin_example
 ,* Downloading Laskar et al. (2011) astronomical solution: La2011

   Please cite: Laskar, J., Fienga, A., Gastineau, M., Manche, H., 2011,
   La2010: A new orbital solution for the long-term motion of the Earth:
   Astron. Astrophys., Volume 532, A89.
  AND:
   Laskar, J., Gastineau, M., Delisle, J.-B., Farres, A., Fienga, A.: 2011,
   Strong chaos induced by close encounters with Ceres and Vesta:
   Astron. Astrophys., Volume 532, L4.
trying URL 'http://www.geology.wisc.edu/~smeyers/astrochron/la11.txt.bz2'
Content type 'application/x-bzip2' length 392736 bytes (383 KB)
==================================================
downloaded 383 KB

 ,* Decompressing solution
#+end_example

#+begin_src R
  La11 <- readr::read_rds("out/La11.rds") |>
    as_tibble() |>
    rename(age = Time_ka, ecc = ecc_LA11) |>
    filter(age >= 56000 & age <= 80000) |>
    mutate(scl = scale(ecc)[, 1]) |>
    mutate(sln = "La11", .before = age)

  sln3 <- La11
#+end_src

#+RESULTS:
*** get La10b
http://vo.imcce.fr/insola/earth/online/earth/earth.html
#+begin_src R :eval never
  La10b <- readr::read_table(
                    "http://vo.imcce.fr/insola/earth/online/earth/La2010/La2010b_ecc3L.dat",
                    col_names = c("age", "ecc")) |>
    write_rds("out/La10b.rds")
#+end_src

#+RESULTS:
:
: ── Column specification ─────────────────────────────────────────────────────────────────────────────────
: cols(
:   age = col_double(),
:   ecc = col_double()
: )

#+begin_src R
  La10b <- read_rds("out/La10b.rds") |>
    select(age, ecc) |>
    mutate(age = -age) |>
    filter(age >= 56000 & age <= 80000) |>
    mutate(scl = scale(ecc)[, 1]) |>
    mutate(sln = "La10b", .before = age)

  sln4 <- La10b
#+end_src

#+RESULTS:

*** get La10c
http://vo.imcce.fr/insola/earth/online/earth/earth.html
#+begin_src R :eval never
  La10c <- readr::read_table(
                    "http://vo.imcce.fr/insola/earth/online/earth/La2010/La2010c_ecc3L.dat",
                    col_names = c("age", "ecc")) |>
    write_rds("out/La10c.rds")
#+end_src

#+RESULTS:
:
: ── Column specification ─────────────────────────────────────────────────────────────────────────────────
: cols(
:   age = col_double(),
:   ecc = col_double()
: )

#+begin_src R
  La10c <- read_rds("out/La10c.rds") |>
    select(age, ecc) |>
    mutate(age = -age) |>
    filter(age >= 56000 & age <= 80000) |>
    mutate(scl = scale(ecc)[, 1]) |>
    mutate(sln = "La10c", .before = age)

  sln5 <- La10c
#+end_src

#+RESULTS:

*** combine all solutions
:PROPERTIES:
:CREATED:  [2023-11-28 Tue 11:12]
:END:
#+begin_src R
  slns <- sln |>
    bind_rows(sln2) |>
    bind_rows(sln3) |>
    bind_rows(sln4) |>
    bind_rows(sln5)
#+end_src

#+RESULTS:

** bandpass filters on orbital solutions
:PROPERTIES:
:CREATED:  [2023-11-14 Tue 16:31]
:END:
I'd like to filter out the 405 and 100 kyr eccentricity cycles. I just do those frequencies \pm 40%.
#+begin_src R
  my_filt_age <- tribble(
    ~ target, ~ p,
    "405 kyr", 405,
    "100 kyr", 100,
  ) |>
    mutate(f = 1 / p,
           range = 0.4 * f,
           flow = f - range,
           fhigh = f + range,
           ref = "This study")

  sln_filters <- slns |>
    bandpass_filter(freqs = my_filt_age,
                    x = age, y = ecc,
                    nest = "sln")
#+end_src

#+RESULTS:

Just to check, this results in the following periods for filtering the AS:
#+begin_src R
  my_filt_age |>
    mutate(plow = 1 / flow, phigh = 1 / fhigh)
#+end_src

#+RESULTS:
: # A tibble: 2 × 9
:   target      p       f    range    flow   fhigh ref         plow phigh
:   <chr>   <dbl>   <dbl>    <dbl>   <dbl>   <dbl> <chr>      <dbl> <dbl>
: 1 405 kyr   405 0.00247 0.000988 0.00148 0.00346 This study  675  289.
: 2 100 kyr   100 0.01    0.004    0.006   0.014   This study  167.  71.4

So 312 kyr to 579 kyr for the 405 kyr peak. This in comparison to [cite:@Batenburg2014], where they filter the La11 solution between 300 and 623 kyr to target the 405 kyr solution.

** get 405 kyr minima ages for each solution
:PROPERTIES:
:CREATED:  [2023-11-14 Tue 16:36]
:END:
I use these as tie-points for the tuning of the 405 kyr cycle.
#+begin_src R :results output
  sln_peaks <- sln_filters |>
    tidylog::filter(target == "405 kyr") |>
    mutate(filt = -filt) |> # we want MINIMA rather than maxima
    nest(.by = sln) |>
    mutate(pk = map(data, ~ .x |>
                            select(age, filt) |>
                            astrochron::peak(level = -.030, genplot = FALSE) |>
                            as_tibble() |>
                            select(age = Location, peak_value = Peak_Value))) |>
    unnest(pk) |>
    select(-data)
#+end_src

#+RESULTS:
#+begin_example
filter: removed 147,004 rows (50%), 147,004 rows remaining

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 60000
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 60
 ,* Filtering peaks at threshold of -0.03
 ,* Number of peaks >= -0.03 : 60

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 15001
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 60
 ,* Filtering peaks at threshold of -0.03
 ,* Number of peaks >= -0.03 : 60

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 24001
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 59
 ,* Filtering peaks at threshold of -0.03
 ,* Number of peaks >= -0.03 : 59

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 24001
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 59
 ,* Filtering peaks at threshold of -0.03
 ,* Number of peaks >= -0.03 : 59

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 24001
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 59
 ,* Filtering peaks at threshold of -0.03
 ,* Number of peaks >= -0.03 : 59
#+end_example

** K/Pg (K/T) boundary ages
:PROPERTIES:
:CREATED:  [2023-11-10 Fri 13:40]
:END:
These depend on the AS you choose! Got these from table 4 of [cite:@ZeebeLourens2022EPSL].

#+begin_src R
  kpg_ages <- tribble(
    ~ sln, ~ age1, ~ age2,
    "ZB18a", 65.94, 65.96,
    "ZB20a", 65.92, 65.92,
    # currently don't need the others yet
    ## "ZB20b",
    ## "ZB20c",
    ## "ZB20d",
    ## "La10a",
    "La10b", 65.95, 65.96,
    "La10c", 65.95, 65.96,
    ## "La10d",
    "La11", 66.01, 66.02,
  )
#+end_src

#+RESULTS:

** plot orbital solutions
:PROPERTIES:
:CREATED:  [2023-10-03 Tue 14:51]
:END:
#+begin_src R :results output graphics file :file imgs/orbital_solutions.png :width 900 :exports both
  slns |>
    ggplot(aes(x = age / 1000, y = ecc)) +
    geom_line(linewidth = 1.2, alpha = .3) +
    geom_line(aes(x = age / 1000, y = filt, colour = target),
              linewidth = 1,
              data = sln_filters) +
    geom_point(aes(x = age / 1000, y = 0), colour = "indianred", data = sln_peaks) +
    geom_vline(aes(xintercept = age1), data = kpg_ages) +
    geom_vline(aes(xintercept = age2), data = kpg_ages) +
    # add agem_sol points, if they're available!
    ## geom_point(aes(y = 0), colour = "black", data = agem_sol |> rename(sln = sol)) +
    coord_cartesian(xlim = c(66 + 13*.405, 65)) +
    labs(x = "Age (Ma)", y = "Eccentricity (-)") +
    facet_grid(rows = vars(sln))
#+end_src

#+caption: Example time slice of the different orbital solutions.
#+RESULTS:
[[file:imgs/orbital_solutions.png]]

* COMMENT look at the orbital solution
:PROPERTIES:
:CREATED:  [2023-08-30 Wed 17:04]
:END:
#+begin_src R

#+end_src

* COMMENT reproduce Ma et al., 2017 steps
:PROPERTIES:
:CREATED:  [2023-08-28 Mon 10:52]
:END:
[cite:@Ma2017] .
Load the R package Astrochron
This analysis uses version 0.6.6. Please use versions >= 0.6.6.

#+begin_src R
  library(astrochron)
#+end_src

#+RESULTS:
: Welcome to astrochron v1.2 (2023-08-25)
:  Type ?astrochron to learn more

** read in data
Read the Libsack FMI data from Locklair & Sageman (2008)
This should be a comma-separated-value file (.csv), with first column as depth
    (meters) and second column as FMI.

#+begin_src R
  FMI <- read("dat/Ma2017/data.csv")
#+end_src

** interpolate to median sampling interval
This data set has a sampling interval
that ranges from 0.030478 to 0.030479 m. Interpolate the data to a sampling interval of 0.03 m.

#+begin_src R
  FMI_0.03 <- linterp(FMI, dt = 0.03)
#+end_src

** Tune the FMI record using the long-eccentricity cycle
*** bandpass filter long eccentricity
Extract Locklair & Sageman’s (2008) long-eccentricity cycle using bandpass filtering.

#+begin_src R
  longEcc <- bandpass(FMI_0.03, flow = 0.14, fhigh = 0.26, xmax = 0.5, padfac = 5, win = 2, p = 0.66)
#+end_src

*** find the peak
Find the peak associated with each long eccentricity cycle.

#+begin_src R
  eccMax <- peak(longEcc)
#+end_src

*** construct floating time
Construct the floating time (elapsed time) vs. core depth map for tuning.

#+begin_src R
  timeControl <- cb(eccMax[, 2], (0:18) * 405)

  plot(timeControl, type = "l", lwd = 2, xlab = "Depth (m)", ylab = "Elapsed Time (ka)")
#+end_src

*** tune
Tune (the original FMI data) using the time vs. core depth map.

#+begin_src R
  tuned <- tune(FMI, timeControl, extrapolate = TRUE)
#+end_src

** interpolate
This tuned data set has a sampling interval that ranges from 1.714387 to
3.774922 ka. Interpolate the tuned data to the median sampling interval of ~2.5
ka.

#+begin_src R
  tuned_2.5 <- linterp(tuned, dt = 2.5)
#+end_src

** anchor to radioisotopic age
Convert result from floating (elapsed) time to radioisotopically-anchored
time, using the nominal radioisotopic anchoring (S.p. ammonite biozone). The
radioisotopic age, and its depth in the Libsack core, come from Table 1.

#+begin_src R
  anchorAt <- resample(timeControl, xout = 2147.62, genplot=FALSE)[, 2]
  anchored <- anchorTime(tuned_2.5, time = anchorAt, age = 89370, timeDir = 2)
#+end_src

*** plot
Now create a plot of radioisotopically-anchored time vs. depth.
#+begin_src R
  timeDepth <- tuned
  timeDepth[2] <- FMI[1]
  anchoredTimeDepth <- anchorTime(timeDepth, time = anchorAt, age = 89370, timeDir = 2, genplot = FALSE)

  pl(1);
  plot(anchoredTimeDepth,
       type = "l", lwd = 2, col = "red",
       ylim = c(max(FMI[1]), min(FMI[1])),
       xlab = "Time (ka)", ylab = "Depth (m)",
       cex.lab = 1.2)
#+end_src

*** create basic plot using ggplot
#+begin_src R
  library(ggplot2)
  library(patchwork)
  library(dplyr)

  pl_FMI <- FMI |>
    tibble::as_tibble() |>
    ggplot(aes(x = Depth_m, y = FMI_ohm.m)) +
    geom_line() +
    labs(x="Depth (m)",
         y = "FMI"~Ohm~"(m)")
  pl_anchored <- anchored |>
    tibble::as_tibble() |>
    rename(Time_ka = X1, FMI_ohm.m = X2) |>
    ggplot(aes(x = Time_ka/1e3, y = FMI_ohm.m)) +
    geom_line() +
    scale_x_continuous(
      breaks = 80:92,
      minor_breaks = seq(80, 92, 0.1)) +
    labs(x = "Age (Ma)",
         y = "FMI Ohm (m)") # not sure if this is what it is.
  pl_FMI/pl_anchored
#+end_src

** EPSA/EHA
Conduct evolutive power spectral analysis (EPSA) and evolutive harmonic analysis (EHA)
for the tuned & anchored FMI data using a 500-ka moving window (with linear trend
removal), and three 2pi prolate tapers. Plot amplitude normalized to unity
(for each window) to reveal changes in relative strength.

#+begin_src R
  pwr <- eha(anchored, win = 500, fmax = .1, output = 2, pl = 1,
             pad = 5000, genplot = 3, ydir = -1,
             xlab = "Frequency (cycles/ka)", ylab = "Age (ka)")
#+end_src

** power modulation of obliquity
Determine power modulation of obliquity terms using EPSA results. Integrate
the obliquity power from 0.018 to 0.037 cycles/ka.

#+begin_src R
  integrate_obl <- integratePower(pwr, flow = 0.018, fhigh = 0.037,
                                  npts = 201, pad = 5000, ln = TRUE,
                                  ydir = -1)
#+end_src

** power modulation of short ecc
Determine power modulation of short eccentricity terms.
Integrate the short eccentricity power from 0.007 to 0.012 cycles/ka.

#+begin_src R
  integrate_ecc <- integratePower(pwr, flow = 0.007, fhigh = 0.012,
                                  npts = 201, pad = 5000, ln = TRUE,
                                  ydir = -1)
#+end_src

** amplitude modulation of long ecc
Evaluate amplitude modulation of the long eccentricity term (405 ka), following
removal of bias associated with long-term (>1 Myr) variance, using Lowess.

# note: win = 2 means a cosine-tapered (Tukey) window
#+begin_src R
  longEcc2 <- bandpass(noLow(anchored, 0.1, genplot = FALSE),
                       flow = .002, fhigh = .0035,
                       win = 2, p = 0.66, padfac = 5, xmax = .02)

  hilEcc2 <- hilbert(longEcc2, addmean=TRUE)
#+end_src

** plot summary
Plot summary figures.
#+begin_src R
  xlim1 <- c(82707.41, 89932.41)
  pl(r = 3, c = 1)
  plot(cb(integrate_obl, c(1, 2)),
       type = "l", lwd = 2, col = "red",
       ylab = "Obliquity Band Power", xlab = "Time (ka)",
       cex.lab = 1.2, xlim = xlim1)
  plot(cb(integrate_ecc, c(1, 2)),
       type = "l", lwd = 2, col = "red",
       ylab = "Short-Eccentricity Band Power", xlab = "Time (ka)",
       cex.lab = 1.2, xlim = xlim1)
  plot(longEcc2, type = "l", lwd = 2, col = "red",
       ylab = "Long-Eccentricity Bandpass", xlab = "Time (ka)",
       cex.lab = 1.2, xlim = xlim1)
  lines(hilEcc2)
  pl(r = 3, c = 1)
  plot(cb(integrate_obl, c(1, 4)),
       type = "l", lwd = 2, col = "red",
       ylab = "Obliquity/Total Power", xlab = "Time (ka)",
       cex.lab = 1.2, xlim = xlim1)
  plot(cb(integrate_ecc, c(1, 4)),
       type = "l", lwd = 2, col = "red",
       ylab = "Short-Eccentricity/Total Power", xlab = "Time (ka)",
       cex.lab = 1.2, xlim = xlim1)
  plot(longEcc2, type = "l", lwd = 2, col = "red",
       ylab = "Long-Eccentricity Bandpass", xlab = "Time (ka)",
       cex.lab = 1.2, xlim = xlim1)
  lines(hilEcc2)
  pl(r = 3, c = 1)
  plot(cb(integrate_ecc, c(1, 2)),
       type = "l", lwd = 2, col = "red",
       ylab = "Short-Eccentricity Band Power", xlab = "Time (ka)",
       cex.lab = 1.2, xlim = xlim1)
  plot(cb(integrate_ecc, c(1, 4)),
       type = "l",lwd = 2, col = "red",
       ylab = "Short-Eccentricity/Total Power", xlab = "Time (ka)",
       cex.lab = 1.2, xlim = xlim1)
  plot(longEcc2,
       type = "l", lwd = 2, col = "red",
       ylab = "Long-Eccentricity Bandpass", xlab = "Time (ka)",
       cex.lab = 1.2, xlim = xlim1)
  lines(hilEcc2)
#+end_src

* COMMENT read ZL2019 and ZL2023EPSL to reproduce their approach
:PROPERTIES:
:CREATED:  [2023-08-28 Mon 11:56]
:END:
:LOGBOOK:
CLOCK: [2023-08-28 Mon 17:02]--[2023-08-28 Mon 17:10] =>  0:08
CLOCK: [2023-08-28 Mon 14:55]--[2023-08-28 Mon 17:02] =>  2:07
- try to reproduce, cannot figureit out?
CLOCK: [2023-08-28 Mon 14:10]--[2023-08-28 Mon 14:55] =>  0:45
- do 2.4 Myr analysis on ZB18a
CLOCK: [2023-08-28 Mon 11:20]--[2023-08-28 Mon 12:08] =>  0:48
:END:
[cite:@ZeebeLourens2019;@ZeebeLourens2022EPSL].

Richard's code
#+begin_src matlab
f  = 1./2000;
df = 0.6;

yf{i} = gaussfilter(t{i},y{i},f,df*f,2*df*f,0.0);

[~,ix{i}] = findpeaks(-yf{i});
kv = ix{i};
dt{i} = diff(t{i}(kv));
#+end_src


#+begin_src R
  library(tidyverse)

  # get orbital solution sol
  sol <- snvecR::get_ZB18a() |>
    select(age, ee)

  # Do the same as Zeebe and Lourens 2022:
  # filter 2 Myr ± 60% Gaussian
  # 2 Myr = 2000 kyr period = 1 / 2000 period
  x11(type = "cairo")
  bp2000 <- sol |>
    astrochron::bandpass(
                  padfac = 10, # 10x the number of data points
                  # parameterized as I understand Richard's matlab code
                  # this doesn't make any sense to me
                  ## flow = 0.6 * 1 / 2000,
                  ## fhigh = 2 * 0.6 * 1 / 2000,
                  flow = 1 / 2000 - 0.6 * 1 / 2000,
                  fhigh = 1 / 2000 + 0.6 * 1 / 2000,
                  win = 1, # Gaussian window
                  demean = TRUE, detrend = TRUE, #???
                  addmean = FALSE,
                  xmax = .02)
  grDevices::savePlot("imgs/2023-08-28_0_2Myr_bandpass_filter.png")

  # get the peak maxima
  pk2000 <- bp2000 |>
    astrochron::peak()
  grDevices::savePlot("imgs/2023-08-28_1_peak.png")

  # but in the paper they do peak minima, we just flip the input
  pk2000_flip <- bp2000 |>
    mutate(ee = -ee) |>
    astrochron::peak(genplot = TRUE)
  grDevices::savePlot("imgs/2023-08-28_2_peak.png")

  # calculate deltas between peaks
  pk2000_tidy <- pk2000 |>
    as_tibble() |>
    # different ways to calculate the delta
    mutate(delta_vln_lag = Location - lag(Location)) |> # this one minus previous one
    mutate(delta_vln = lead(Location) - Location) # next one minus this one
  pk2000_flip_tidy <- pk2000_flip |>
    as_tibble() |>
    mutate(delta_vln_lag = Location - lag(Location)) |>
    mutate(delta_vln = lead(Location) - Location)

  # check that peak id has gone well
  bp2000 |>
    ggplot(aes(x = age, y = ee)) +
    geom_line() +
    geom_point(aes(x = Location, y = Peak_Value, colour = "maxima"), data = pk2000_tidy) +
    geom_point(aes(x = Location, y = -Peak_Value, colour = "minima"), data = pk2000_flip_tidy)
  ggsave("~/SurfDrive/Postdoc1/prj/2023-05-19_cretaceous/imgs/2023-08-28_3_check_peaks.png")

  # create a plot similar to Zeebe and Lourens 2022 EPSL figure 6a
  pk2000_tidy |>
    ggplot(aes(x = Location / 1000, y = delta_vln / 1000)) +
    ## geom_point(aes(colour = "maxima lead")) +
    ## geom_line(aes(colour = "maxima lead")) +
    geom_point(aes(colour = "minima lead"), data = pk2000_flip_tidy) +
    geom_line(aes(colour = "minima lead"), data = pk2000_flip_tidy) +
    # did they use the half-distance? nope
    ## geom_point(aes(x = (Location + .5 * (lead(Location) - Location)) / 1000, colour = "minima lead"), data = pk2000_flip_tidy) +
    ## geom_line(aes(x = (Location + .5 * (lead(Location) - Location)) / 1000, colour = "minima lead"), data = pk2000_flip_tidy) +
    ## geom_point(aes(y = delta_vln_lag / 1000, colour = "maxima lag")) +
    ## geom_line(aes(y = delta_vln_lag / 1000, colour = "maxima lag")) +
    ## geom_point(aes(y = delta_vln_lag / 1000, colour = "minima lag"), data = pk2000_flip_tidy) +
    ## geom_line(aes(y = delta_vln_lag / 1000, colour = "minima lag"), data = pk2000_flip_tidy) +
    labs(x = "Age (Ma)",
         y = Delta[VLN] ~ "Interval between min/max in 2-Myr ecc filter (Myr)") +
    scale_x_continuous(breaks = seq(40, 80, 5)) +
    coord_cartesian(xlim = c(44, 70), ylim = c(0, 3))

  ggsave("imgs/2023-08-28_4_Dvln.png", width = 8, height = 3)
  ## ggsave("~/SurfDrive/Postdoc1/prj/2023-05-19_cretaceous/imgs/2023-08-28_4_Dvln.png")
#+end_src

#+RESULTS:
#+begin_example

----- BANDPASS FILTERING STRATIGRAPHIC SERIES-----
 ,* Number of data points= 250001
 ,* Sample interval= 0.4
 ,* Mean value removed= 0.02683078
 ,* Center of bandpass filter = 5e-04
 ,* 600 pos/neg frequency pairs will be bandpassed

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 250001
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 50

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 250001
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 51

 ,* No filtering of peaks applied.
Saving 7 x 6.99 in image
Warning messages:
1: Removed 1 rows containing missing values (`geom_point()`).
2: Removed 1 row containing missing values (`geom_line()`).
Warning messages:
1: Removed 1 rows containing missing values (`geom_point()`).
2: Removed 1 row containing missing values (`geom_line()`).
#+end_example

** filter orbital solutions
#+begin_src R
  # test whether filtering is the same for comparison with Zeebe and Lourens 2022 EPSL fig B2
  ## ZB20a <- readr::read_table("http://www.soest.hawaii.edu/oceanography/faculty/zeebe_files/Astro/300Myr/ZB20a.dat",
  ##                            col_names = c("time", "ecc", "inc"), skip = 1) |>
  ##   readr::write_rds("out/ZB20a.rds")
  ZB20a <- readr::read_rds("out/ZB20a.rds")

  ZB20a |>
    ggplot(aes(x = time / 1000, y = ecc)) +
    geom_line() +
    coord_cartesian(xlim = c(63, 66))


  ZB20a_bp100 <- ZB20a |>
    astrochron::bandpass(flow = 1 / 100 - 0.0016 * 1 / 100,
                         fhigh = 1 / 100 + 0.0016 * 1 / 100,
                         padfac = 1000,
                         win = 1,
                         demean = TRUE, detrend = TRUE)

  # this is how Richard filters the 405 kyr cycle in his solution
  ZB20a_bp405 <- ZB20a |>
    select(time, ecc) |>
    astrochron::bandpass(flow = 1 / 405 - 0.0004,
                         fhigh = 1 / 405 + 0.0004,
                         padfac = 10,
                         win = 1, # gaussian window
                         demean = TRUE, detrend = TRUE,
                         xmax = 0.005) |>
    as_tibble()

  ZB20a_bp405_narrower <- ZB20a |>
    select(time, ecc) |>
    astrochron::bandpass(flow = 1 / 405 - 0.0001,
                         fhigh = 1 / 405 + 0.0001,
                         padfac = 10,
                         win = 1, # gaussian window
                         demean = TRUE, detrend = TRUE,
                         xmax = 0.005) |>
    as_tibble()

  ZB20a_bp405_wider <- ZB20a |>
    select(time, ecc) |>
    astrochron::bandpass(flow = 1 / 405 - 0.001,
                         fhigh = 1 / 405 + 0.001,
                         padfac = 10,
                         win = 1, # gaussian window
                         demean = TRUE, detrend = TRUE,
                         xmax = 0.005) |>
    as_tibble()

  ZB20a_bp405_widest <- ZB20a |>
    select(time, ecc) |>
    astrochron::bandpass(flow = 1 / 405 - 0.0024,
                         fhigh = 1 / 405 + 0.0024,
                         padfac = 10,
                         win = 1, # gaussian window
                         demean = TRUE, detrend = TRUE,
                         xmax = 0.005) |>
    as_tibble()

  ZB20a_bp405 |>
    mutate(filt="default") |>
    bind_rows(
      ZB20a_bp405_narrower |>
      mutate(filt="narrower")) |>
    bind_rows(
      ZB20a_bp405_wider |>
      mutate(filt="wider")) |>
    bind_rows(
      ZB20a_bp405_widest |>
      mutate(filt = "widest")) |>
    ggplot(aes(x=time,y=ecc, colour = filt)) +
    geom_line() +
    geom_line(aes(colour="ZB18a default"), data = bp405 |> rename(time = age, ecc = ee)) +
    geom_line(aes(colour = "ZB20a raw"), alpha = .3, data = ZB20a) +
    geom_line(aes(colour = "ZB18a raw"), alpha = .3, data = snvecR::get_ZB18a() |> select(time = age, ecc = ee)) +
    coord_cartesian(xlim=c(65400, 74200))
#+end_src

#+begin_src R
  # everything below is a big hot mess!

  bp405 <- sol |>
    ## filter(age < 50e3) |>
    astrochron::bandpass(flow = 1 / 405 - .0004,
                         fhigh = 1 / 405 + .0004,
                         padfac = 10,
                         win = 1,
                         demean = TRUE, detrend = TRUE,
                         xmax = .02)

  ## eha405 <- snvecR::get_ZB18a() |>
  ##   select(age, ee) |>
  ##   astrochron::eha(fmax = .1, pl = 1, output = 2, pad = 5000, genplot = 3, ydir = -1)

  ## integrate_ecc <- eha405 |>
  ##   astrochron::integratePower(flow = 0.007, fhigh = 0.012,
  ##                              npts = 201, pad = 5000, ln = TRUE,
  ##                              ydir = -1)

  ## bp405_2 <- sol |>
  ##   noLow(smooth = 1000, genplot = TRUE) |>
  ##   bandpass(flow = .002, fhigh = .0035,
  ##            win = 2, p = 0.66, padfac = 5, xmax = .02)

  ## hb405_2 <- bp405_2 |>
  ##   astrochron::hilbert()

  hb405 <- bp405 |>
    astrochron::hilbert()

  # this doesn't work well on the hilbert transform, finds many peaks because of noise?
  pk405 <- hb405 |>
    astrochron::peak()

  pkf405 <- pk405 |>
    as_tibble() |>
    tidylog::mutate(diff = Location - lag(Location)) |>
    ## ggplot(aes(x = Location, y = diff)) + geom_point()
    tidylog::filter(diff > 500) #|>
    ## tidylog::filter(Location > 4000) |> # filter out youngest weird few
    ## tidylog::filter(Location < 93e3)
    ## tidylog::filter(!ID %in% c(142107, 17355, 174355, 203304, 225749))

  pkf405 |>
    ggplot(aes(x = Location, y = diff)) + geom_point() + geom_line()

  pkf405 |>
    ggplot(aes(x = Location, y = Peak_Value, ID = ID)) +
    geom_point() +
    geom_line(aes(x = age, y = ee - mean(ee), ID = NULL), data = bp405)
    ## geom_line(aes(x = age, y = envelope, ID = NULL), data = hb405_2)

  pkf405 |>
    ggplot(aes(x = diff)) +
    ## geom_histogram(binwidth = 1000) +
    geom_density()
#+end_src

** how can I calculate the average spectral misfit?
:PROPERTIES:
:CREATED:  [2023-08-28 Mon 17:14]
:END:

* Datasets from the Literature
:PROPERTIES:
:CREATED:  [2023-08-31 Thu 12:48]
:END:
Sorted from young to older, longest records at the end.

** [#C] IODP Leg 208 Site 1262
:PROPERTIES:
:CREATED:  [2023-08-31 Thu 16:37]
:END:
Colour reflectance a* used in [cite:@ZeebeLourens2019].

d13C/d18O available in https://doi.pangaea.de/10.1594/PANGAEA.854816
53 Ma to 58 Ma
[[https://web.iodp.tamu.edu/janusweb/imaging/photo.cgi][section photo's]]

Colour reflectance a*/b* used in [cite:@ZeebeLourens2022EPSL]
in combination with site 1209, Zumaia
56 Ma to 66 Ma

[[http://www-odp.tamu.edu/publications/208_IR/chap_03/chap_03.htm][initial reports]]

http://web.iodp.tamu.edu/OVERVIEW/
ah here it is:
https://web.iodp.tamu.edu/janusweb/physprops/colordat.cgi?leg=208&site=1262

or search for it via https://web.iodp.tamu.edu/janusweb/physprops/colordat.shtml
figure from initial reports: http://www-odp.tamu.edu/publications/208_IR/chap_03/c3_f9.htm

get conversion between MBSF and MCD here http://web.iodp.tamu.edu/OVERVIEW/?&exp=208&site=1263

figure of conversion between MBSF and MCD, 3 linear fits for different holes

http://www-odp.tamu.edu/publications/208_IR/chap_03/c3_f5.htm

I'm not going to put too much effort in, Richard should have this analysis according to Luc.

#+begin_src R :results output graphics file :file imgs/208-1262_color_ZeebeLourens2019-2022.png :width 900 :height 500
  ODP208_1262_col <- readr::read_tsv("dat/ODP208_1262_color_reflectance.dat",
                                     guess_max = 3000)
  # add MCD
  spl <- readr::read_tsv("dat/ODP208_1262_splice.dat")
  spl_tie <- readr::read_tsv("dat/ODP208_1262_splice_tie.dat")

  # add preliminary age model
  wr_agem <- readxl::read_excel("dat/ZeebeLourens2022EPSL/agem.xlsx",
                             range = "A3:K29")

  ODP208_1262_col |>
    ggplot(aes(x = `Depth (mbsf)`, y = scale(`a*` / `b*`))) +
    geom_line() +
    coord_cartesian(xlim = c(140, 220))
#+end_src

#+caption: *Colour reflectance data from ODP 208 Site 1262*. used in [cite:@ZeebeLourens2019].
#+RESULTS:
[[file:imgs/208-1262_color_ZeebeLourens2019-2022.png]]
** [#A] Hendaye
:PROPERTIES:
:CREATED:  [2023-09-18 Mon 16:42]
:END:
via [[id:107d5e85-9f0d-4193-941d-7b8887fa4d28][Frits Hilgen]]
[[mu4e:msgid:AS8PR05MB10601D055071F8CD08F7C0153DBFBA@AS8PR05MB10601.eurprd05.prod.outlook.com][RE: Paper: Earth beyond six of nine planetary boundaries]]
66 Ma until 64 Ma

Multi-proxy study of the interval from the K/T boundary up to cycle 20 of [cite:@Dinares-Turell2003].

Only photos for now.
Linked to Zumaia, but no turbidites

#+caption: Hendaye tuning options with 200 kyr pattern (sent to me by Frits Hilgen, unpublished). He's now playing this visual game with the ZB18 and ZB20 solutions!
[[file:imgs/Hendaye_tuning_Frits-Hilgen.pdf::3]]

Shows expression of weak 200 kyr eccentricity cycle and oldest node of 2-Myr cycle
Frits thinks this wasn't taken into account in ZL2022 b/c Luc didn't believe in the 200 kyr cycle.

** [#C] IODP Leg 198 Site 1209
:PROPERTIES:
:CREATED:  [2023-08-31 Thu 17:29]
:END:
56 Ma to 66 Ma

#+begin_src R :results output graphics file :file imgs/198-1209_color_ZeebeLourens2019-2022.png :width 900 :height 500
  ODP198_1209_col <- readr::read_tsv("dat/ODP198_1209_color_reflectance.dat")
  ## spl <- readr::read_tsv("dat/ODP198_1209_splice.dat")
  ## spl_tie <- readr::read_tsv("dat/ODP198_1209_splice_tie.dat")
  ODP198_1209_col |>
    ggplot(aes(x = `Depth (mbsf)`, y = `a*`)) +
    geom_line() +
    coord_cartesian(xlim = c(252.5, 261.6), ylim = c(1, 3))
#+end_src

#+caption: ODP 198 Site 1209 Colour reflectance used in [cite:@ZeebeLourens2022EPSL].
#+RESULTS:
[[file:imgs/198-1209_color_ZeebeLourens2019-2022.png]]

** Contessa highway section
:PROPERTIES:
:CREATED:  [2023-09-05 Tue 15:59]
:END:
[cite:@Sinnesael2016] https://doi.pangaea.de/10.1594/PANGAEA.864450

MS, CaCO3, d13C, d18O

uppermost Maastrichtian to lower Danian

62.5 Ma to 67 Ma

Combined with Bottaccione
#+begin_src R :results output graphics file :file imgs/Contessa_MS_Sinnesael2016.png :width 900 :height 500
  Contessa <- pangaear::pg_data("10.1594/PANGAEA.864450")[[1]]

  dat <- Contessa$data

  dat |>
    ggplot(aes(x = `Section [m]`, y = `chi [10**-9 m**3/kg]`)) +
    geom_line()
#+end_src

#+caption: Contessa Highway Magnetic Susceptibility from [cite:@Sinnesael2016].
#+RESULTS:
[[file:imgs/Contessa_MS_Sinnesael2016.png]]
** [#A] ODP Leg 208 Site 1267
:PROPERTIES:
:CREATED:  [2023-08-31 Thu 12:49]
:END:
via [cite:@Husson2011] figure 3 and 4

Ma_{405}1 to Ma_{405}6 or 7

66 Ma to ~68.6

Raw magsus data from [cite:@Blum2005] https://doi.pangaea.de/10.1594/PANGAEA.266605

also related: [cite:@Zachos2004]

*** Magsus data
:PROPERTIES:
:CREATED:  [2023-09-19 Tue 11:22]
:END:
analyzed similarly to [cite:@Husson2011]
- depth sed [m] from 0.05 to 329 m
- depth comp [mcd] from 0.05 to 368 m

208-1267B-1H-1,5 to 208-1267B-36X-7,37.5

#+begin_src R :results output :eval never
  # get hole A directly from Janus database:
  ODP208_1267_MS_A <- readr::read_tsv("https://web.iodp.tamu.edu/janusweb/physprops/msldat.cgi?leg=208&site=1267&hole=A",
                                      comment = "<",
                                      guess_max = 25000) |> # this comment gets rid of all the html headers
    filter(str_detect(Leg, "^208")) |> # this gets rid of some stuff at the bottom of the page
    readr::write_rds("out/ODP208_1267_MS_A.rds")

  ODP208_1267_MS_B <- readr::read_tsv("https://web.iodp.tamu.edu/janusweb/physprops/msldat.cgi?leg=208&site=1267&hole=B",
                                      comment = "<",
                                      guess_max = 25000) |> # this comment gets rid of all the html headers
    filter(str_detect(Leg, "^208")) |> # this gets rid of some stuff at the bottom of the page
    readr::write_rds("out/ODP208_1267_MS_B.rds")
   # so we have Depth (mbsf) and would like to convert it to the new rmcd
#+end_src

#+RESULTS:

#+begin_src R
  ODP208_1267_MS_A <- readr::read_rds("out/ODP208_1267_MS_A.rds")
  ODP208_1267_MS_B <- readr::read_rds("out/ODP208_1267_MS_B.rds")
#+end_src

#+RESULTS:

**** reproduce Husson Fig. 4
:PROPERTIES:
:CREATED:  [2023-09-22 Fri 13:17]
:END:
[cite:@Husson2011] figure 4
#+begin_src R :results output graphics file :file imgs/208-1267B_MS_Husson-fig4.png :width 900 :height 500
  # somehow they also put these data on PANGAEA (I found this one first)
  # this is for hole B
  ODP208_1267_MS_B_pg <- pangaear::pg_data("10.1594/PANGAEA.266605")[[1]]

  ## ODP208_1267_MS$data |>
  ##   select(`Sample label`) |>
  ##   separate(`Sample label`, into = c("leg", "sitehole", "coretype", "sectioninterval"),
  ##            sep = "-") |>
  ##   separate(sectioninterval, into = c("section", "interval"), sep = ",") |>
  ##   separate(sitehole, into = c("site", "hole"), sep = 4) |>
  ##   separate(coretype, into = c("core", "type"), sep = -1) |>
  ##   write_csv("out/ODP208_1267_MS.csv")

  dat <- ODP208_1267_MS_B_pg$data |>
    select(
      depth = `Depth sed [m]`, # they use mbsf in Husson et al., 2011!!
      ## depth = `Depth comp [mcd]`,
      MS = `Suscept corr`) |>
    filter(depth >= 285.9)

  mtm <- dat |>
    astrochron::linterp(genplot = FALSE) |> # this seems to get rid of the main outliers as well
    astrochron::mtm(xmax = 10, pl = 1) |> # basically only ~40 cm cycles
    ## astrochron::lowspec(xmax = 10, pl = 1) |>
    as_tibble()
  abline(v = c(1.4, 1.6))

  f100_2 <- dat |>
    astrochron::linterp(genplot = FALSE) |>
    astrochron::bandpass(flow = 1.4, fhigh = 1.6, win = 1, padfac = 10)

  f100 <- dat |>
    astrochron::linterp(genplot = FALSE) |> # this seems to get rid of the main outliers as well
    astrochron::taner(flow = 0, fhigh = 0.9, xmax = 3) |>
    as_tibble()


  f405 <- dat |>
    astrochron::linterp(genplot = FALSE) |> # this seems to get rid of the main outliers as well
    astrochron::taner(flow = 0, fhigh = 0.25, xmax = 1) |>
    as_tibble()

  dat |>
    ggplot(aes(x = depth, y = MS)) +
    annotate("rect", xmin = 285.9, xmax = 286.5, ymin = -Inf, ymax = Inf,
             fill = "yellow", alpha = .6) + # the K/T boundary
    geom_line(colour = "darkblue") +
    geom_line(aes(y = MS + 50), data = f100, colour = "skyblue") +
    geom_line(aes(y = MS + 70), data = f405, colour = "black") +
    coord_cartesian(xlim = c(287.4, 330), ylim = c(0, 300)) +
    labs(x = "Depth (mbsf)", y = MS ~ "(10"^{-8} ~ "kgm"^{-3} * ")")

  ## dat <- ODP208_1267_MS_B_pg$data |>
    ## select(depth = `Depth comp [mcd]`, MS = `Suscept corr`) #|>
    ## filter(depth >= 285.9)

  ## dat |>
  ##   ggplot(aes(x = depth, y = MS)) +
  ##   geom_line()
#+end_src

#+caption: *ODP 208 Site 1267 MS* Reproduction of [cite:@Husson2011] Fig. 4.
#+RESULTS:
[[file:imgs/208-1267B_MS_Husson-fig4.png]]

*** [#B] convert from mbsf and mcd to rmcd
:PROPERTIES:
:CREATED:  [2023-09-19 Tue 11:29]
:END:
see also [[file:~/SurfDrive/Postdoc1/prj/2023-05-19_cretaceous_constraints/cretaceous_constraints.org::*get_rmcd][get_rmcd]].

**** COMMENT 1267 rmcd to 1262 rmcd
#+begin_src R
  # https://doi.pangaea.de/10.1594/PANGAEA.666132
  # NO! This is 1267 rmcd vs 1262 mcd!!!
  rmcd <- pangaear::pg_data("10.1594/pangaea.666132")[[1]]$data
  # this only covers mcd 104--236
  # but I care only about depths in mbsf > ~285.9
  ## ODP208_1267_MS$data |>
  ##   filter(`Depth sed [m]` > 285)
  # so that's roughly 320 rmcd

  # I have Depth comp [mcd] in my original MS dataset

  ## # add rmcd depth
  dat <- dat |>
    astrochron::tune(controlPts = rmcd, genplot = FALSE)
    mutate(rmcd = approx(x = rmcd$`Depth comp [mcd]`,
                         y = rmcd$`Depth comp r [rmcd]`,
                         xout = dat$`Depth comp [mcd]`)$y)
#+end_src
why do we need this? It would allow me to apply the agemodel of others' to our record to check, what else?
I need to integrate hole A and B into a single splice.

**** COMMENT original shipboard report
:PROPERTIES:
:CREATED:  [2023-09-20 Wed 09:34]
:END:
simple conversion between mbsf and mcd table:
http://www-odp.tamu.edu/publications/208_IR/chap_08/c8_t2.htm#563154

single splice table
http://www-odp.tamu.edu/publications/208_IR/chap_08/c8_t3.htm#564205

table also available in ASCII: http://www-odp.tamu.edu/publications/208_IR/VOLUME/TABLES/IR208_08/08_T03.TXT
**** COMMENT shipboard section mbsf/mcd
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 11:20]
:END:
#+begin_src R
  mbsf <- readr::read_tsv("dat/ODP208_1267_core-section-summary.dat")
  mcd <- readr::read_tsv("dat/ODP208_1267_splice-mcd.dat") |>
    mutate(length = `MCD Bot` - `MCD Top`)
#+end_src

#+RESULTS:
#+begin_example
indexing ODP208_1267_core-section-summary.dat [====================================] 509.52MB/s, eta:  0s                                                                                                                                            Rows: 267 Columns: 10
── Column specification ─────────────────────────────────────────────────────────────────────────────────
Delimiter: "\t"
chr (4): H, T, Sc, Comment
dbl (6): Leg, Site, Cor, LL(m), CL(m), Top(mbsf)

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
Warning message:
One or more parsing issues, call `problems()` on your data frame for details, e.g.:
  dat <- vroom(...)
  problems(dat)
indexing ODP208_1267_splice-mcd.dat [==============================================] 132.44MB/s, eta:  0s                                                                                                                                            Rows: 68 Columns: 5
── Column specification ─────────────────────────────────────────────────────────────────────────────────
Delimiter: "\t"
chr (1): H
dbl (4): Leg, Site, MCD Top, MCD Bot

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
#+end_example

**** CANC janus web tool
CLOSED: [2023-09-20 Wed 11:32]
does this do what I want?
https://web.iodp.tamu.edu/janusweb/general/splice.cgi
doesn't work anymore

**** COMMENT splice table from Röhl 2007
:PROPERTIES:
:CREATED:  [2023-09-20 Wed 11:19]
:END:
https://doi.pangaea.de/10.1594/PANGAEA.667174?format=html#download
this has depth from 202.78 m(bsf?) to 209 m
from 227.08 to 235.24 rmcd

**** splice table
from [cite:@Westerhold2008] PDF
https://doi.pangaea.de/10.1594/PANGAEA.592301

another PDF :S
#+caption: Splice table for ODP 208 Site 1267 by [cite:@Westerhold2008].
[[file:~/Downloads/208-1267_TabS7_tie_points.pdf]]

This has hole core section interval depth_mbsf depth_rmcd
tie to / append to / end of splice
new mbsf / rmcd

Manually converted to csv again (using tabula/copy-paste) (this one was a bit easier than the one with many sites).

This links hole A to hole B and vice-versa
depth_mbsf from 25.2 m to 329
depth_rmcd from 28.6 m to 367 m

Same as shipboard MCD above 180.25 MCD, adjusted below.

#+begin_src R :results none
  # the full splice table
  rmcd <- readr::read_csv("dat/ODP208_1267_rmcd.csv") |>
    separate(label, into = c("sitehole", "coretype", "Sec"),
               sep = "-", remove = FALSE) |>
    separate(sitehole, into = c("Site", "H"), sep = -1) |>
    separate(coretype, into = c("Core", "T"), sep = -1) |>
    # we do not rename the interval, may not be the same as in the data!
    # rename the CC sections into 7, the naming convention in the MS data
    mutate(#Sec = ifelse(Sec == "7", "7", Sec),
           Sec = ifelse(Sec == "cc" | Sec == "C", "CC", Sec)) |>
    mutate(diff = depth_rmcd - depth_mbsf, .after = depth_rmcd) |>
    mutate(diff2 = depth_rmcd2 - depth_mbsf2, .after = depth_rmcd2) |>
    mutate(row = 1:n())

  # the right side of the splice table only
  rmcd2 <- rmcd |>
    select(label, link, label2, interval2, depth_mbsf2, depth_rmcd2, diff2, row) |>
    separate(label2, into = c("sitehole", "coretype", "Sec"),
               sep = "-", remove = FALSE) |>
    separate(sitehole, into = c("Site", "H"), sep = -1) |>
    separate(coretype, into = c("Core", "T"), sep = -1) |>
    # we do not rename the interval, may not be the same as in the data!
    mutate(Sec = ifelse(Sec == "cc" | Sec == "C", "CC", Sec))
#+end_src

***** plots to try to understand the splice table      :noexport:
:PROPERTIES:
:CREATED:  [2023-09-20 Wed 17:15]
:END:
#+begin_src R
  rmcd |>
    ggplot(aes(x = depth_mbsf, y = depth_rmcd, colour = H)) +
    geom_point(alpha = .5) +
    geom_segment(aes(xend = depth_mbsf, yend = depth_rmcd2),
                 arrow = arrow(angle = 20, length = unit(2, "mm"), type = "closed")) +
    geom_line(aes(y = depth_rmcd), linetype = "dashed") +
    ## geom_line(aes(x = depth_mbsf2, y = depth_rmcd2))
    geom_line(aes(y = depth_rmcd2))
    ## geom_line(linetype = "dashed") #+
    ## geom_line(aes(x = depth_mbsf2))

  rmcd |>
    ggplot(aes(x = depth_rmcd, y = row)) +
    geom_point(alpha = .2) +
    geom_point(aes(x = depth_rmcd2), colour = "red", alpha = .2) +
    geom_segment(aes(xend = depth_rmcd2, yend = row),
                 arrow = arrow(angle = 20, length = unit(2, "mm"), type = "closed"))

  # i'm confused by how to work with this splice table
  rmcd |>
    ggplot(aes(x = 1, y = depth_rmcd, colour = H)) +
    geom_point() +
    geom_point(aes(x = 2, y = depth_rmcd2)) +
    geom_segment(aes(xend = 2, yend = depth_rmcd2), colour = "black") +
    ## facet_grid(cols = vars(hole)) +
    scale_y_reverse() +
    coord_cartesian(xlim = c(-4, 6))
#+end_src

#+RESULTS:
: Warning messages:
: 1: Removed 1 rows containing missing values (`geom_segment()`).
: 2: Removed 1 row containing missing values (`geom_line()`).
: Warning messages:
: 1: Removed 1 rows containing missing values (`geom_point()`).
: 2: Removed 1 rows containing missing values (`geom_segment()`).
: Warning messages:
: 1: Removed 1 rows containing missing values (`geom_point()`).
: 2: Removed 1 rows containing missing values (`geom_segment()`).

understand the splice table
#+begin_src R
  ODP208_1267_MS_A |>
    mutate(Sec = as.character(Sec)) |>
    ggplot(aes(x = `Depth (mbsf)`,
               y = `Corrected Suscept.`,
               colour = H, group = H,
               Site = Site, Core = Core, T = T, Sec = Sec)) +
    geom_line() +
    geom_line(aes(y = `Corrected Suscept.` + 100), data = ODP208_1267_MS_B) +
    # this shows how the holes line up from XRF data and MS data
    geom_segment(aes(x = depth_mbsf, xend = depth_mbsf2, y = -200, yend = -10,
                     lab2 = label2),
                 data = rmcd |> filter(H == "A")) +
    geom_segment(aes(x = depth_mbsf, xend = depth_mbsf2, y = -10, yend = -200,
                     lab2 = label2),
                 data = rmcd |> filter(H == "B")) #+
    # this shows the stretching they applied after
    ## geom_segment(aes(xend = depth_rmcd2, y = 0, yend = 500), data = rmcd)
#+end_src

**** apply the splice table to the magsus data
:PROPERTIES:
:CREATED:  [2023-09-20 Wed 10:43]
:END:
#+begin_src R
  # add Magsus from hole A and B to the same dataframe
  MS <- ODP208_1267_MS_A |>
    mutate(Sec = as.character(Sec)) |>
    bind_rows(ODP208_1267_MS_B) |>
    # add the rcmd splice table
    tidylog::left_join(rmcd |>
                       # make the types teh same
                       mutate(across(c(Site, Core), parse_double)) |>
                       # do NOT match by section, only by core!
                       rename(section = Sec) |>
                       select(top = label, to = label2,
                              Site, H, Core, T, section, interval, depth_mbsf, depth_rmcd, diff, row)) |>
    # add the right-hand side of the splice table
    tidylog::left_join(rmcd2 |>
                       mutate(across(c(Site, Core), parse_double)) |>
                       rename(section2 = Sec) |>
                       select(from = label, bot = label2,
                              Site, H, Core, T, section2, interval2, depth_mbsf2, depth_rmcd2, diff2, row2 = row)) |>
    # I tried the full_joins for both, which adds
    #> 1267A-26H-7	1267B-27X-4	7	10	244.7	275.3	30.6	46
    # and
    #> 1267B-36X-C							61
    # the ties represent jumps to another depth, anything above the jump should be included
    ## mutate(seclsec = Sec < section,
    ##        secesec = Sec == section,
    ##        secgsec = Sec > section,
    ##        topleint = `Top (cm)` <= interval,
    ##        my_rmcd =
    mutate(my_rmcd = case_when(
    (Sec <= section) | ((Sec == section) & (`Top (cm)` <= interval)) ~ `Depth (mbsf)` + diff,
    (Sec >= section2) | ((Sec == section2) & (`Top (cm)` >= interval2)) ~ `Depth (mbsf)` + diff2,
    TRUE ~ NA_real_)) |>
    mutate(on_splice = (Sec < section | ((Sec == section) & (`Top (cm)` <= interval))) &
           (Sec > section2 | ((Sec == section2) & `Top (cm)` >= interval2))) |>
    mutate(on_splice = ifelse(is.na(on_splice), FALSE, on_splice)) |>
    ## print(width = Inf)
    readr::write_csv("out/ODP208_1267_MS.csv")
#+end_src

#+RESULTS:
#+begin_example
Joining with `by = join_by(Site, H, Core, T)`
left_join: added 8 columns (top, to, section, interval, depth_mbsf, …)
rows only in x    2,494
rows only in y  (     1)
matched rows     20,745
                ========
rows total       23,239
Joining with `by = join_by(Site, H, Core, T)`
left_join: added 8 columns (from, bot, section2, interval2, depth_mbsf2, …)
rows only in x    2,510
rows only in y  (     1)
matched rows     20,729
                ========
#+end_example

**** read in the processed ODP208 1267 MS
:PROPERTIES:
:CREATED:  [2023-09-28 Thu 10:53]
:END:
#+begin_src R :exports none
  MS <- readr::read_csv("out/ODP208_1267_MS.csv",
                        guess_max = 23000)
#+end_src

#+RESULTS:
: indexing ODP208_1267_MS.csv [=======================================================----------------------------------------------------] 120.29GB/s, eta:  0sindexing ODP208_1267_MS.csv [===========================================================================================================] 680.00MB/s, eta:  0s                                                                                                                                                                                                 Rows: 23239 Columns: 28
: ── Column specification ──────────────────────────────────────────────────────
: Delimiter: ","
: chr  (8): H, T, Sec, top, to, section, from, bot
: dbl (19): Leg, Site, Core, Top (cm), Depth (mbsf), Magnetic Suscept., Corrected Suscept., interval, depth_mbsf, depth_rmcd, diff, row, section2, interval2...
: lgl  (1): on_splice
:
: ℹ Use `spec()` to retrieve the full column specification for this data.
: ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.

**** COMMENT apply splice table using linear interpolation/extrapolation
:PROPERTIES:
:CREATED:  [2023-09-22 Fri 13:01]
:END:
The rmcd splice table goes down to 311 mbsf for hole A, the MS data goes down to 312 mbsf.
Trying it with approx/approxExtrap.
This is wrong, they shouldn't be stretched!

#+begin_src R
  ## MS <- ODP208_1267_MS_A |>
  ##   mutate(Sec = as.character(Sec)) |>
  ##   mutate(depth_rmcd = Hmisc::approxExtrap(x = rmcd[rmcd$H == "A", ]$`Depth (mbsf)`,
  ##                              y = rmcd[rmcd$H == "A", ]$depth_rmcd,
  ##                              xout = `Depth (mbsf)`)$y) |>
  ##   ## tail() |>
  ##   ## print(width = Inf)
  ##   bind_rows(
  ##     # the rmcd splice table goes down to 329 mbsf for hole B, the MS data goes down to 329 mbsf
  ##     ODP208_1267_MS_B |>
  ##     mutate(Sec = as.character(Sec)) |>
  ##     mutate(depth_rmcd = Hmisc::approxExtrap(x = rmcd[rmcd$H == "B", ]$`Depth (mbsf)`,
  ##                                             y = rmcd[rmcd$H == "B", ]$depth_rmcd,
  ##                                             xout = `Depth (mbsf)`)$y)
  ##   )
#+end_src

**** plot the splice MS record vs rmcd
:PROPERTIES:
:CREATED:  [2023-09-22 Fri 13:02]
:END:
#+begin_src R :results output graphics file :file imgs/ODP208_1267_MS_rcmd.png :width 900
  MS |>
    # I'd like to NOT plot the lines between the core gaps, so I group by Core
    ggplot(aes(x = my_rmcd, y = `Corrected Suscept.`, colour = H, group = paste(H, Core, T, Sec),
               Sec = Sec)) +
    geom_line(aes(alpha = on_splice)) +
    coord_cartesian(xlim = c(320.25, NA), ylim = c(0, 300)) +
    scale_alpha_manual(values = c(0.5, 1))

  ## MS |>
  ##   ggplot(aes(x = `Depth (mbsf)`, y = `Corrected Suscept.`, colour = H, group = paste(H, Core, T))) +
  ##   geom_line(aes(alpha = on_splice))
#+end_src

#+caption: ODP 208 1267 MS with the splice table applied.
#+RESULTS:
[[file:imgs/ODP208_1267_MS_rcmd.png]]

I think that did it! I checked with Luc if the rmcd would have stretching applied, it doesn't.

**** SOME currently some issue with A26X1-6 /B27X1-4 but I'm not interested in that interval anyway
:PROPERTIES:
:CREATED:  [2023-09-20 Wed 17:32]
:END:
:LOGBOOK:
- State "SOME"       from "NEXT"       [2023-09-20 Wed 17:32]
:END:

**** SOME double-check with the excel file
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 09:22]
:END:
:LOGBOOK:
- State "SOME"       from "NEXT"       [2023-09-29 Fri 12:55]
:END:
I'd like to double-check that my function is general enough that it works for all the little niche cases.
**** NEXT fix issue with overlapping depth in A31-4 and B32-5
:PROPERTIES:
:CREATED:  [2023-09-20 Wed 17:32]
:END:
very very small overlapping region, what's going on here?
I'm following the splice table accurately, but maybe there are some errors in the splice table? I see some similar regions in MS here that are not fully aligned (but again, the off-splice isn't aligned correctly I think?).

*** analyze MS data in depth domain (rmcd)
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 16:42]
:END:

**** COMMENT create a shiny interface
:PROPERTIES:
:CREATED:  [2023-09-22 Fri 08:42]
:END:
:LOGBOOK:
CLOCK: [2023-09-22 Fri 08:42]--[2023-09-22 Fri 09:30] =>  0:48
:END:
this is to inspect how the moving average affects the outcome
#+begin_src R
  library(shiny)
  library(bslib)
  library(plotly)

  cleandat <- MS |>
    tidylog::filter(
               !is.na(my_rmcd),
               ## my_rmcd > 319.46,
               my_rmcd > 320.25, # K/T boundary
               on_splice) |>
    mutate(var = scale(`Corrected Suscept.`)[, 1]) |>
    select(my_rmcd, var)

  rawmtm <- cleandat |>
    astrochron::linterp(genplot = FALSE, verbose = FALSE) |>
    astrochron::mtm(detrend = TRUE, demean = TRUE, xmax = 5,
                    output = 1,
                    verbose = FALSE,
                    genplot = FALSE) |>
    as_tibble()

  rawfreq <- cleandat |>
    astrochron::linterp(genplot = FALSE, verbose = FALSE) |>
    astrochron::mtm(detrend = TRUE, demean = TRUE, xmax = 5,
                    output = 3,
                    verbose = FALSE,
                    genplot = FALSE) |>
    as_tibble()


  ui <- page_sidebar(
    theme = bs_theme(bootswatch = "minty"),
    sidebar = sidebar(
      sliderInput(inputId = "width",
                  label = "Width of the moving average",
                  min = 1,
                  max = 200,
                  value = 200)
    ),
    plotOutput("raw"),
    plotOutput("mtm"),
    plotOutput("wavelet")
  )

  server <- function(input, output, session) {
    filt <- reactive(MS |>
      tidylog::filter(
                 !is.na(my_rmcd),
                 my_rmcd > 320.25, # K/T
                 on_splice) |>
      mutate(var = scale(`Corrected Suscept.`)[, 1]) |> # or `L*`
      mutate(scl_ma = scale(var - slider::slide_mean(var,
                                                     before = input$width,
                                                     after = input$width))[, 1]))
    freqs <- reactive(filt() |>
                      select(my_rmcd, scl_ma) |>
                      astrochron::linterp(genplot = FALSE, verbose = FALSE) |>
                      astrochron::mtm(detrend = TRUE, demean = TRUE, xmax = 5,
                                      output = 3,
                                      verbose = FALSE,
                                      genplot = FALSE) |>
                      as_tibble())

    output$raw <- renderPlot({
      ## pl_raw <-
        filt() |>
        ggplot(aes(x = my_rmcd, y = var)) +
        geom_line(aes(colour = "scale(MS)")) +
        geom_line(aes(y = scl_ma, colour = glue::glue("moving average")))
      ## plotly::toWebGL(plotly::ggplotly(p = pl_raw, dynamicTicks = TRUE))
    })

    output$mtm <- renderPlot({
      ## plmtm <-
        filt() |>
        select(my_rmcd,
           ## var
           scl_ma
           ## scl_gam
           ## scl_loess
           ) |>
        astrochron::linterp(genplot = FALSE, verbose = FALSE) |>
        astrochron::mtm(detrend = TRUE, demean = TRUE, xmax = 5, verbose = FALSE, output = 1,
                        genplot = FALSE) |>
        ggplot(aes(x = Frequency, y = Power)) +
        geom_segment(aes(xend = Frequency, y = 0, yend = Harmonic_CL),
                     colour = "lightgray",
                     data = rawfreq) +
        geom_line(data = rawmtm, colour = "darkgray") +
        geom_segment(aes(xend = Frequency, y = 0, yend = Harmonic_CL),
                     colour = "darkgray", linetype = "dotted",
                     data = freqs()) +
        geom_line() +
        scale_y_log10() +
        ## scale_x_continuous(
        ##   sec.axis = sec_axis(trans = ~ 1 / .x,
        ##                       name = "Period",
        ##                       breaks = c(.01, .5, .1, 1, 10))) +
        geom_line(aes(y = AR1_fit), colour = "red") +
        geom_line(aes(y = AR1_90_power), colour = "red") +
        geom_line(aes(y = AR1_95_power), colour = "red") +
        geom_line(aes(y = AR1_99_power), colour = "red") +
        coord_cartesian(xlim = c(0, 10))
        ## coord_cartesian(xlim = c(0.050, 1 / 10))
      ## plotly::toWebGL(plotly::ggplotly(p = plmtm, dynamicTicks = TRUE))
    })

    output$wavelet <- renderPlot({
      filt() |>
        select(my_rmcd, scl_ma) |>
        WaverideR::analyze_wavelet(lowerPeriod = .3,
                                   upperPeriod = 20,
                                   omega_nr = 8) |>
        WaverideR::plot_wavelet(palette_name = "inferno",
                                siglvl = .95,
                                dev_new = FALSE,
                                add_data = FALSE,
                                add_MTM = FALSE, # NOT WORKING!
                                add_MTM_peaks = FALSE,
                                )
    })
  }

  shinyApp(ui, server)
#+end_src
**** filter out desired depth interval and get rid of long-term trends
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 16:44]
:END:
#+begin_src R :results graphics file :file imgs/ODP208_1267_MS_detrend.png :width 900
  MS_ <- MS |>
    tidylog::filter(
               !is.na(my_rmcd),
               my_rmcd > 320.25, # K/T
               on_splice) |>
    mutate(var = scale(`Corrected Suscept.`)[, 1],
           ma = slider::slide_mean(var, before = 2, after = 2), # 5pt ma
           scl_ma = scale(ma)[, 1])

  fit_loess_MS <- loess(var ~ my_rmcd, data = MS_, span = .75)
  fit_gam_MS <- mgcv::gam(var ~ s(my_rmcd, bs = "cs"),
                          method = "REML",
                          data = MS_)

  MS_ <- MS_ |>
    mutate(
      gam = predict(fit_gam_MS) |> as.vector(),
      loess = predict(fit_loess_MS),
      scl_gam = scale(var - gam)[, 1],
      scl_loess = scale(var - loess)[, 1])

  MS_ |>
    ggplot(aes(x = my_rmcd, y = var)) +
    geom_line(aes(group = paste(Core, H, Sec)), alpha = .2) +
    geom_line(aes(y = ma, colour = "5pt moving average")) +
    ## geom_line(aes(y = scl_ma, colour = "moving average ± 200")) +
    ## geom_line(aes(y = scl_gam, colour = "generalized additive model (GAM)"))
    geom_line(aes(y = gam, colour = "generalized additive model (GAM)")) +
    ## geom_line(aes(y = scl_loess, colour = "LOESS"))
    geom_line(aes(y = loess, colour = "LOESS"))
#+end_src

#+caption: ODP 208 Site 1267 MS long-term trend removal strategies.
#+RESULTS:
[[file:imgs/ODP208_1267_MS_detrend.png]]

**** [#B] redo analysis with RMCD
:PROPERTIES:
:CREATED:  [2023-09-22 Fri 13:05]
:END:
from [cite:@Husson2011] but now with rmcd
#+begin_src R :results output graphics file :file imgs/208-1267B_MS_Husson-fig4_rmcd.png :width 900 :height 500
  f100 <- MS_ |>
    select(my_rmcd, var) |>
    astrochron::linterp(genplot = FALSE) |> # this seems to get rid of the main outliers as well
    astrochron::taner(flow = 0, fhigh = 0.9, xmax = 3) |>
    as_tibble()


  f405 <- MS_ |>
    select(my_rmcd, var) |>
    astrochron::linterp(genplot = FALSE) |> # this seems to get rid of the main outliers as well
    astrochron::taner(flow = 0, fhigh = 0.25, xmax = 1) |>
    as_tibble()

  MS_ |>
    ggplot(aes(x = my_rmcd, y = var)) +
    annotate("rect", xmin = 320.275 - 1, xmax = 320.275, ymin = -Inf, ymax = Inf,
             fill = "yellow", alpha = .6) + # the K/T boundary
    ## geom_line(colour = "gray", data = MS_ |> select(my_rmcd, var) |> astrochron::linterp(genplot = FALSE)) +
    geom_line(aes(group = paste(H, Core, Sec), depth_mbsf = `Depth (mbsf)`), colour = "darkblue") +
    geom_line(aes(y = var + 2), data = f100, colour = "skyblue") +
    geom_line(aes(y = var + 4), data = f405, colour = "black") +
    ## coord_cartesian(xlim = c(287.4, 330), ylim = c(0, 300)) +
    labs(x = "Depth (rmcd)", y = MS ~ "(10"^{-8} ~ "kgm"^{-3} * ")",
         title = "ODP Leg 208 Site 1267")
#+end_src

#+caption: *ODP 208 Site 1267 MS* Taner filters as in [cite:@Husson2011] redone on rmcd depth scale.
#+RESULTS:
[[file:imgs/208-1267B_MS_Husson-fig4_rmcd.png]]

**** do spectral analysis
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 16:52]
:END:
#+begin_src R :results graphics file :file imgs/ODP208_1267_MS_mtm.png :width 800
  hus_filters <- tribble(
    ~ target, ~ flow, ~ fhigh,
    "100 kyr", 0, 0.09,
    "405 kyr", 0, 0.25,
    ) |>
    mutate(ref = "Husson et al., 2011")

  my_1267_filters <- tribble(
    ~ target, ~ f,
    ## "405 kyr", 0.08,
    "405 kyr", 0.16,
    ## "100 kyr", 0.65, # this is NOT based on the spectrum!
    "100 kyr", 0.57, # these are the two nice non-significant peaks
    "prec", 2.42,
    ) |>
    mutate(fr = 0.2 * f,
           flow = f - fr,
           fhigh = f + fr) |>
    mutate(ref = "This study")

  MS_fft <- MS_ |>
     pivot_longer(c(var, scl_ma, scl_gam, scl_loess),
                 names_to = "smooth_type") |>
    nest(.by = "smooth_type") |>
    mutate(
      fft = map(data,
                ~ . |>
                  select(my_rmcd, value) |>
                  astrochron::linterp(genplot = FALSE, verbose = FALSE) |>
                  astrochron::periodogram(output = 1, genplot = FALSE, verbose = FALSE))
        ) |>
        select(-data) |>
        unnest(fft) |>
    # I don't think we'll need to make it longer still
        ## pivot_longer(c(Amplitude, Power, Phase),
        ##              names_to = c("AR1", ".width"),
        ##              values_to = "power") |>
        rename(freq = Frequency, power = Power, amp = Amplitude, phase = Phase)

  MS_ |>
    pivot_longer(c(var, scl_ma, scl_gam, scl_loess),
                 names_to = "smooth_type") |>
    spectral_analysis(nest = c("smooth_type"), x = my_rmcd, y = value) |>
    ## filter(smooth_type == "var") |>
    ## select(-smooth_type) |>
    ## plot_spectrum() #+ # I don't know how to do this with another, unpredictable mapping
    ggplot(aes(x = freq, y = power, colour = smooth_type)) +
    geom_ribbon(aes(ymin = AR1_fit, ymax = AR1_power,
                    linetype = NA, fill = smooth_type,
                    group = paste(smooth_type, .width)),
                alpha = .1) +
    geom_line() +
    # add the FFT/periodogram
    ## geom_line(alpha = .2, data = MS_fft) +
    annotation_logticks(sides = "l") +
    scale_y_log10() +
    scale_x_log10(sec.axis = sec_axis(trans = ~ 1 / .x, name = "Period (m)")) +
    labs(x = "Frequency (cycles/m)", y = "Spectral power (-)") +
    coord_cartesian(xlim = c(1e-4, 0.0625) * 100, ylim = c(1e-5, .15)) +
    scale_x_log10(
    ## scale_x_continuous(
      sec.axis = sec_axis(trans = ~ 1 / .x,
                          name = "Period (m)",
                          breaks = c(100, 50, 10, 5, 3, 2, 1, .5, .3, .2, .1))) +
    ggnewscale::new_scale_fill() +
    # annotate the Husson 2011 filters
    geom_rect(aes(xmin = flow, xmax = fhigh, ymin = 1e-5, ymax = 1, fill = ref),
              inherit.aes = FALSE,
              alpha = .1, data = hus_filters) +
    geom_rect(aes(xmin = flow, xmax = fhigh, ymin = 1e-5, ymax = 1, fill = ref),
              inherit.aes = FALSE,
              alpha = .4, data = my_1267_filters) +
    scale_fill_brewer(type = "qual") +
    labs(fill = "Filter intervals from study")
#+end_src

#+caption: ODP 208 Site 1267 spectra.
#+RESULTS:
[[file:imgs/ODP208_1267_MS_mtm.png]]

There are no significant spectral peaks in the range that they filter (green rectangles, they use a Taner filter between 0 and 0.9 and 0 and 0.25 cycle/m).
I've tried various ways of detrending the record first (raw value = var, scl_ma is moving average, scl_loess minus loess filter, scl_gam minus gam) but it's not coming out too clearly.

However, I do see a nice bump around what could be the 405 kyr and two bumps that could be the 100 kyr? In relation to the main precession curve this could make sense?
The purple regions show how I decide to filter the record based on the spectral analysis.

#+begin_src R
  # can I do anything useful with the harmonic_cl or the AR1_CL?
  MS_ |>
    pivot_longer(c(var, scl_ma, scl_gam, scl_loess),
                 names_to = "smooth_type") |>
    spectral_analysis(nest = c("smooth_type"), x = my_rmcd, y = value) |>
    filter(smooth_type == "var") |>
    select(-smooth_type) |>
    ggplot(aes(x = freq, y = AR1_CL)) +
    geom_line() +
    geom_ribbon(aes(ymin = 0, ymax = AR1_CL), alpha = .2) #+
    ## geom_ribbon(aes(ymin = 0, ymax = harmonic_cl))

#+end_src

**** do wavelet analysis
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 16:45]
:END:
I haven't really looked at this in too much detail so far.

#+begin_src R :results graphics file :file imgs/ODP208_1267_MS_wavelet.png :width 800
  MS |>
    select(my_rmcd,
           var
           ## scl_ma
           ## scl_gam
           ## scl_loess
           ) |>
    filter(my_rmcd <= 355.350) |> # there's a coregap after this
    ## filter(my_rmcd >= 356.950) |> # there's a coregap before this
    WaverideR::analyze_wavelet(lowerPeriod = .3,
                               upperPeriod = 20,
                               omega_nr = 8,
                               ## verbose = TRUE
                               ) |>
    WaverideR::plot_wavelet(palette_name = "inferno",
                            siglvl = .95,
                            dev_new = FALSE,
                            ## add_avg = TRUE,
                            add_MTM = TRUE, # NOT WORKING!
                            add_MTM_peaks = TRUE,
                            ## add_abline_h = c(11)
                            )
#+end_src

#+caption: ODP 208 Site 1267 wavelet analysis.
#+RESULTS:
[[file:imgs/ODP208_1267_MS_wavelet.png]]

**** do bandpass filtering in the rmcd domain
:PROPERTIES:
:CREATED:  [2023-09-28 Thu 11:18]
:END:
Based on the filter intervals I picked based on the spectrum.

This time using a rectangular filter. What happens if I switch to a Gaussian filter? This narrows the filters by quite a bit, resulting in far smaller amplitude in the signal, but obviously a more sinusoidal filter. For now I prefer the rectangular filter.

#+begin_src R :exports none
  MS_filts <-
    MS_ |>
    pivot_longer(c(var, scl_ma, scl_gam, scl_loess),
                 names_to = "smooth_type") |>
    nest(.by = c(smooth_type)) |>
    mutate(filt = list(my_1267_filters)) |>
    unnest(filt) |>
    mutate(
      bp = pmap(list(data, flow, fhigh),
               \(d, l, h) d |>
                 select(my_rmcd, value) |>
                 astrochron::linterp(genplot = FALSE, verbose = FALSE) |>
                 astrochron::bandpass(flow = l, fhigh = h, win = 0,
                                      genplot = FALSE, verbose = FALSE)
               )
    ) |>
    select(-data) |>
    unnest(cols = bp) |>
    rename(filt = value)
#+end_src

#+RESULTS:
: Warning message:
: There were 12 warnings in `mutate()`.
: The first warning was:
: ℹ In argument: `bp = pmap(...)`.
: Caused by warning in `regularize.values()`:
: ! collapsing to unique 'x' values
: ℹ Run `dplyr::last_dplyr_warnings()` to see the 11 remaining warnings.

**** plot the filters
:PROPERTIES:
:CREATED:  [2023-09-28 Thu 16:43]
:END:
Note that the 100 kyr is NOT significantly present in the MTM spectrum.

#+begin_src R :results graphics file output :file imgs/ODP208_1267_MS_my-filters.png :width 800
  MS_filts |>
    ggplot(aes(x = my_rmcd, y = filt)) +
    facet_grid(rows = vars(target)) +
    geom_line(aes(colour = smooth_type, group = paste(target, smooth_type))) +
    geom_line(aes(y = scl_gam), data = MS_, alpha = .3) +
    coord_cartesian(ylim = c(-2.5, 2.5))
#+end_src

#+attr_latex: :width \linewidth
#+caption: ODP 208 Site 1267 Bandpass filters. Note: 100 kyr is not significant in spectrum!
#+RESULTS:
[[file:imgs/ODP208_1267_MS_my-filters.png]]

**** do Hilbert transform of precession filter
:PROPERTIES:
:CREATED:  [2023-09-28 Thu 12:03]
:END:
:LOGBOOK:
- Note taken on [2023-10-02 Mon 13:34] \\
  just did this now
- State "SOME"       from              [2023-09-28 Thu 12:03]
:END:

#+begin_src R
  MS_filt_hb <- MS_filts |>
    filter(target == "prec") |>
    nest(.by = c(smooth_type, target, ref)) |>
    mutate(hb = map(data, \(d) d |>
                               select(my_rmcd, filt) |>
                               astrochron::hilbert(genplot = FALSE,
                                                   verbose = FALSE,
                                                   output = TRUE))) |>
    select(-data, -target) |>
    unnest(cols = c(hb))
#+end_src

#+RESULTS:

**** plot the bandpass filters
:PROPERTIES:
:CREATED:  [2023-09-28 Thu 11:33]
:END:
This is the same plot as before, but now overplotting everything. Furthermore, I now add the Hilbert transform of the precession filter as well as the two Taner filters from [cite:@Husson2011] for comparison.

#+caption: ODP 208 Site 1267 bandpass filters, Taner filters, and Hilbert transform of precession filter.
#+begin_src R :results output graphics file :file imgs/ODP208_1267_bandpass_filters.png :width 900
  MS_filts |>
    ## filter(target != "prec")|>
    ggplot(aes(x = my_rmcd, y = filt)) +
    # plot gam-detrended record
    geom_line(aes(y = scl_gam), data = MS_, alpha = .3) +
    geom_line(aes(y = envelope, colour = smooth_type),
              data = MS_filt_hb, alpha = .3) +
    # plot Husson 2011 taner filters
    geom_line(aes(y = var + 2), data = f100, colour = "skyblue") +
    geom_line(aes(y = var + 3), data = f405, colour = "black") +
    # plot my filters
    geom_line(aes(colour = smooth_type, linetype = target)) +
    labs(x = "Depth (rmcd)",
         y = "Normalized smoothed/filtered record",
         colour = "Type of smoothing")
#+end_src

#+RESULTS:
[[file:imgs/ODP208_1267_bandpass_filters.png]]

*** agemodels
**** shipboard agemodel
:PROPERTIES:
:CREATED:  [2023-09-20 Wed 09:46]
:END:
From [cite:@Zachos2004].
http://www-odp.tamu.edu/publications/208_IR/chap_08/c8_f28.htm#554657
from 1 Ma to 66 Ma
#+begin_src R :exports none
  agem_sb <- readr::read_tsv("http://www-odp.tamu.edu/publications/208_IR/VOLUME/TABLES/IR208_08/08_T14.TXT",
                             comment = "#", skip = 4)
#+end_src

#+RESULTS:
#+begin_example
indexed 218.00B in  0s, 8.71MB/s                                                                                                       indexed 1.00TB in  0s, 1.78PB/s                                                                                                       New names:
• `` -> `...11`
• `` -> `...12`
• `` -> `...13`
• `` -> `...14`
• `` -> `...15`
• `` -> `...16`
• `` -> `...17`
• `` -> `...18`
• `` -> `...19`
Rows: 66 Columns: 19
── Column specification ─────────────────────────────────────────────────────────────────────────────────
Delimiter: "\t"
dbl (10): Age (Ma), Depth (mcd), LSR, Growth factor, Corrected LSR, Dry density (g/cm3), CaCO3 (wt%),...
lgl  (9): ...11, ...12, ...13, ...14, ...15, ...16, ...17, ...18, ...19

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
Warning message:
One or more parsing issues, call `problems()` on your data frame for details, e.g.:
  dat <- vroom(...)
  problems(dat)
#+end_example

**** agemodel from Neptune database
:PROPERTIES:
:CREATED:  [2023-09-20 Wed 09:43]
:END:
From [cite:@Renaudie2020] (only hole B).
#+begin_src R :exports none
  agem3 <- readr::read_tsv("dat/Renaudie2020/agem.csv")

  agem3 |>
    ggplot(aes(x = `Depth (mbsf)`, y = `Age (Ma)`)) +
    geom_line() +
    geom_line(aes(x = `Depth (mcd)`), data = agem_sb, colour = "red")
#+end_src

#+RESULTS:
: indexing agem.csv [=================================================================] 82.89MB/s, eta:  0s                                                                                                                                            Rows: 22 Columns: 4
: ── Column specification ─────────────────────────────────────────────────────────────────────────────────
: Delimiter: "\t"
: chr (2): Hole, Comment
: dbl (2): Age (Ma), Depth (mbsf)
:
: ℹ Use `spec()` to retrieve the full column specification for this data.
: ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
: Error: object 'agem_sb' not found

**** agemodels
:PROPERTIES:
:CREATED:  [2023-09-19 Tue 11:22]
:END:
From [cite:@Westerhold2008].
site 1267 range or rmcd = 311.39 m to 336.1 m

#+begin_src R :results output graphics file :file imgs/agem_Westerhold2008.png :width 900 :height 500
  # add age model. This links raw mcd and armcd scale to 100 kyr maxima
  ## agem <- pangaear::pg_data("10.1594/PANGAEA.666282")
  # but it's a PDF :S
  # used tabula --pages=all to convert to text
  # then manually converted it to CSV

  agem <- readr::read_csv("dat/Westerhold2008/agemodel_clean.csv",
                          comment = "#",
                          na = c("", "end of splice", "condensed"))
  # see if I got the formatting of the CSV correct
  ## agem |>
  ##   print(n = Inf, width = Inf)

  agem |>
    pivot_longer(c(site1262_mcd:site1001_rmcd, Zumaia_depth),
                 names_to = "site", values_to = "depth") |>
    pivot_longer(c(age_La2004_1, age_La2004_2), names_to = "option", values_to = "age") |>
    ggplot(aes(x = depth, y = age, colour = site,
               linetype = option, shape = option)) +
    geom_point() +
    geom_line()
#+end_src

#+caption: ODP 208 Site 1267 age model from [cite:@Westerhold2008].
#+RESULTS:
[[file:imgs/agem_Westerhold2008.png]]
**** [#B] agemodel
:PROPERTIES:
:CREATED:  [2023-09-20 Wed 09:14]
:END:
From [cite:@Batenburg2018a].
depth rmcd from 232 m to 366 m
age from 56 Ma to 69.1 Ma

#+begin_src R :exports none
  agem2 <- readr::read_csv("dat/Batenburg2018/site_1267_agemodel.csv") #|>
  ## summarize(d = range(depth_rmcd), a = range(age_ma))
#+end_src

#+RESULTS:
**** plot agem
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 11:25]
:END:
#+begin_src R :results output graphics file :file imgs/208-1267B_agem.png :width 900 :height 500
  agem |>
    ggplot() +
    geom_line(aes(x = `Depth (mcd)`, y = `Age (Ma)`,
                  colour = "Shipboard Scientific Party 2004"), data = agem_sb) +
    geom_line(aes(x = `Depth (mbsf)`, y = `Age (Ma)`,
                  colour = "Renaudi 2020 Neptune db (mbsf!)"), data = agem3) +
    geom_line(aes(x = site1267_rmcd, y = age_La2004_1 / 1000,
                  colour = "Westerhold et al., 2008 option 1")) +
    geom_line(aes(x = site1267_rmcd, y = age_La2004_2 / 1000,
                  colour = "Westerhold et al., 2008 option 2")) +
    geom_line(aes(x = depth_rmcd, y = age_ma,
                  colour = "Batenburg et al., 2018"), data = agem2) +
    geom_point(aes(x = depth_rmcd, y = age_ma,
                  colour = "Batenburg et al., 2018"), data = agem2) +
    annotate("rect", xmin = -Inf, xmax = Inf, ymin = 66, ymax = 80, fill = "yellow", alpha = .3) +
    annotate("text", x = 50, y = 73, label = "Target interval")
#+end_src

#+caption: Overview of age models for ODP 208 Site 1267.
#+RESULTS:
[[file:imgs/208-1267B_agem.png]]
*** plot the taner age model on top of the depth MS data
:PROPERTIES:
:CREATED:  [2023-09-22 Fri 09:32]
:END:
#+begin_src R :exports none
  MS |>
    ggplot(aes(x = my_rmcd, y = `Corrected Suscept.`, colour = H, group = paste(H, Core, T, Sec),
               Sec = Sec)) +
    geom_line(aes(alpha = on_splice)) +
    geom_point(aes(x = depth_rmcd, y = 0, age = age_ma, strat_event = strat_event),
               inherit.aes = FALSE, data = agem2)
#+end_src

#+RESULTS:
: Warning messages:
: 1: In geom_point(aes(x = depth_rmcd, y = 0, age = age_ma, strat_event = strat_event),  :
:   Ignoring unknown aesthetics: age and strat_event
: 2: Using alpha for a discrete variable is not advised.
: 3: Removed 2230 rows containing missing values (`geom_line()`).

*** apply the agemodel to the MS data
:PROPERTIES:
:CREATED:  [2023-09-20 Wed 15:49]
:END:
#+begin_src R
  MS |>
    mutate(age = approx(agem2$depth_rmcd, agem2$age_ma,
                        xout = my_rmcd)$y) |>
    ggplot(aes(x = age, y = `Corrected Suscept.`,
               ## alpha = on_splice,
               Sec = Sec)) +
    geom_line(aes(colour = H, group = paste(H, Core))) #+
    ## geom_smooth(aes(group = "all"))
#+end_src

#+RESULTS:

*** analyze MS data in the time domain
:PROPERTIES:
:CREATED:  [2023-09-22 Fri 10:00]
:END:
#+begin_src R :exports none
  MS_ |>
    mutate(age = approx(agem2$depth_rmcd, agem2$age_ma,
                        xout = my_rmcd)$y) |>
    ## filter(my_rmcd <= 355.350) |> # there's a coregap after this
    ## filter(my_rmcd >= 356.950) |> # there's a coregap before this
    select(age,
           ## var
           scl_gam
           ) |>
    WaverideR::analyze_wavelet(lowerPeriod = .01,
                               upperPeriod = 1.5,
                               omega_nr = 8,
                               ## verbose = TRUE
                               ) |>
    WaverideR::plot_wavelet(palette_name = "inferno",
                            siglvl = .95,
                            dev_new = FALSE,
                            ## add_avg = TRUE,
                            add_MTM = TRUE, # NOT WORKING!
                            add_MTM_peaks = TRUE,
                            add_abline_h = c(0.405, 0.125, 0.027)
                            )
#+end_src

#+RESULTS:
: Warning message:
: In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
:   collapsing to unique 'x' values

**** filter MS in time
:PROPERTIES:
:CREATED:  [2023-09-22 Fri 10:19]
:END:
#+begin_src R
  MS_f405 <- MS |>
      mutate(age = approx(agem2$depth_rmcd, agem2$age_ma,
                          xout = my_rmcd)$y) |>
      filter(my_rmcd <= 355.350) |> # there's a coregap after this
      ## filter(my_rmcd >= 356.950) |> # there's a coregap before this
      select(age,
             ## var
             scl_gam
             ) |>
    astrochron::linterp(verbose = F, genplot = F) |>
    astrochron::bandpass(flow = 1 / .405 - .15 * 1 / .405,
                         fhigh = 1 / .405 + .15 * 1 / .405,
                         xmax = 15,
                         padfac = 5, win = 1, detrend = T, addmean = F) |>
    as_tibble()

  MS_f100 <- MS |>
      mutate(age = approx(agem2$depth_rmcd, agem2$age_ma,
                          xout = my_rmcd)$y) |>
      filter(my_rmcd <= 355.350) |> # there's a coregap after this
      ## filter(my_rmcd >= 356.950) |> # there's a coregap before this
      select(age,
             ## var
             scl_gam
             ) |>
    astrochron::linterp(verbose = F, genplot = F) |>
    astrochron::bandpass(flow = 1 / .125 - .15 * 1 / .125,
                         fhigh = 1 / .125 + .15 * 1 / .125,
                         xmax = 15,
                         padfac = 5, win = 1, detrend = T, addmean = F) |>
    as_tibble()

  MS |>
    mutate(age = approx(agem2$depth_rmcd, agem2$age_ma,
                        xout = my_rmcd)$y) |>
    filter(my_rmcd <= 355.350) |> # there's a coregap after this
    ggplot(aes(x = age, y = scl_gam)) +
    geom_line() +
    geom_line(data = MS_f100) +
    geom_line(data = MS_f405)

  MS_f100 |>
    rename(f100 = scl_gam) |>
    full_join(MS_f405 |> rename(f405 = scl_gam)) |>
    mutate(fake_ecc = scale(f100 + f405)[, 1]) |>
    ggplot(aes(x = age, y = fake_ecc)) +
    geom_line(colour = "red") +
    geom_line(aes(x = age, y = ecc),
              data = snvecR::get_ZB18a() |>
                mutate(age = age / 1e3) |>
                filter(age > 66 & age < 68.5) |>
                mutate(ecc = scale(ee)[, 1]))
#+end_src
*** colour reflectance data from Janus database?
:PROPERTIES:
:CREATED:  [2023-09-19 Tue 11:23]
:END:
I've added this myself, may be nicer than just MS?
https://web.iodp.tamu.edu/janusweb/physprops/colordat.cgi?leg=208&site=1267

They did this analysis also in [cite:@Westerhold2007] and extended it in [cite:@Batenburg2018a] (56.042 Ma to 69.070 Ma).

**** read in the data and calculate normalized a*/b*
#+begin_src R :exports none
  ODP208_1267_color_A <- readr::read_tsv("dat/ODP208_1267_color-reflectance.dat")
  ODP208_1267_color_B <- readr::read_tsv("dat/ODP208_1267_color-reflectance_B.dat")

  # dat is only hole B for now
  dat <- ODP208_1267_color_B |>
    select(depth = `Depth (mbsf)`,
           Lstar = `L*`,
           astar = `a*`,
           bstar = `b*`) |>
    filter(depth >= 285.9) |>
    mutate(aob = scale(astar / bstar)[, 1]) |>
    select(depth, aob, everything())

  # raw data with simple loess curve
  dat |>
    ggplot(aes(x = depth, y = Lstar)) +
    geom_line() +
    geom_line(aes(x = `Depth (mbsf)`, y = `L*`), data = ODP208_1267_color_A, alpha = .2) +
    geom_smooth(method = "loess", span = .2) +
    geom_smooth(method = "gam", colour = "orange")
#+end_src

#+RESULTS:
#+begin_example
indexed 0B in  0s, 0B/sindexed 1.00TB in  0s, 48.28TB/s                                                                                                       Rows: 25316 Columns: 15
── Column specification ─────────────────────────────────────────────────────────────────────────────────
Delimiter: "\t"
chr  (4): H, T, Sec, Munsell_HVC
dbl (11): Leg, Site, Core, Top (cm), Depth (mbsf), L*, a*, b*, X, Y, Z

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
indexing ODP208_1267_color-reflectance_B.dat [=====================================] 130.62GB/s, eta:  0s                                                                                                                                            Rows: 13263 Columns: 15
── Column specification ─────────────────────────────────────────────────────────────────────────────────
Delimiter: "\t"
chr  (4): H, T, Sec, Munsell_HVC
dbl (11): Leg, Site, Core, Top (cm), Depth (mbsf), L*, a*, b*, X, Y, Z

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
`geom_smooth()` using formula = 'y ~ x'
`geom_smooth()` using formula = 'y ~ s(x, bs = "cs")'
#+end_example

**** do analysis of hole B in the depth domain
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 12:42]
:END:
***** use taner filters
:PROPERTIES:
:CREATED:  [2023-09-19 Tue 12:16]
:END:
#+begin_src R :exports none
  f100 <- dat |>
    astrochron::linterp(genplot = FALSE) |>
    astrochron::taner(flow = .07, fhigh = 0.9, xmax = 3) |>
    as_tibble()

  f405 <- dat |>
    astrochron::linterp(genplot = FALSE) |>
    astrochron::taner(flow = .07, fhigh = 0.25, xmax = 1) |>
    as_tibble()

  ## f100_2 <- dat |>
  ##   astrochron::linterp(genplot = FALSE) |>
  ##   astrochron::bandpass(flow = .1, fhigh = .5, win = 1, xmax = 5)
#+end_src

#+RESULTS:
#+begin_example
----- TANER BANDPASS FILTERING STRATIGRAPHIC SERIES-----

----- APPLYING PIECEWISE-LINEAR INTERPOLATION TO STRATIGRAPHIC SERIES -----

 ,* Number of samples= 1840
 ,* Determining median sampling interval for series
 ,* Will interpolate to median sampling interval of 0.025
 ,* New number of samples= 1733
 ,* Number of data points= 1733
 ,* Sample interval= 0.025
 ,* Mean value removed= 0.01953956
Warning message:
In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
#+end_example

***** COMMENT do spectral analysis
:PROPERTIES:
:CREATED:  [2023-09-19 Tue 12:14]
:END:
#+begin_src R :results output graphics file :file imgs/208-1267B_color_mtm.png :width 900 :height 500
  mtm <- dat |>
    astrochron::linterp(genplot = FALSE) |> # this seems to get rid of the main outliers as well
    astrochron::mtm(xmax = 6, pl = 1, output = 1) |>
    as_tibble()

  # plot the mtm
  mtm |>
    ggplot(aes(x = Frequency, y = Power)) +
    geom_line() +
    scale_y_log10() +
    scale_x_continuous(
      sec.axis = sec_axis(trans = ~ 1 / .x,
                          name = "Period",
                          breaks = c(.01, .5, .1, 1, 10))) +
    geom_line(aes(y = AR1_fit), colour = "red") +
    geom_line(aes(y = AR1_90_power), colour = "red") +
    geom_line(aes(y = AR1_95_power), colour = "red") +
    geom_line(aes(y = AR1_99_power), colour = "red") +
    # highlight what filters are being used by Husson 2011
    annotate("rect", xmin = 0., xmax = .25, ymin = 1e-5, ymax = 1e-1, alpha = .3, fill = "red") +
    annotate("rect", xmin = 0., xmax = .9, ymin = 1e-5, ymax = 1e-1, alpha = .3, fill = "red") +
    coord_cartesian(xlim = c(0, 10))
#+end_src

#+RESULTS:
[[file:imgs/208-1267B_color_mtm.png]]

***** plot the filters and the record
:PROPERTIES:
:CREATED:  [2023-09-19 Tue 12:16]
:END:
#+begin_src R :results output graphics file :file imgs/208-1267B_color.png :width 900 :height 500
  dat |>
    ggplot(aes(x = depth, y = aob)) +
    geom_line(colour = "darkblue") +
    geom_line(data = f100, colour = "skyblue") +
    geom_line(data = f405, colour = "black") +
    # same as MS from Husson 2011 from above
    annotate("rect", xmin = 285.9, xmax = 286.5, ymin = -Inf, ymax = Inf,
             fill = "yellow", alpha = .6) + # the K/T boundary
    coord_cartesian(xlim = c(287.4, NA)) +
    labs(x = "Depth (mbsf)", y = "Norm. a*/b*")
#+end_src

#+caption: Taner filters of ODP208 Site 1267 colour reflectance data.
#+RESULTS:
[[file:imgs/208-1267B_color.png]]

***** get the maxima of the 405 kyr filter
:PROPERTIES:
:CREATED:  [2023-09-19 Tue 12:17]
:END:
#+begin_src R :exports none
  pk405 <- f405 |>
    astrochron::peak() |>
    as_tibble() |>
    mutate(
      n_cyc = 1:n(),
      age_405 = 65940 + n_cyc * 405) # ZB18a eq 2 or 66.96 for eq 3

  pk405 |>
    ggplot(aes(x = Location, y = age_405)) +
    geom_line() + geom_point()

  dat <- dat |>
    mutate(
      age = astrochron::tune(dat,
                   controlPts = pk405 |>
                     select(depth = Location, age_405),
                   extrapolate = TRUE,
                   genplot = FALSE)$X1)

  dat |>
    ggplot(aes(x = age, y = aob)) +
    geom_line()

  dat |>
    select(age, aob) |>
    mutate(aob = aob - slider::slide_mean(aob, before = 200, after = 200)) |>
    astrochron::linterp(genplot = FALSE) |>
    astrochron::mtm(xmax = .06)
#+end_src

#+RESULTS:
#+begin_example
----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 1733
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 9

 ,* No filtering of peaks applied.
+ + + +
----- TUNING STRATIGRAPHIC SERIES -----
 ,* Number of data points= 1840
 ,* Number of time control points= 9
 ,* Sorting datasets into ensure increasing order, removing empty entries

,**** WARNING: duplicate depth/height datum found in dat

 ,* Mean sampling interval= 2.096929
 ,* Median sampling interval= 2.154255
 ,* Maximum sampling interval= 7.941176
 ,* Minimum sampling interval= 0
----- PERFORMING Multitaper Spectral Analysis -----

----- APPLYING PIECEWISE-LINEAR INTERPOLATION TO STRATIGRAPHIC SERIES -----

 ,* Number of samples= 1840
 ,* Determining median sampling interval for series
 ,* Will interpolate to median sampling interval of 2.154255
 ,* New number of samples= 1791
 ,* Number of data points in stratigraphic series: 1791
 ,* Stratigraphic series length (space or time): 3856.117
 ,* Sampling interval (space or time): 2.154255
 ,* Will use default setting of 5 DPSS tapers
 ,* Mean value subtracted= 0.00882429
 ,* Linear trend NOT subtracted
 ,* Nyquist frequency: 0.2320988
 ,* Rayleigh frequency: 0.0002591834
 ,* MTM Power spectrum bandwidth resolution (halfwidth): 0.0007775503
 ,* Padded to 8956 points

 ,* Searching for significant spectral peaks that satisfy 90 % CL
     requirements outlined in Meyers (2012):
 ,* Number of significant F-test peaks identified = 33
ID  / Frequency / Period / Harmonic_CL / Rednoise_CL
1   0.002798869   357.2872   90.68548   98.53344
2   0.003835487   260.7231   96.06114   96.35961
3   0.007256326   137.8108   97.68282   82.70286
4   0.02752221   36.33429   97.5   80.64475
5   0.02829967   35.3361   93.87141   79.03028
6   0.02933629   34.08747   99.54662   93.66677
7   0.0411019   24.32977   98.98623   84.84235
8   0.0531785   18.80459   95.4257   74.80281
9   0.05447427   18.35729   99.89771   95.87553
10   0.06287088   15.90561   95.22755   97.11556
11   0.06395933   15.63494   93.02414   89.89813
12   0.06696552   14.93306   91.90037   73.29973
13   0.0681058   14.68304   98.00992   82.16992
14   0.07474016   13.37969   99.96271   91.50175
15   0.07852381   12.73499   97.43281   65.44862
16   0.09231083   10.83296   95.61134   89.70635
17   0.09422857   10.61249   99.31377   99.89063
18   0.1000855   9.991461   93.88109   76.57064
19   0.1010184   9.899185   98.41569   72.34155
20   0.102677   9.739278   90.12556   94.56918
21   0.1049576   9.52766   97.28039   85.37081
22   0.1077564   9.280188   91.26549   72.50968
23   0.1085339   9.213711   97.25827   90.16475
24   0.1096224   9.122227   94.33675   77.94989
25   0.112784   8.866503   96.57953   69.30783
26   0.1211806   8.252143   96.03697   56.31232
27   0.1220099   8.196054   98.88495   84.78227
28   0.1249643   8.002286   99.84032   79.34508
29   0.1367817   7.310917   91.50361   88.80223
30   0.1441936   6.935122   90.96567   94.40426
31   0.1635265   6.115217   95.39002   85.09184
32   0.167051   5.986196   95.01506   91.9216
33   0.1933293   5.172523   94.30443   84.0192
Warning message:
In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
#+end_example

***** remove long-term trends in the depth domain
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 11:39]
:END:
#+begin_src R :exports none
  fit_loess <- loess(aob ~ depth, data = dat, span = .75)
  fit_gam <- mgcv::gam(aob ~ s(depth, bs = "cs"), data = dat)

  lp <- dat |>
    select(depth, aob## Lstar_scl
           ) |>
    astrochron::linterp(genplot = FALSE) |>
    astrochron::lowpass(fcut = 1 / 15) # how do you decide which frequency to cull?
  # this is linearly interpolated so it can't go into the other df

  # let's see how sensitive it is to the span or to size of the rolling mean
  dat <- dat |>
    mutate(
      # there are several methods of calculating a rolling average
      ## ma = roll::roll_mean() # that's left-aligned
      ## ma = zoo::rollmean(Lstar, k = 33, align = "center", na.pad = TRUE),
      # I prefer the slider implementation, it's FAAAST
      # I've played around with the size of the window. If I make it larger,
      # more low-frequency peaks are preserved.
      ma = slider::slide_mean(aob, before = 200, after = 200),
      loess = predict(fit_loess),
      gam = predict(fit_gam),
      scl = scale(Lstar)[, 1],
      loess_scl = scale(aob - loess)[, 1],
      gam_scl = scale(aob - loess)[, 1],
      ma_scl = scale(aob - ma)[, 1])

  dat |>
    ggplot(aes(x = depth, y = aob)) +
    geom_line(alpha = .3) +
    geom_line(aes(y = loess), colour = "orange") +
    geom_line(aes(y = gam), colour = "red") +
    geom_line(aes(y = ma), colour = "indianred")

  dat |>
    ggplot(aes(x = depth, y = aob)) +
    geom_line() +
    geom_line(aes(y = loess_scl + 3), colour = "orange") +
    geom_line(aes(y = gam_scl + 6), colour = "red") +
    geom_line(aes(y = ma_scl + 9), colour = "indianred")
#+end_src

#+RESULTS:
#+begin_example
----- LOWPASS FILTERING STRATIGRAPHIC SERIES-----

----- APPLYING PIECEWISE-LINEAR INTERPOLATION TO STRATIGRAPHIC SERIES -----

 ,* Number of samples= 1840
 ,* Determining median sampling interval for series
 ,* Will interpolate to median sampling interval of 0.025
 ,* New number of samples= 1733
 ,* Number of data points= 1733
 ,* Sample interval= 0.025
 ,* Mean value removed= 0.01953956
 ,* 5 pos/neg frequency pairs and f(0) will be bandpassed
Warning message:
In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
#+end_example

***** do mtm analysis  in the depth domain
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 11:55]
:END:
#+begin_src R :exports none
  dat |>
    drop_na() |>
    select(depth,
           ## aob
           ## Lstar,
           ## loess_scl
           ## gam_scl
           ma_scl
           ) |>
    astrochron::linterp(genplot = FALSE) |>
    astrochron::mtm(output = 1, xmax = 10) |>
    as_tibble()
#+end_src

#+RESULTS:
#+begin_example
----- PERFORMING Multitaper Spectral Analysis -----

----- APPLYING PIECEWISE-LINEAR INTERPOLATION TO STRATIGRAPHIC SERIES -----

 ,* Number of samples= 1840
 ,* Determining median sampling interval for series
 ,* Will interpolate to median sampling interval of 0.025
 ,* New number of samples= 1733
 ,* Number of data points in stratigraphic series: 1733
 ,* Stratigraphic series length (space or time): 43.3
 ,* Sampling interval (space or time): 0.025
 ,* Will use default setting of 5 DPSS tapers
 ,* Mean value subtracted= -0.007338007
 ,* Linear trend NOT subtracted
 ,* Nyquist frequency: 20
 ,* Rayleigh frequency: 0.02308136
 ,* MTM Power spectrum bandwidth resolution (halfwidth): 0.06924409
 ,* Padded to 8666 points

 ,* Searching for significant spectral peaks that satisfy 90 % CL
     requirements outlined in Meyers (2012):
 ,* Number of significant F-test peaks identified = 46
ID  / Frequency / Period / Harmonic_CL / Rednoise_CL
1   0.1477037   6.770312   97.81888   70.95153
2   0.3507962   2.850658   96.15821   99.83479
3   0.549273   1.820588   99.93298   95.71491
4   0.6600508   1.515035   91.60759   59.35608
5   2.506347   0.3989871   99.90005   97.14331
6   2.594046   0.3854982   92.58703   84.48891
7   4.264943   0.2344697   92.27711   88.87931
8   5.67736   0.1761382   96.11432   89.04281
9   6.106624   0.1637566   99.97548   64.3143
10   7.957535   0.1256671   98.05545   84.35803
11   8.156012   0.1226089   99.56947   93.36902
12   8.636049   0.1157937   93.82859   89.15123
13   9.162243   0.1091436   94.41139   94.81218
14   9.254558   0.1080549   97.05078   90.86573
15   9.780752   0.1022416   99.25119   89.55859
16   10.58389   0.09448321   97.63315   95.10522
17   11.0547   0.09045929   95.32547   71.18952
18   11.17009   0.08952479   93.37106   94.26625
19   11.23933   0.08897331   94.40806   69.16598
20   11.34549   0.08814076   97.58416   82.10638
21   11.65474   0.08580198   96.48069   92.10786
22   12.3748   0.0808094   95.1167   97.58248
23   12.6379   0.0791271   93.62709   93.73139
24   12.91946   0.07740264   93.56098   98.65819
25   13.021   0.07679901   99.36458   62.45722
26   13.99954   0.07143093   93.03784   69.10545
27   14.09647   0.07093975   99.06973   99.20623
28   14.3688   0.06959525   98.68524   64.65251
29   14.43803   0.06926151   98.14767   87.79034
30   14.62266   0.06838699   93.01484   71.31289
31   14.81652   0.06749221   93.2065   96.91767
32   14.92269   0.06701206   98.81679   88.57128
33   15.26425   0.06551255   90.33441   64.59363
34   15.31964   0.06527569   90.22784   91.29449
35   15.62428   0.06400295   97.42037   85.11671
36   16.00277   0.06248918   97.92532   68.65022
37   17.09208   0.05850662   94.69208   88.55884
38   17.56751   0.05692328   94.97037   98.45663
39   17.70598   0.0564781   95.89307   66.52896
40   17.7706   0.05627273   94.15521   82.41941
41   17.80291   0.0561706   94.19327   72.928
42   17.91369   0.05582324   99.42919   89.47333
43   18.30141   0.05464061   90.11566   73.50925
44   18.47681   0.05412191   99.35983   57.57737
45   18.5645   0.05386624   99.42766   59.69106
46   19.87076   0.0503252   99.85037   87.35517
# A tibble: 4,332 × 8
   Frequency   Power Harmonic_CL AR1_CL AR1_fit AR1_90_power AR1_95_power AR1_99_power
       <dbl>   <dbl>       <dbl>  <dbl>   <dbl>        <dbl>        <dbl>        <dbl>
 1   0.00462 0.00286        13.7   56.8 0.00283      0.00452      0.00518      0.00656
 2   0.00923 0.00276        10.4   53.9 0.00283      0.00452      0.00518      0.00656
 3   0.0138  0.00263        11.0   49.5 0.00283      0.00452      0.00518      0.00656
 4   0.0185  0.00248        25.8   44.7 0.00283      0.00452      0.00518      0.00656
 5   0.0231  0.00232        57.8   39.0 0.00283      0.00452      0.00518      0.00656
 6   0.0277  0.00214        87.9   33.0 0.00283      0.00452      0.00518      0.00656
 7   0.0323  0.00201        98.8   28.5 0.00283      0.00452      0.00518      0.00656
 8   0.0369  0.00193       100.    25.8 0.00283      0.00452      0.00518      0.00656
 9   0.0415  0.00186       100.    23.4 0.00283      0.00452      0.00518      0.00656
10   0.0462  0.00175        99.1   20.0 0.00283      0.00452      0.00518      0.00656
# ℹ 4,322 more rows
# ℹ Use `print(n = ...)` to see more rows
Warning message:
In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
#+end_example

***** bandpass filtering in the depth domain
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 11:56]
:END:
#+begin_src R :exports none
  # I like gam I think?
  filt_bp_2.4 <- dat |>
    drop_na() |>
    select(depth, gam_scl) |>
    astrochron::linterp(genplot = FALSE) |>
    # this is peak no 1
    astrochron::bandpass(flow = 0.042 - .15 * .042, fhigh = 0.042 + .15 * .042, win = 1, xmax = 1) |> # gaussian window
    ## astrochron::taner(flow = 0, fhigh = .3, xmax = 1) |> # taner window
    as_tibble()

  filt_bp_405 <- dat |>
    drop_na() |>
    select(depth,
           ## gam_scl
           ma_scl
           ) |>
    astrochron::linterp(genplot = FALSE) |>
    ## astrochron::bandpass(flow = 0, fhigh = .3, win = 0, xmax = 1) |> # uniform window
    # this is peak no 2, no 3 = 0.5 (based on gam_scl)
    ## astrochron::bandpass(flow = 0.35 - .15 * .35, fhigh = 0.35 + .15 * .35, win = 1, xmax = 1) |> # gaussian window
    # this is based on the ma_scl, peak number 1 appears: 0.1477
    astrochron::bandpass(flow = 0.148 - .15 * .148, fhigh = 0.148 + .15 * .148, win = 1, xmax = 1) |> # gaussian window
    ## astrochron::taner(flow = 0, fhigh = .3, xmax = 1) |> # taner window
    as_tibble()

  filt_bp_100 <- dat |>
    drop_na() |>
    select(depth,
           ## gam_scl
           ma_scl
           ) |>
    astrochron::linterp(genplot = FALSE) |>
    ## astrochron::bandpass(flow = 0, fhigh = .3, win = 0, xmax = 1) |> # uniform window
    # this is peak no. 5/6
    ## astrochron::bandpass(flow = 2.51 - .15 * 2.51, fhigh = 2.51 + .15 * 2.51, win = 1, xmax = 10) |> # gaussian window
    # this is ma_scl peak no. 3
    astrochron::bandpass(flow = 0.55 - .15 * .55, fhigh = .55 + .15 * .55, win = 1, xmax = 10) |> # gaussian window
    ## astrochron::taner(flow = 0, fhigh = .3, xmax = 1) |> # taner window
    as_tibble()

  filt_bp_prec <- dat |>
    drop_na() |>
    select(depth,
           ## gam_scl
           ma_scl
           ) |>
    astrochron::linterp(genplot = FALSE) |>
    ## astrochron::bandpass(flow = 0, fhigh = .3, win = 0, xmax = 1) |> # uniform window
    # this is peak no. 9
    ## astrochron::bandpass(flow = 7.96 - .15 * 7.69, fhigh = 7.96 + .15 * 7.96, win = 1, xmax = 10) |> # gaussian window
    # this is ma_scl peak no. 5/6
    astrochron::bandpass(flow = 2.55 - .15 * 2.55, fhigh = 2.55 + .15 * 2.55, win = 1, xmax = 10) |> # gaussian window
    ## astrochron::taner(flow = 0, fhigh = .3, xmax = 1) |> # taner window
    as_tibble()

  filt_hb <- filt_bp_prec |>
    astrochron::hilbert(genplot = TRUE, output = TRUE) |>
    ## astrochron::peak() |>
    as_tibble()
#+end_src

#+RESULTS:
#+begin_example
----- BANDPASS FILTERING STRATIGRAPHIC SERIES-----

----- APPLYING PIECEWISE-LINEAR INTERPOLATION TO STRATIGRAPHIC SERIES -----

 ,* Number of samples= 1840
 ,* Determining median sampling interval for series
 ,* Will interpolate to median sampling interval of 0.025
 ,* New number of samples= 1733
 ,* Number of data points= 1733
 ,* Sample interval= 0.025
 ,* Mean value removed= -0.01233601
 ,* Center of bandpass filter = 0.042
 ,* 1 pos/neg frequency pairs will be bandpassed
Warning message:
In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
----- BANDPASS FILTERING STRATIGRAPHIC SERIES-----

----- APPLYING PIECEWISE-LINEAR INTERPOLATION TO STRATIGRAPHIC SERIES -----

 ,* Number of samples= 1840
 ,* Determining median sampling interval for series
 ,* Will interpolate to median sampling interval of 0.025
 ,* New number of samples= 1733
 ,* Number of data points= 1733
 ,* Sample interval= 0.025
 ,* Mean value removed= -0.007338007
 ,* Center of bandpass filter = 0.148
 ,* 4 pos/neg frequency pairs will be bandpassed
Warning message:
In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
----- BANDPASS FILTERING STRATIGRAPHIC SERIES-----

----- APPLYING PIECEWISE-LINEAR INTERPOLATION TO STRATIGRAPHIC SERIES -----

 ,* Number of samples= 1840
 ,* Determining median sampling interval for series
 ,* Will interpolate to median sampling interval of 0.025
 ,* New number of samples= 1733
 ,* Number of data points= 1733
 ,* Sample interval= 0.025
 ,* Mean value removed= -0.007338007
 ,* Center of bandpass filter = 0.55
 ,* 14 pos/neg frequency pairs will be bandpassed
Warning message:
In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
----- BANDPASS FILTERING STRATIGRAPHIC SERIES-----

----- APPLYING PIECEWISE-LINEAR INTERPOLATION TO STRATIGRAPHIC SERIES -----

 ,* Number of samples= 1840
 ,* Determining median sampling interval for series
 ,* Will interpolate to median sampling interval of 0.025
 ,* New number of samples= 1733
 ,* Number of data points= 1733
 ,* Sample interval= 0.025
 ,* Mean value removed= -0.007338007
 ,* Center of bandpass filter = 2.55
 ,* 67 pos/neg frequency pairs will be bandpassed
Warning message:
In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
----- PERFORMING HILBERT TRANSFORM ON STRATIGRAPHIC SERIES -----
 ,* Number of data points= 1733
 ,* Sample interval= 0.025
 ,* Mean value removed= -0.007241137
#+end_example

***** plot the filters
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 11:56]
:END:
#+begin_src R :exports none
  dat |>
    ggplot(aes(x = depth, y = ma_scl)) +
    geom_line(alpha = .3) +
    ## geom_line(aes(colour = "precession?"), data = filt_bp_prec) +
    geom_line(aes(colour = "100 kyr"), data = filt_bp_100) +
    geom_line(aes(colour = "405 kyr"), data = filt_bp_405) #+
    ## geom_line(aes(colour = "2.4 Myr"), data = filt_bp_2.4) #+
    ## geom_line(aes(colour = "Hilbert transform of prec", x = depth, y = envelope), data = filt_hb)
#+end_src

#+RESULTS:

***** get the peaks of the 405 kyr filter
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 13:51]
:END:
#+begin_src R :exports none
  agem_405 <- filt_bp_405 |>
    astrochron::peak() |>
    as_tibble() |>
    mutate(
      n_cyc = 1:n(),
      age_405 = 65940 + n_cyc * 405) # ZB18a eq 2 or 66.96 for eq 3


  dat |>
    mutate(age_405 = Hmisc::approxExtrap(agem_405$Location, agem_405$age_405,
                                         xout = depth)$y) |>
    ggplot(aes(x = age_405, y = aob)) +
    geom_line()
#+end_src

#+RESULTS:
: ----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
:  * Number of data points= 1733
:  * Number of columns= 2
:  * Identifying maxima of peaks
:  * Number of peaks identified= 7
:
:  * No filtering of peaks applied.

***** combine the filters into an eccentricity curve
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 13:15]
:END:
#+begin_src R :exports none
  filt_bp_405 |>
    rename(f405 = ma_scl) |>
    mutate(f100 = filt_bp_100$ma_scl) |>
    mutate(f405s = scale(f405)[, 1],
           f100s = scale(f100)[, 1],
           ecc = f405s + f100s, # with arbitrary scaling
           ecc2 = f405 + f100,
           ) |> # just the raw spectral output
    ggplot(aes(x = depth, y = ecc)) +
    geom_line()
#+end_src

#+RESULTS:
***** what if we look at EHA, do we see sed changes?
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 14:30]
:END:
#+begin_src R :exports none
  dat |>
    select(
      depth,
      ## aob
      ## scl
      ## gam_scl
      ## loess_scl
      ma_scl
    ) |>
    astrochron::linterp(genplot = FALSE) |>
    astrochron::eha(fmax = 10, ydir = -1, pad = 1000, pl = 1)
#+end_src

#+RESULTS:
#+begin_example
----- APPLYING PIECEWISE-LINEAR INTERPOLATION TO STRATIGRAPHIC SERIES -----

 ,* Number of samples= 1840
 ,* Determining median sampling interval for series
 ,* Will interpolate to median sampling interval of 0.025
 ,* New number of samples= 1733

 ----- PERFORMING EVOLUTIVE HARMONIC ANALYSIS -----
 ,* Number of data points in stratigraphic series: 1733
 ,* Stratigraphic series length (space or time): 43.3
 ,* Sampling interval (space or time): 0.025
 ,* Number of data points per window: 101
 ,* Moving window size (space or time): 2.5
 ,* Window step points: 10
 ,* Window step (space or time): 0.25
 ,* Number of windows: 164
 ,* Mean value for each window will be subtracted
 ,* Linear trend for each window will be subtracted
 ,* Nyquist frequency: 20
 ,* Rayleigh frequency: 0.3960396
 ,* MTM Power spectrum bandwidth resolution (halfwidth): 0.7920792
 ,* Will use 3 DPSS tapers
 ,* Padded to 1000 points
Warning message:
In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
#+end_example

**** add rmcd depth and create splice for colour data
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 11:39]
:END:
#+begin_src R :exports none
  col <- ODP208_1267_color_A |>
    mutate(Sec = as.character(Sec)) |>
    bind_rows(ODP208_1267_color_B) |>
    get_rmcd() |>
    # this CC isn't included correctly
    mutate(on_splice = if_else(H == "B" & Core == 33 & Sec == "CC", TRUE, on_splice))
#+end_src

#+RESULTS:
#+begin_example
indexing ODP208_1267_rmcd.csv [====================================================] 477.38MB/s, eta:  0s                                                                                                                                            Rows: 61 Columns: 9
── Column specification ─────────────────────────────────────────────────────────────────────────────────
Delimiter: ","
chr (3): label, link, label2
dbl (6): interval, depth_mbsf, depth_rmcd, interval2, depth_mbsf2, depth_rmcd2

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
Joining with `by = join_by(Site, H, Core, T)`
left_join: added 8 columns (top, to, section, interval, depth_mbsf, …)
rows only in x    3,908
rows only in y  (     1)
matched rows     34,671
                ========
rows total       38,579
Joining with `by = join_by(Site, H, Core, T)`
left_join: added 8 columns (from, bot, section2, interval2, depth_mbsf2, …)
rows only in x    3,975
rows only in y  (     1)
matched rows     34,604
                ========
rows total       38,579
#+end_example

**** plot the colour data vs rmcd
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 15:00]
:END:

#+begin_src R :results output graphics file :file imgs/ODP208_1267_colour_rmcd.png :width 900
  col |>
    ggplot(aes(x = my_rmcd,
               ## y = `L*`,
               y = `a*` / `b*`,
               colour = H, group = paste(H, Core, T, Sec),
               Sec = Sec)) +
    geom_line(aes(alpha = on_splice)) +
    coord_cartesian(xlim = c(320., NA), ylim = c(0.2, .9))
#+end_src

#+caption: Colour reflecatance data for ODP 208 Site 1267 on the rmcd.
#+RESULTS:
[[file:imgs/ODP208_1267_colour_rmcd.png]]

**** clean up colour data
:PROPERTIES:
:CREATED:  [2023-09-22 Fri 13:43]
:END:
#+begin_src R :exports none
  col_w <- col |>
    tidylog::filter(
               !is.na(my_rmcd),
               ## my_rmcd > 319.46,
               my_rmcd > 320.35, # the depth of the K/T massive shift in MS and colour
               on_splice) |>
    ## mutate(var = `a*`) |>
    ## mutate(var = `b*`) |> # or `L*`
    ## mutate(var = `a*` / `b*`) |> # or `L*`
    mutate(var = `L*`) |> # or `L*`
    mutate(scl_ma = scale(var - slider::slide_mean(var,
                                                   before = 200,
                                                   after = 200)))
#+end_src

#+RESULTS:
: filter: removed 35,321 rows (92%), 3,258 rows remaining

**** create wavelet with rmcd vs L*
#+begin_src R :results graphics file :file imgs/ODP208_1267_color_wavelet.png :width 800
  ## library(biwavelet)
  library(WaverideR)

  ## par(oma = c(0, 0, 0, 1), mar = c(5, 4, 4, 5) + .1)
  col_w |>
    select(depth = my_rmcd, scl_ma) |>
    ## astrochron::linterp(genplot = FALSE) |>
    ## biwavelet::wt(sig.level = .95) |>
    ## plot(plot.cb = TRUE,
    ##      plot.phase = FALSE,
    ##      xlab = "Depth (rmcd)",
    ##      main = "L*",
    ##      fill.cols = viridis::inferno(n = 64))
    # let's try waverider!
    WaverideR::analyze_wavelet(lowerPeriod = .3,
                               upperPeriod = 20,
                               omega_nr = 8,
                               ## verbose = TRUE
                               ) |>
    WaverideR::plot_wavelet(palette_name = "inferno",
                            siglvl = .95,
                            dev_new = FALSE,
                            ## add_avg = TRUE,
                            add_MTM = TRUE, # NOT WORKING!
                            add_MTM_peaks = TRUE)

#+end_src

#+caption: Wavelet of ODP 208 Site 1267 in the rmcd domain.
#+RESULTS:
[[file:imgs/ODP208_1267_color_wavelet.png]]

**** apply agemodel to colour data
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 12:09]
:END:
#+begin_src R :exports none
  col <- col |>
    mutate(age = approx(agem2$depth_rmcd, agem2$age_ma,
                        xout = my_rmcd)$y,
           age_Neptune = if_else(H == "B",
                                 approx(agem3$`Depth (mbsf)`, agem3$`Age (Ma)`,
                                        xout = `Depth (mbsf)`)$y,
                                 NA_real_))



  col |>
    ggplot(aes(x = age, y = `L*`,
               group = paste(H, Core, Sec),
               Sec = Sec)) +
    geom_line(aes(colour = H, alpha = on_splice)) #+
    ## geom_line(aes(x = age_Neptune, y = `L*`))
#+end_src

#+RESULTS:

**** do spectral analysis of the splice in the time domain
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 12:44]
:END:
interesting! There's almost no 405 kyr cyclicity in there, probably b/c it was tuned to 100 kyr cycles exactly?

#+begin_src R :exports none
  col_ <- col |>
    filter(!is.na(age),
           age > 66,
           on_splice) |>
    mutate(aob = `a*` / `b*`,
           scl = scale(aob)[, 1])

  col_N <- col |>
    filter(!is.na(age_Neptune),
           age_Neptune > 66) |>
    mutate(aob = `a*` / `b*`,
           scl = scale(aob)[, 1])

  col_ |>
    ggplot(aes(x = age, y = scl, colour = H, group = paste(H, Core, Sec))) +
    geom_line() +
    geom_smooth(aes(group = "all"))
    ## geom_line(linetype = "dashed")

  col_N |>
    ggplot(aes(x = age, y = scl, colour = H, group = paste(H, Core, Sec))) +
    geom_line() +
    geom_smooth(aes(group = "all"))

  fit_gam_col <- mgcv::gam(scl ~ s(age, bs = "cs"), data = col_)
  fit_gam_col_N <- mgcv::gam(scl ~ s(age, bs = "cs"), data = col_N)

  col_ |>
    mutate(gam = predict(fit_gam_col) |> as.vector()) |>
    mutate(scl_gam = scl - gam) |>
    mutate(scl_ma = slider::slide_mean(scl, before = 2, after = 2)) |>
    mutate(age = age * 1e3) |>
    ## ggplot(aes(x = scl_gam)) + geom_density()
    select(age,
           ## scl #> gives 2.975 Myr cycle
           ## scl_gam #> 316
           scl_ma #> 2.975 Myr + 125 kyr + 106 kyr, if I increase the size it's just 125 kyr and 106 kyr
           ) |>
    astrochron::linterp(genplot = FALSE) |>
    astrochron::mtm(xmax = 0.06)
  # I keep getting a 316 kyr cycle and a 188 and a 125 kyr
  # but maybe this was tuned to 100 kyr equidistant?

  col_N |>
    mutate(gam = predict(fit_gam_col_N) |> as.vector()) |>
    mutate(scl_gam = scl - gam) |>
    mutate(scl_ma = slider::slide_mean(scl, before = 1, after = 1)) |>
    mutate(age = age * 1e3) |>
    ## ggplot(aes(x = scl_gam)) + geom_density()
    select(age,
           ## scl #> 2.712 Myr + 27 kyr ...
           scl_gam #> 301 kyr + 188 kyr + 124 kyr + 106 kyr + 27 kyr
           ## scl_ma #> size 2: 2.712 Myr + 124 kyr + 107 kyr + 78 + 70 ... kyr
           ) |>
    astrochron::linterp(genplot = FALSE) |>
    ## astrochron::mtm(xmax = 0.06)
    astrochron::mtm(xmax = 0.06)
  # I keep getting a 300 kyr cycle and a 188 and a 124 and 106
  # even though this one was NOT tuned to 100 kyr cycle

  col_ |>
    mutate(scl_ma = slider::slide_mean(scl, before = 2, after = 2)) |>
    mutate(age = age * 1e3) |>
    ## ggplot(aes(x = scl_gam)) + geom_density()
    select(age, scl_ma) |>
    astrochron::linterp(genplot = FALSE) |>
    # this is 124 kyr
    astrochron::bandpass(flow = 0.008 - .15 * 0.008, fhigh = .008 + .15 * .008, xmax = .006)

  col_N |>
    mutate(scl_ma = slider::slide_mean(scl, before = 2, after = 2)) |>
    mutate(age = age * 1e3) |>
    ## ggplot(aes(x = scl_gam)) + geom_density()
    select(age, scl_ma) |>
    astrochron::linterp(genplot = FALSE) |>
    # this is 106 kyr
    astrochron::bandpass(flow = 0.0094 - .15 * 0.0094, fhigh = .0094 + .15 * .0094, xmax = .006)

  # try and get the 405 kyr even though it isn't really there in the mtm
  col_N |>
    mutate(scl_ma = slider::slide_mean(scl, before = 2, after = 2)) |>
    mutate(age = age * 1e3) |>
    ## ggplot(aes(x = scl_gam)) + geom_density()
    select(age, scl_ma) |>
    astrochron::linterp(genplot = FALSE) |>
    astrochron::bandpass(flow = 0.0094 - .15 * 0.0094, fhigh = .0094 + .15 * .0094, xmax = .006)
#+end_src

#+RESULTS:
#+begin_example
`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = "cs")'
Warning message:
The following aesthetics were dropped during statistical transformation: colour
ℹ This can happen when ggplot fails to infer the correct grouping structure in the data.
ℹ Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?
+ `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = "cs")'
----- PERFORMING Multitaper Spectral Analysis -----

----- APPLYING PIECEWISE-LINEAR INTERPOLATION TO STRATIGRAPHIC SERIES -----

 ,* Number of samples= 3332
 ,* Determining median sampling interval for series
 ,* Will interpolate to median sampling interval of 1.704084
 ,* New number of samples= 1746
 ,* Number of data points in stratigraphic series: 1746
 ,* Stratigraphic series length (space or time): 2973.627
 ,* Sampling interval (space or time): 1.704084
 ,* Will use default setting of 5 DPSS tapers
 ,* Mean value subtracted= -0.008942009
 ,* Linear trend NOT subtracted
 ,* Nyquist frequency: 0.2934127
 ,* Rayleigh frequency: 0.0003360971
 ,* MTM Power spectrum bandwidth resolution (halfwidth): 0.001008291
 ,* Padded to 8730 points

 ,* Searching for significant spectral peaks that satisfy 90 % CL
     requirements outlined in Meyers (2012):
 ,* Number of significant F-test peaks identified = 39
ID  / Frequency / Period / Harmonic_CL / Rednoise_CL
1   0.0003360971   2975.331   91.0077   92.21126
2   0.00799911   125.0139   98.56156   93.09472
3   0.009410718   106.2618   99.44516   64.11163
4   0.01445217   69.19375   90.63868   96.29759
5   0.01613266   61.98606   95.05712   88.72604
6   0.01969529   50.77357   96.20747   94.3439
7   0.02278738   43.88394   94.20336   99.80848
8   0.02440065   40.98252   91.10492   98.01681
9   0.02648445   37.75801   91.90518   99.36183
10   0.03159312   31.65246   91.22862   99.9879
11   0.03280307   30.48495   96.76622   99.99865
12   0.03488687   28.66408   97.4196   100
13   0.03616404   27.65178   93.17466   100
14   0.03939057   25.38678   91.21223   100
15   0.04181047   23.91745   94.86288   99.99991
16   0.04517144   22.13788   96.61989   99.81281
17   0.04617974   21.65452   96.19528   100
18   0.04893573   20.43497   90.92607   99.99996
19   0.05135563   19.47206   97.25022   99.95903
20   0.05243114   19.07263   97.40689   99.9909
21   0.05397719   18.52635   96.33294   99.99899
22   0.05511992   18.14226   94.79716   99.99799
23   0.05706928   17.52256   95.40516   99.98705
24   0.05760704   17.35899   93.89327   99.9995
25   0.05854811   17.07997   93.67588   99.97734
26   0.05948918   16.80978   92.43218   99.9947
27   0.06043025   16.548   90.41551   99.99999
28   0.06244683   16.01362   99.91109   100
29   0.06399288   15.62674   97.66351   92.55246
30   0.06607668   15.13393   95.45887   94.22256
31   0.06735385   14.84696   93.30365   97.65286
32   0.06836214   14.62798   98.45798   87.10069
33   0.06957209   14.37358   99.10513   59.33062
34   0.07111814   14.06111   93.16652   96.73512
35   0.07407579   13.49969   98.19888   99.59912
36   0.07730232   12.93622   99.98063   99.56896
37   0.07952056   12.57536   91.26989   79.76798
38   0.07978944   12.53299   92.75467   77.55309
39   0.08698192   11.49664   91.78713   80.47961
Warning message:
In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
----- PERFORMING Multitaper Spectral Analysis -----

----- APPLYING PIECEWISE-LINEAR INTERPOLATION TO STRATIGRAPHIC SERIES -----

 ,* Number of samples= 3226
 ,* Determining median sampling interval for series
 ,* Will interpolate to median sampling interval of 1.704084
 ,* New number of samples= 1592
 ,* Number of data points in stratigraphic series: 1592
 ,* Stratigraphic series length (space or time): 2711.198
 ,* Sampling interval (space or time): 1.704084
 ,* Will use default setting of 5 DPSS tapers
 ,* Mean value subtracted= 0.002160396
 ,* Linear trend NOT subtracted
 ,* Nyquist frequency: 0.2934127
 ,* Rayleigh frequency: 0.000368609
 ,* MTM Power spectrum bandwidth resolution (halfwidth): 0.001105827
 ,* Padded to 7960 points

 ,* Searching for significant spectral peaks that satisfy 90 % CL
     requirements outlined in Meyers (2012):
 ,* Number of significant F-test peaks identified = 28
ID  / Frequency / Period / Harmonic_CL / Rednoise_CL
1   0.003317481   301.4336   99.22563   99.60723
2   0.005307969   188.396   99.0029   80.79574
3   0.008035675   124.445   95.86239   87.79466
4   0.009362667   106.8072   91.52246   65.15951
5   0.0361974   27.62629   99.53001   99.66566
6   0.03767184   26.54503   95.85013   92.84235
7   0.03885138   25.73911   91.61882   86.68203
8   0.06052559   16.52194   97.99804   96.67692
9   0.06251608   15.99588   98.8029   99.42296
10   0.07726044   12.94324   98.01795   91.71929
11   0.08315818   12.02528   98.48469   94.52601
12   0.08610705   11.61345   99.52748   93.55046
13   0.09008803   11.10025   95.83367   93.51997
14   0.09841859   10.16068   97.39891   83.77018
15   0.107044   9.341949   96.97712   87.83091
16   0.1381546   7.238266   98.70086   90.68758
17   0.1396291   7.161832   93.21986   88.7941
18   0.1542997   6.480894   91.5195   71.26731
19   0.1554055   6.434777   94.90084   90.68348
20   0.1661689   6.017973   93.63394   94.75849
21   0.1896862   5.271866   93.22205   94.34052
22   0.2070845   4.828946   97.19301   91.96162
23   0.2173318   4.601259   95.46499   79.98831
24   0.2187326   4.571793   99.78941   82.44954
25   0.2485899   4.02269   93.38636   78.44001
26   0.2673889   3.739871   99.07866   95.31988
27   0.276899   3.611424   95.82182   61.98371
28   0.2781523   3.595153   94.82743   76.71233
Warning message:
In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
----- BANDPASS FILTERING STRATIGRAPHIC SERIES-----

----- APPLYING PIECEWISE-LINEAR INTERPOLATION TO STRATIGRAPHIC SERIES -----

 ,* Number of samples= 3332
 ,* Determining median sampling interval for series
 ,* Will interpolate to median sampling interval of 1.704084
 ,* New number of samples= 1746
 ,* Number of data points= 1746
 ,* Sample interval= 1.704084
 ,* Mean value removed= -0.008942009
 ,* Center of bandpass filter = 0.008
 ,* 14 pos/neg frequency pairs will be bandpassed
          age        scl_ma
1    66101.75  1.102133e-01
2    66103.45  1.176764e-01
3    66105.15  1.242272e-01
4    66106.86  1.298012e-01
5    66108.56  1.343414e-01
6    66110.27  1.377984e-01
7    66111.97  1.401313e-01
8    66113.67  1.413077e-01
9    66115.38  1.413045e-01
10   66117.08  1.401080e-01
11   66118.79  1.377142e-01
12   66120.49  1.341287e-01
13   66122.20  1.293671e-01
14   66123.90  1.234548e-01
15   66125.60  1.164272e-01
16   66127.31  1.083288e-01
17   66129.01  9.921388e-02
18   66130.72  8.914531e-02
19   66132.42  7.819467e-02
20   66134.12  6.644151e-02
21   66135.83  5.397285e-02
22   66137.53  4.088250e-02
23   66139.24  2.727034e-02
24   66140.94  1.324160e-02
25   66142.64 -1.094008e-03
26   66144.35 -1.562313e-02
27   66146.05 -3.022969e-02
28   66147.76 -4.479584e-02
29   66149.46 -5.920290e-02
30   66151.16 -7.333235e-02
31   66152.87 -8.706683e-02
32   66154.57 -1.002911e-01
33   66156.28 -1.128931e-01
34   66157.98 -1.247647e-01
35   66159.69 -1.358030e-01
36   66161.39 -1.459109e-01
37   66163.09 -1.549981e-01
38   66164.80 -1.629820e-01
39   66166.50 -1.697881e-01
40   66168.21 -1.753513e-01
41   66169.91 -1.796160e-01
42   66171.61 -1.825368e-01
43   66173.32 -1.840791e-01
44   66175.02 -1.842194e-01
45   66176.73 -1.829454e-01
46   66178.43 -1.802565e-01
47   66180.13 -1.761637e-01
48   66181.84 -1.706899e-01
49   66183.54 -1.638694e-01
50   66185.25 -1.557477e-01
51   66186.95 -1.463819e-01
52   66188.65 -1.358394e-01
53   66190.36 -1.241980e-01
54   66192.06 -1.115452e-01
55   66193.77 -9.797758e-02
56   66195.47 -8.359983e-02
57   66197.17 -6.852428e-02
58   66198.88 -5.286979e-02
59   66200.58 -3.676092e-02
60   66202.29 -2.032687e-02
61   66203.99 -3.700460e-03
62   66205.70  1.298294e-02
63   66207.40  2.958654e-02
64   66209.10  4.597326e-02
65   66210.81  6.200686e-02
66   66212.51  7.755310e-02
67   66214.22  9.248086e-02
68   66215.92  1.066633e-01
69   66217.62  1.199788e-01
70   66219.33  1.323123e-01
71   66221.03  1.435560e-01
72   66222.74  1.536106e-01
73   66224.44  1.623858e-01
74   66226.14  1.698016e-01
75   66227.85  1.757886e-01
76   66229.55  1.802890e-01
77   66231.26  1.832569e-01
78   66232.96  1.846588e-01
79   66234.66  1.844743e-01
80   66236.37  1.826957e-01
81   66238.07  1.793289e-01
82   66239.78  1.743928e-01
83   66241.48  1.679196e-01
84   66243.19  1.599545e-01
85   66244.89  1.505554e-01
86   66246.59  1.397925e-01
87   66248.30  1.277479e-01
88   66250.00  1.145146e-01
89   66251.71  1.001963e-01
90   66253.41  8.490626e-02
91   66255.11  6.876659e-02
92   66256.82  5.190710e-02
93   66258.52  3.446437e-02
94   66260.23  1.658066e-02
95   66261.93 -1.597314e-03
96   66263.63 -1.991956e-02
97   66265.34 -3.823404e-02
98   66267.04 -5.638794e-02
99   66268.75 -7.422896e-02
100  66270.45 -9.160659e-02
101  66272.15 -1.083734e-01
102  66273.86 -1.243862e-01
103  66275.56 -1.395074e-01
104  66277.27 -1.536062e-01
105  66278.97 -1.665597e-01
106  66280.67 -1.782537e-01
107  66282.38 -1.885843e-01
108  66284.08 -1.974582e-01
109  66285.79 -2.047940e-01
110  66287.49 -2.105228e-01
111  66289.20 -2.145887e-01
112  66290.90 -2.169496e-01
113  66292.60 -2.175774e-01
114  66294.31 -2.164585e-01
115  66296.01 -2.135939e-01
116  66297.72 -2.089992e-01
117  66299.42 -2.027046e-01
118  66301.12 -1.947550e-01
119  66302.83 -1.852092e-01
120  66304.53 -1.741397e-01
121  66306.24 -1.616323e-01
122  66307.94 -1.477854e-01
123  66309.64 -1.327090e-01
124  66311.35 -1.165242e-01
125  66313.05 -9.936175e-02
126  66314.76 -8.136158e-02
127  66316.46 -6.267123e-02
128  66318.16 -4.344482e-02
129  66319.87 -2.384177e-02
130  66321.57 -4.025454e-03
131  66323.28  1.583814e-02
132  66324.98  3.558179e-02
133  66326.69  5.503845e-02
134  66328.39  7.404269e-02
135  66330.09  9.243202e-02
136  66331.80  1.100484e-01
137  66333.50  1.267394e-01
138  66335.21  1.423598e-01
139  66336.91  1.567726e-01
140  66338.61  1.698502e-01
141  66340.32  1.814759e-01
142  66342.02  1.915444e-01
143  66343.73  1.999631e-01
144  66345.43  2.066530e-01
145  66347.13  2.115491e-01
146  66348.84  2.146013e-01
147  66350.54  2.157748e-01
148  66352.25  2.150506e-01
149  66353.95  2.124253e-01
150  66355.65  2.079118e-01
151  66357.36  2.015390e-01
152  66359.06  1.933516e-01
153  66360.77  1.834096e-01
154  66362.47  1.717885e-01
155  66364.18  1.585780e-01
156  66365.88  1.438820e-01
157  66367.58  1.278170e-01
158  66369.29  1.105122e-01
159  66370.99  9.210734e-02
160  66372.70  7.275255e-02
161  66374.40  5.260657e-02
162  66376.10  3.183560e-02
163  66377.81  1.061197e-02
164  66379.51 -1.088729e-02
165  66381.22 -3.248196e-02
166  66382.92 -5.399009e-02
167  66384.62 -7.522957e-02
168  66386.33 -9.601960e-02
169  66388.03 -1.161823e-01
170  66389.74 -1.355441e-01
171  66391.44 -1.539374e-01
172  66393.14 -1.712019e-01
173  66394.85 -1.871860e-01
174  66396.55 -2.017479e-01
175  66398.26 -2.147575e-01
176  66399.96 -2.260966e-01
177  66401.66 -2.356610e-01
178  66403.37 -2.433604e-01
179  66405.07 -2.491202e-01
180  66406.78 -2.528813e-01
181  66408.48 -2.546016e-01
182  66410.19 -2.542554e-01
183  66411.89 -2.518348e-01
184  66413.59 -2.473490e-01
185  66415.30 -2.408245e-01
186  66417.00 -2.323055e-01
187  66418.71 -2.218527e-01
188  66420.41 -2.095437e-01
189  66422.11 -1.954720e-01
190  66423.82 -1.797462e-01
191  66425.52 -1.624898e-01
192  66427.23 -1.438392e-01
193  66428.93 -1.239437e-01
194  66430.63 -1.029634e-01
195  66432.34 -8.106877e-02
196  66434.04 -5.843843e-02
197  66435.75 -3.525828e-02
198  66437.45 -1.171975e-02
199  66439.15  1.198173e-02
200  66440.86  3.564839e-02
201  66442.56  5.908170e-02
202  66444.27  8.208407e-02
203  66445.97  1.044605e-01
204  66447.68  1.260202e-01
205  66449.38  1.465782e-01
206  66451.08  1.659571e-01
207  66452.79  1.839883e-01
208  66454.49  2.005135e-01
209  66456.20  2.153863e-01
210  66457.90  2.284734e-01
211  66459.60  2.396556e-01
212  66461.31  2.488289e-01
213  66463.01  2.559057e-01
214  66464.72  2.608154e-01
215  66466.42  2.635048e-01
216  66468.12  2.639394e-01
217  66469.83  2.621029e-01
218  66471.53  2.579979e-01
219  66473.24  2.516461e-01
220  66474.94  2.430877e-01
221  66476.64  2.323816e-01
222  66478.35  2.196049e-01
223  66480.05  2.048521e-01
224  66481.76  1.882347e-01
225  66483.46  1.698803e-01
226  66485.17  1.499314e-01
227  66486.87  1.285446e-01
228  66488.57  1.058891e-01
229  66490.28  8.214540e-02
230  66491.98  5.750411e-02
231  66493.69  3.216409e-02
232  66495.39  6.330993e-03
233  66497.09 -1.978442e-02
234  66498.80 -4.596799e-02
235  66500.50 -7.200396e-02
236  66502.21 -9.767670e-02
237  66503.91 -1.227725e-01
238  66505.61 -1.470815e-01
239  66507.32 -1.703990e-01
240  66509.02 -1.925277e-01
241  66510.73 -2.132792e-01
242  66512.43 -2.324754e-01
243  66514.13 -2.499500e-01
244  66515.84 -2.655504e-01
245  66517.54 -2.791384e-01
246  66519.25 -2.905918e-01
247  66520.95 -2.998053e-01
248  66522.65 -3.066916e-01
249  66524.36 -3.111821e-01
250  66526.06 -3.132273e-01
251  66527.77 -3.127978e-01
252  66529.47 -3.098842e-01
253  66531.18 -3.044975e-01
254  66532.88 -2.966690e-01
255  66534.58 -2.864500e-01
256  66536.29 -2.739118e-01
257  66537.99 -2.591448e-01
258  66539.70 -2.422582e-01
259  66541.40 -2.233790e-01
260  66543.10 -2.026509e-01
261  66544.81 -1.802336e-01
262  66546.51 -1.563010e-01
263  66548.22 -1.310404e-01
264  66549.92 -1.046506e-01
265  66551.62 -7.734050e-02
266  66553.33 -4.932747e-02
267  66555.03 -2.083551e-02
268  66556.74  7.906503e-03
269  66558.44  3.666667e-02
270  66560.14  6.521195e-02
271  66561.85  9.331005e-02
272  66563.55  1.207313e-01
273  66565.26  1.472507e-01
274  66566.96  1.726494e-01
275  66568.67  1.967169e-01
276  66570.37  2.192525e-01
277  66572.07  2.400672e-01
278  66573.78  2.589852e-01
279  66575.48  2.758451e-01
280  66577.19  2.905019e-01
281  66578.89  3.028274e-01
282  66580.59  3.127121e-01
283  66582.30  3.200656e-01
284  66584.00  3.248176e-01
285  66585.71  3.269187e-01
286  66587.41  3.263404e-01
287  66589.11  3.230760e-01
288  66590.82  3.171403e-01
289  66592.52  3.085696e-01
290  66594.23  2.974217e-01
291  66595.93  2.837753e-01
292  66597.63  2.677295e-01
293  66599.34  2.494031e-01
294  66601.04  2.289336e-01
295  66602.75  2.064763e-01
296  66604.45  1.822028e-01
297  66606.16  1.563001e-01
298  66607.86  1.289689e-01
299  66609.56  1.004220e-01
300  66611.27  7.088256e-02
301  66612.97  4.058267e-02
302  66614.68  9.761128e-03
303  66616.38 -2.133827e-02
304  66618.08 -5.246870e-02
305  66619.79 -8.338231e-02
306  66621.49 -1.138322e-01
307  66623.20 -1.435743e-01
308  66624.90 -1.723697e-01
309  66626.60 -1.999859e-01
310  66628.31 -2.261995e-01
311  66630.01 -2.507974e-01
312  66631.72 -2.735789e-01
313  66633.42 -2.943570e-01
314  66635.12 -3.129603e-01
315  66636.83 -3.292342e-01
316  66638.53 -3.430420e-01
317  66640.24 -3.542667e-01
318  66641.94 -3.628110e-01
319  66643.64 -3.685991e-01
320  66645.35 -3.715766e-01
321  66647.05 -3.717114e-01
322  66648.76 -3.689940e-01
323  66650.46 -3.634374e-01
324  66652.17 -3.550772e-01
325  66653.87 -3.439712e-01
326  66655.57 -3.301994e-01
327  66657.28 -3.138629e-01
328  66658.98 -2.950834e-01
329  66660.69 -2.740022e-01
330  66662.39 -2.507794e-01
331  66664.09 -2.255920e-01
332  66665.80 -1.986333e-01
333  66667.50 -1.701108e-01
334  66669.21 -1.402449e-01
335  66670.91 -1.092672e-01
336  66672.61 -7.741819e-02
337  66674.32 -4.494613e-02
338  66676.02 -1.210448e-02
339  66677.73  2.084983e-02
340  66679.43  5.365852e-02
341  66681.13  8.606395e-02
342  66682.84  1.178112e-01
343  66684.54  1.486501e-01
344  66686.25  1.783371e-01
345  66687.95  2.066374e-01
346  66689.66  2.333266e-01
347  66691.36  2.581929e-01
348  66693.06  2.810381e-01
349  66694.77  3.016798e-01
350  66696.47  3.199526e-01
351  66698.18  3.357095e-01
352  66699.88  3.488229e-01
353  66701.58  3.591860e-01
354  66703.29  3.667132e-01
355  66704.99  3.713411e-01
356  66706.70  3.730291e-01
357  66708.40  3.717593e-01
358  66710.10  3.675372e-01
359  66711.81  3.603913e-01
360  66713.51  3.503730e-01
361  66715.22  3.375564e-01
362  66716.92  3.220375e-01
363  66718.62  3.039333e-01
364  66720.33  2.833814e-01
365  66722.03  2.605385e-01
366  66723.74  2.355795e-01
367  66725.44  2.086957e-01
368  66727.15  1.800939e-01
369  66728.85  1.499941e-01
370  66730.55  1.186286e-01
371  66732.26  8.623920e-02
372  66733.96  5.307626e-02
373  66735.67  1.939611e-02
374  66737.37 -1.454070e-02
375  66739.07 -4.847150e-02
376  66740.78 -8.213352e-02
377  66742.48 -1.152660e-01
378  66744.19 -1.476122e-01
379  66745.89 -1.789213e-01
380  66747.59 -2.089507e-01
381  66749.30 -2.374673e-01
382  66751.00 -2.642502e-01
383  66752.71 -2.890915e-01
384  66754.41 -3.117985e-01
385  66756.11 -3.321951e-01
386  66757.82 -3.501231e-01
387  66759.52 -3.654433e-01
388  66761.23 -3.780368e-01
389  66762.93 -3.878060e-01
390  66764.63 -3.946750e-01
391  66766.34 -3.985904e-01
392  66768.04 -3.995217e-01
393  66769.75 -3.974617e-01
394  66771.45 -3.924260e-01
395  66773.16 -3.844535e-01
396  66774.86 -3.736057e-01
397  66776.56 -3.599663e-01
398  66778.27 -3.436406e-01
399  66779.97 -3.247544e-01
400  66781.68 -3.034536e-01
401  66783.38 -2.799024e-01
402  66785.08 -2.542823e-01
403  66786.79 -2.267907e-01
404  66788.49 -1.976393e-01
405  66790.20 -1.670525e-01
406  66791.90 -1.352656e-01
407  66793.60 -1.025229e-01
408  66795.31 -6.907597e-02
409  66797.01 -3.518152e-02
410  66798.72 -1.099528e-03
411  66800.42  3.290884e-02
412  66802.12  6.658323e-02
413  66803.83  9.966610e-02
414  66805.53  1.319047e-01
415  66807.24  1.630532e-01
416  66808.94  1.928741e-01
417  66810.65  2.211406e-01
418  66812.35  2.476382e-01
419  66814.05  2.721659e-01
420  66815.76  2.945384e-01
421  66817.46  3.145870e-01
422  66819.17  3.321612e-01
423  66820.87  3.471295e-01
424  66822.57  3.593807e-01
425  66824.28  3.688245e-01
426  66825.98  3.753922e-01
427  66827.69  3.790375e-01
428  66829.39  3.797363e-01
429  66831.09  3.774872e-01
430  66832.80  3.723112e-01
431  66834.50  3.642520e-01
432  66836.21  3.533749e-01
433  66837.91  3.397669e-01
434  66839.61  3.235356e-01
435  66841.32  3.048085e-01
436  66843.02  2.837319e-01
437  66844.73  2.604698e-01
438  66846.43  2.352027e-01
439  66848.14  2.081257e-01
440  66849.84  1.794477e-01
441  66851.54  1.493892e-01
442  66853.25  1.181809e-01
443  66854.95  8.606167e-02
444  66856.66  5.327685e-02
445  66858.36  2.007636e-02
446  66860.06 -1.328726e-02
447  66861.77 -4.656081e-02
448  66863.47 -7.949230e-02
449  66865.18 -1.118330e-01
450  66866.88 -1.433391e-01
451  66868.58 -1.737738e-01
452  66870.29 -2.029090e-01
453  66871.99 -2.305271e-01
454  66873.70 -2.564225e-01
455  66875.40 -2.804030e-01
456  66877.10 -3.022916e-01
457  66878.81 -3.219278e-01
458  66880.51 -3.391682e-01
459  66882.22 -3.538883e-01
460  66883.92 -3.659828e-01
461  66885.62 -3.753667e-01
462  66887.33 -3.819757e-01
463  66889.03 -3.857669e-01
464  66890.74 -3.867186e-01
465  66892.44 -3.848307e-01
466  66894.15 -3.801247e-01
467  66895.85 -3.726433e-01
468  66897.55 -3.624501e-01
469  66899.26 -3.496289e-01
470  66900.96 -3.342834e-01
471  66902.67 -3.165357e-01
472  66904.37 -2.965260e-01
473  66906.07 -2.744109e-01
474  66907.78 -2.503626e-01
475  66909.48 -2.245673e-01
476  66911.19 -1.972238e-01
477  66912.89 -1.685419e-01
478  66914.59 -1.387409e-01
479  66916.30 -1.080479e-01
480  66918.00 -7.669569e-02
481  66919.71 -4.492164e-02
482  66921.41 -1.296531e-02
483  66923.11  1.893310e-02
484  66924.82  5.053463e-02
485  66926.52  8.160337e-02
486  66928.23  1.119082e-01
487  66929.93  1.412245e-01
488  66931.64  1.693359e-01
489  66933.34  1.960357e-01
490  66935.04  2.211287e-01
491  66936.75  2.444324e-01
492  66938.45  2.657783e-01
493  66940.16  2.850131e-01
494  66941.86  3.020000e-01
495  66943.56  3.166196e-01
496  66945.27  3.287705e-01
497  66946.97  3.383703e-01
498  66948.68  3.453559e-01
499  66950.38  3.496841e-01
500  66952.08  3.513315e-01
501  66953.79  3.502951e-01
502  66955.49  3.465920e-01
503  66957.20  3.402588e-01
504  66958.90  3.313520e-01
505  66960.60  3.199469e-01
506  66962.31  3.061372e-01
507  66964.01  2.900341e-01
508  66965.72  2.717656e-01
509  66967.42  2.514754e-01
510  66969.13  2.293213e-01
511  66970.83  2.054749e-01
512  66972.53  1.801193e-01
513  66974.24  1.534484e-01
514  66975.94  1.256649e-01
515  66977.65  9.697898e-02
516  66979.35  6.760680e-02
517  66981.05  3.776863e-02
518  66982.76  7.687356e-03
519  66984.46 -2.241328e-02
520  66986.17 -5.231028e-02
521  66987.87 -8.178313e-02
522  66989.57 -1.106153e-01
523  66991.28 -1.385960e-01
524  66992.98 -1.655216e-01
525  66994.69 -1.911972e-01
526  66996.39 -2.154377e-01
527  66998.09 -2.380698e-01
528  66999.80 -2.589327e-01
529  67001.50 -2.778791e-01
530  67003.21 -2.947770e-01
531  67004.91 -3.095096e-01
532  67006.61 -3.219769e-01
533  67008.32 -3.320960e-01
534  67010.02 -3.398016e-01
535  67011.73 -3.450465e-01
536  67013.43 -3.478021e-01
537  67015.14 -3.480578e-01
538  67016.84 -3.458219e-01
539  67018.54 -3.411208e-01
540  67020.25 -3.339988e-01
541  67021.95 -3.245181e-01
542  67023.66 -3.127579e-01
543  67025.36 -2.988135e-01
544  67027.06 -2.827962e-01
545  67028.77 -2.648319e-01
546  67030.47 -2.450600e-01
547  67032.18 -2.236330e-01
548  67033.88 -2.007143e-01
549  67035.58 -1.764780e-01
550  67037.29 -1.511068e-01
551  67038.99 -1.247908e-01
552  67040.70 -9.772635e-02
553  67042.40 -7.011435e-02
554  67044.10 -4.215873e-02
555  67045.81 -1.406502e-02
556  67047.51  1.396116e-02
557  67049.22  4.171562e-02
558  67050.92  6.899711e-02
559  67052.63  9.560873e-02
560  67054.33  1.213594e-01
561  67056.03  1.460650e-01
562  67057.74  1.695502e-01
563  67059.44  1.916492e-01
564  67061.15  2.122068e-01
565  67062.85  2.310802e-01
566  67064.55  2.481390e-01
567  67066.26  2.632670e-01
568  67067.96  2.763624e-01
569  67069.67  2.873384e-01
570  67071.37  2.961244e-01
571  67073.07  3.026657e-01
572  67074.78  3.069241e-01
573  67076.48  3.088783e-01
574  67078.19  3.085236e-01
575  67079.89  3.058722e-01
576  67081.59  3.009528e-01
577  67083.30  2.938102e-01
578  67085.00  2.845052e-01
579  67086.71  2.731140e-01
580  67088.41  2.597273e-01
581  67090.12  2.444500e-01
582  67091.82  2.274000e-01
583  67093.52  2.087075e-01
584  67095.23  1.885139e-01
585  67096.93  1.669707e-01
586  67098.64  1.442386e-01
587  67100.34  1.204859e-01
588  67102.04  9.588762e-02
589  67103.75  7.062402e-02
590  67105.45  4.487929e-02
591  67107.16  1.884025e-02
592  67108.86 -7.305017e-03
593  67110.56 -3.336851e-02
594  67112.27 -5.916367e-02
595  67113.97 -8.450670e-02
596  67115.68 -1.092178e-01
597  67117.38 -1.331227e-01
598  67119.08 -1.560534e-01
599  67120.79 -1.778498e-01
600  67122.49 -1.983605e-01
601  67124.20 -2.174440e-01
602  67125.90 -2.349696e-01
603  67127.60 -2.508184e-01
604  67129.31 -2.648838e-01
605  67131.01 -2.770724e-01
606  67132.72 -2.873046e-01
607  67134.42 -2.955151e-01
608  67136.13 -3.016532e-01
609  67137.83 -3.056832e-01
610  67139.53 -3.075845e-01
611  67141.24 -3.073517e-01
612  67142.94 -3.049945e-01
613  67144.65 -3.005378e-01
614  67146.35 -2.940211e-01
615  67148.05 -2.854983e-01
616  67149.76 -2.750375e-01
617  67151.46 -2.627200e-01
618  67153.17 -2.486401e-01
619  67154.87 -2.329038e-01
620  67156.57 -2.156288e-01
621  67158.28 -1.969429e-01
622  67159.98 -1.769834e-01
623  67161.69 -1.558960e-01
624  67163.39 -1.338339e-01
625  67165.09 -1.109563e-01
626  67166.80 -8.742761e-02
627  67168.50 -6.341623e-02
628  67170.21 -3.909321e-02
629  67171.91 -1.463110e-02
630  67173.62  9.797233e-03
631  67175.32  3.401986e-02
632  67177.02  5.786695e-02
633  67178.73  8.117199e-02
634  67180.43  1.037729e-01
635  67182.14  1.255132e-01
636  67183.84  1.462430e-01
637  67185.54  1.658201e-01
638  67187.25  1.841109e-01
639  67188.95  2.009912e-01
640  67190.66  2.163473e-01
641  67192.36  2.300764e-01
642  67194.06  2.420877e-01
643  67195.77  2.523025e-01
644  67197.47  2.606549e-01
645  67199.18  2.670925e-01
646  67200.88  2.715763e-01
647  67202.58  2.740808e-01
648  67204.29  2.745949e-01
649  67205.99  2.731209e-01
650  67207.70  2.696753e-01
651  67209.40  2.642881e-01
652  67211.10  2.570026e-01
653  67212.81  2.478754e-01
654  67214.51  2.369754e-01
655  67216.22  2.243839e-01
656  67217.92  2.101935e-01
657  67219.63  1.945075e-01
658  67221.33  1.774394e-01
659  67223.03  1.591119e-01
660  67224.74  1.396560e-01
661  67226.44  1.192100e-01
662  67228.15  9.791879e-02
663  67229.85  7.593252e-02
664  67231.55  5.340574e-02
665  67233.26  3.049626e-02
666  67234.96  7.364044e-03
667  67236.67 -1.582989e-02
668  67238.37 -3.892458e-02
669  67240.07 -6.176024e-02
670  67241.78 -8.417932e-02
671  67243.48 -1.060276e-01
672  67245.19 -1.271553e-01
673  67246.89 -1.474181e-01
674  67248.59 -1.666777e-01
675  67250.30 -1.848036e-01
676  67252.00 -2.016731e-01
677  67253.71 -2.171727e-01
678  67255.41 -2.311985e-01
679  67257.12 -2.436572e-01
680  67258.82 -2.544662e-01
681  67260.52 -2.635549e-01
682  67262.23 -2.708644e-01
683  67263.93 -2.763483e-01
684  67265.64 -2.799729e-01
685  67267.34 -2.817172e-01
686  67269.04 -2.815733e-01
687  67270.75 -2.795463e-01
688  67272.45 -2.756541e-01
689  67274.16 -2.699275e-01
690  67275.86 -2.624096e-01
691  67277.56 -2.531559e-01
692  67279.27 -2.422336e-01
693  67280.97 -2.297212e-01
694  67282.68 -2.157077e-01
695  67284.38 -2.002926e-01
696  67286.08 -1.835843e-01
697  67287.79 -1.657003e-01
698  67289.49 -1.467655e-01
699  67291.20 -1.269119e-01
700  67292.90 -1.062775e-01
701  67294.61 -8.500527e-02
702  67296.31 -6.324237e-02
703  67298.01 -4.113891e-02
704  67299.72 -1.884707e-02
705  67301.42  3.480020e-03
706  67303.13  2.568927e-02
707  67304.83  4.762872e-02
708  67306.53  6.914852e-02
709  67308.24  9.010199e-02
710  67309.94  1.103466e-01
711  67311.65  1.297450e-01
712  67313.35  1.481657e-01
713  67315.05  1.654842e-01
714  67316.76  1.815839e-01
715  67318.46  1.963565e-01
716  67320.17  2.097031e-01
717  67321.87  2.215347e-01
718  67323.57  2.317726e-01
719  67325.28  2.403494e-01
720  67326.98  2.472089e-01
721  67328.69  2.523068e-01
722  67330.39  2.556109e-01
723  67332.09  2.571013e-01
724  67333.80  2.567703e-01
725  67335.50  2.546229e-01
726  67337.21  2.506762e-01
727  67338.91  2.449599e-01
728  67340.62  2.375153e-01
729  67342.32  2.283957e-01
730  67344.02  2.176655e-01
731  67345.73  2.054002e-01
732  67347.43  1.916854e-01
733  67349.14  1.766167e-01
734  67350.84  1.602985e-01
735  67352.54  1.428438e-01
736  67354.25  1.243730e-01
737  67355.95  1.050133e-01
738  67357.66  8.489782e-02
739  67359.36  6.416452e-02
740  67361.06  4.295543e-02
741  67362.77  2.141562e-02
742  67364.47 -3.078157e-04
743  67366.18 -2.206674e-02
744  67367.88 -4.371297e-02
745  67369.58 -6.509932e-02
746  67371.29 -8.608054e-02
747  67372.99 -1.065144e-01
748  67374.70 -1.262624e-01
749  67376.40 -1.451913e-01
750  67378.11 -1.631731e-01
751  67379.81 -1.800869e-01
752  67381.51 -1.958188e-01
753  67383.22 -2.102634e-01
754  67384.92 -2.233240e-01
755  67386.63 -2.349136e-01
756  67388.33 -2.449553e-01
757  67390.03 -2.533827e-01
758  67391.74 -2.601405e-01
759  67393.44 -2.651849e-01
760  67395.15 -2.684838e-01
761  67396.85 -2.700170e-01
762  67398.55 -2.697762e-01
763  67400.26 -2.677653e-01
764  67401.96 -2.640003e-01
765  67403.67 -2.585088e-01
766  67405.37 -2.513305e-01
767  67407.07 -2.425162e-01
768  67408.78 -2.321278e-01
769  67410.48 -2.202379e-01
770  67412.19 -2.069291e-01
771  67413.89 -1.922936e-01
772  67415.60 -1.764325e-01
773  67417.30 -1.594549e-01
774  67419.00 -1.414775e-01
775  67420.71 -1.226237e-01
776  67422.41 -1.030224e-01
777  67424.12 -8.280753e-02
778  67425.82 -6.211707e-02
779  67427.52 -4.109193e-02
780  67429.23 -1.987507e-02
781  67430.93  1.389432e-03
782  67432.64  2.255740e-02
783  67434.34  4.348556e-02
784  67436.04  6.403246e-02
785  67437.75  8.405947e-02
786  67439.45  1.034317e-01
787  67441.16  1.220190e-01
788  67442.86  1.396966e-01
789  67444.56  1.563463e-01
790  67446.27  1.718569e-01
791  67447.97  1.861253e-01
792  67449.68  1.990568e-01
793  67451.38  2.105660e-01
794  67453.08  2.205774e-01
795  67454.79  2.290258e-01
796  67456.49  2.358564e-01
797  67458.20  2.410260e-01
798  67459.90  2.445022e-01
799  67461.61  2.462646e-01
800  67463.31  2.463042e-01
801  67465.01  2.446236e-01
802  67466.72  2.412375e-01
803  67468.42  2.361716e-01
804  67470.13  2.294633e-01
805  67471.83  2.211609e-01
806  67473.53  2.113234e-01
807  67475.24  2.000202e-01
808  67476.94  1.873304e-01
809  67478.65  1.733423e-01
810  67480.35  1.581529e-01
811  67482.05  1.418671e-01
812  67483.76  1.245968e-01
813  67485.46  1.064606e-01
814  67487.17  8.758262e-02
815  67488.87  6.809164e-02
816  67490.57  4.812034e-02
817  67492.28  2.780436e-02
818  67493.98  7.281324e-03
819  67495.69 -1.331005e-02
820  67497.39 -3.383094e-02
821  67499.10 -5.414330e-02
822  67500.80 -7.411088e-02
823  67502.50 -9.360008e-02
824  67504.21 -1.124809e-01
825  67505.91 -1.306277e-01
826  67507.62 -1.479202e-01
827  67509.32 -1.642442e-01
828  67511.02 -1.794924e-01
829  67512.73 -1.935649e-01
830  67514.43 -2.063702e-01
831  67516.14 -2.178255e-01
832  67517.84 -2.278573e-01
833  67519.54 -2.364021e-01
834  67521.25 -2.434063e-01
835  67522.95 -2.488272e-01
836  67524.66 -2.526327e-01
837  67526.36 -2.548017e-01
838  67528.06 -2.553242e-01
839  67529.77 -2.542013e-01
840  67531.47 -2.514454e-01
841  67533.18 -2.470795e-01
842  67534.88 -2.411376e-01
843  67536.59 -2.336642e-01
844  67538.29 -2.247138e-01
845  67539.99 -2.143509e-01
846  67541.70 -2.026490e-01
847  67543.40 -1.896907e-01
848  67545.11 -1.755664e-01
849  67546.81 -1.603742e-01
850  67548.51 -1.442191e-01
851  67550.22 -1.272120e-01
852  67551.92 -1.094694e-01
853  67553.63 -9.111210e-02
854  67555.33 -7.226459e-02
855  67557.03 -5.305425e-02
856  67558.74 -3.361042e-02
857  67560.44 -1.406349e-02
858  67562.15  5.455945e-03
859  67563.85  2.481798e-02
860  67565.55  4.389428e-02
861  67567.26  6.255891e-02
862  67568.96  8.068921e-02
863  67570.67  9.816659e-02
864  67572.37  1.148773e-01
865  67574.07  1.307131e-01
866  67575.78  1.455723e-01
867  67577.48  1.593598e-01
868  67579.19  1.719884e-01
869  67580.89  1.833788e-01
870  67582.60  1.934603e-01
871  67584.30  2.021713e-01
872  67586.00  2.094596e-01
873  67587.71  2.152827e-01
874  67589.41  2.196081e-01
875  67591.12  2.224133e-01
876  67592.82  2.236861e-01
877  67594.52  2.234245e-01
878  67596.23  2.216368e-01
879  67597.93  2.183413e-01
880  67599.64  2.135663e-01
881  67601.34  2.073497e-01
882  67603.04  1.997388e-01
883  67604.75  1.907899e-01
884  67606.45  1.805681e-01
885  67608.16  1.691462e-01
886  67609.86  1.566050e-01
887  67611.56  1.430321e-01
888  67613.27  1.285214e-01
889  67614.97  1.131726e-01
890  67616.68  9.709054e-02
891  67618.38  8.038416e-02
892  67620.09  6.316604e-02
893  67621.79  4.555154e-02
894  67623.49  2.765801e-02
895  67625.20  9.603983e-03
896  67626.90 -8.491558e-03
897  67628.61 -2.651003e-02
898  67630.31 -4.433400e-02
899  67632.01 -6.184797e-02
900  67633.72 -7.893911e-02
901  67635.42 -9.549801e-02
902  67637.13 -1.114194e-01
903  67638.83 -1.266027e-01
904  67640.53 -1.409528e-01
905  67642.24 -1.543807e-01
906  67643.94 -1.668037e-01
907  67645.65 -1.781464e-01
908  67647.35 -1.883408e-01
909  67649.05 -1.973268e-01
910  67650.76 -2.050525e-01
911  67652.46 -2.114746e-01
912  67654.17 -2.165585e-01
913  67655.87 -2.202787e-01
914  67657.58 -2.226185e-01
915  67659.28 -2.235703e-01
916  67660.98 -2.231357e-01
917  67662.69 -2.213253e-01
918  67664.39 -2.181584e-01
919  67666.10 -2.136631e-01
920  67667.80 -2.078759e-01
921  67669.50 -2.008414e-01
922  67671.21 -1.926121e-01
923  67672.91 -1.832478e-01
924  67674.62 -1.728151e-01
925  67676.32 -1.613874e-01
926  67678.02 -1.490438e-01
927  67679.73 -1.358689e-01
928  67681.43 -1.219519e-01
929  67683.14 -1.073866e-01
930  67684.84 -9.226991e-02
931  67686.54 -7.670189e-02
932  67688.25 -6.078477e-02
933  67689.95 -4.462235e-02
934  67691.66 -2.831929e-02
935  67693.36 -1.198047e-02
936  67695.06  4.289720e-03
937  67696.77  2.038802e-02
938  67698.47  3.621298e-02
939  67700.18  5.166558e-02
940  67701.88  6.664984e-02
941  67703.59  8.107343e-02
942  67705.29  9.484821e-02
943  67706.99  1.078908e-01
944  67708.70  1.201230e-01
945  67710.40  1.314723e-01
946  67712.11  1.418724e-01
947  67713.81  1.512632e-01
948  67715.51  1.595919e-01
949  67717.22  1.668122e-01
950  67718.92  1.728855e-01
951  67720.63  1.777808e-01
952  67722.33  1.814743e-01
953  67724.03  1.839505e-01
954  67725.74  1.852012e-01
955  67727.44  1.852263e-01
956  67729.15  1.840333e-01
957  67730.85  1.816372e-01
958  67732.55  1.780607e-01
959  67734.26  1.733335e-01
960  67735.96  1.674925e-01
961  67737.67  1.605811e-01
962  67739.37  1.526494e-01
963  67741.08  1.437531e-01
964  67742.78  1.339541e-01
965  67744.48  1.233189e-01
966  67746.19  1.119193e-01
967  67747.89  9.983106e-02
968  67749.60  8.713370e-02
969  67751.30  7.391009e-02
970  67753.00  6.024573e-02
971  67754.71  4.622831e-02
972  67756.41  3.194708e-02
973  67758.12  1.749231e-02
974  67759.82  2.954751e-03
975  67761.52 -1.157498e-02
976  67763.23 -2.600693e-02
977  67764.93 -4.025235e-02
978  67766.64 -5.422426e-02
979  67768.34 -6.783795e-02
980  67770.04 -8.101149e-02
981  67771.75 -9.366623e-02
982  67773.45 -1.057272e-01
983  67775.16 -1.171237e-01
984  67776.86 -1.277894e-01
985  67778.57 -1.376631e-01
986  67780.27 -1.466887e-01
987  67781.97 -1.548158e-01
988  67783.68 -1.619998e-01
989  67785.38 -1.682021e-01
990  67787.09 -1.733905e-01
991  67788.79 -1.775391e-01
992  67790.49 -1.806287e-01
993  67792.20 -1.826464e-01
994  67793.90 -1.835862e-01
995  67795.61 -1.834487e-01
996  67797.31 -1.822408e-01
997  67799.01 -1.799763e-01
998  67800.72 -1.766751e-01
999  67802.42 -1.723633e-01
1000 67804.13 -1.670731e-01
1001 67805.83 -1.608424e-01
1002 67807.53 -1.537146e-01
1003 67809.24 -1.457384e-01
1004 67810.94 -1.369671e-01
1005 67812.65 -1.274588e-01
1006 67814.35 -1.172757e-01
1007 67816.05 -1.064836e-01
1008 67817.76 -9.515168e-02
1009 67819.46 -8.335206e-02
1010 67821.17 -7.115922e-02
1011 67822.87 -5.864962e-02
1012 67824.58 -4.590123e-02
1013 67826.28 -3.299302e-02
1014 67827.98 -2.000448e-02
1015 67829.69 -7.015177e-03
1016 67831.39  5.895769e-03
1017 67833.10  1.865014e-02
1018 67834.80  3.117108e-02
1019 67836.50  4.338356e-02
1020 67838.21  5.521483e-02
1021 67839.91  6.659480e-02
1022 67841.62  7.745653e-02
1023 67843.32  8.773651e-02
1024 67845.02  9.737513e-02
1025 67846.73  1.063169e-01
1026 67848.43  1.145110e-01
1027 67850.14  1.219112e-01
1028 67851.84  1.284764e-01
1029 67853.54  1.341708e-01
1030 67855.25  1.389640e-01
1031 67856.95  1.428312e-01
1032 67858.66  1.457535e-01
1033 67860.36  1.477176e-01
1034 67862.07  1.487162e-01
1035 67863.77  1.487480e-01
1036 67865.47  1.478174e-01
1037 67867.18  1.459348e-01
1038 67868.88  1.431161e-01
1039 67870.59  1.393831e-01
1040 67872.29  1.347630e-01
1041 67873.99  1.292881e-01
1042 67875.70  1.229959e-01
1043 67877.40  1.159289e-01
1044 67879.11  1.081338e-01
1045 67880.81  9.966168e-02
1046 67882.51  9.056764e-02
1047 67884.22  8.091024e-02
1048 67885.92  7.075122e-02
1049 67887.63  6.015517e-02
1050 67889.33  4.918905e-02
1051 67891.03  3.792182e-02
1052 67892.74  2.642398e-02
1053 67894.44  1.476718e-02
1054 67896.15  3.023689e-03
1055 67897.85 -8.733946e-03
1056 67899.56 -2.043342e-02
1057 67901.26 -3.200308e-02
1058 67902.96 -4.337237e-02
1059 67904.67 -5.447228e-02
1060 67906.37 -6.523573e-02
1061 67908.08 -7.559801e-02
1062 67909.78 -8.549716e-02
1063 67911.48 -9.487434e-02
1064 67913.19 -1.036742e-01
1065 67914.89 -1.118451e-01
1066 67916.60 -1.193398e-01
1067 67918.30 -1.261150e-01
1068 67920.00 -1.321326e-01
1069 67921.71 -1.373588e-01
1070 67923.41 -1.417654e-01
1071 67925.12 -1.453291e-01
1072 67926.82 -1.480320e-01
1073 67928.52 -1.498618e-01
1074 67930.23 -1.508115e-01
1075 67931.93 -1.508798e-01
1076 67933.64 -1.500709e-01
1077 67935.34 -1.483944e-01
1078 67937.04 -1.458653e-01
1079 67938.75 -1.425040e-01
1080 67940.45 -1.383360e-01
1081 67942.16 -1.333917e-01
1082 67943.86 -1.277063e-01
1083 67945.57 -1.213194e-01
1084 67947.27 -1.142751e-01
1085 67948.97 -1.066211e-01
1086 67950.68 -9.840906e-02
1087 67952.38 -8.969363e-02
1088 67954.09 -8.053255e-02
1089 67955.79 -7.098605e-02
1090 67957.49 -6.111650e-02
1091 67959.20 -5.098800e-02
1092 67960.90 -4.066595e-02
1093 67962.61 -3.021665e-02
1094 67964.31 -1.970684e-02
1095 67966.01 -9.203272e-03
1096 67967.72  1.227706e-03
1097 67969.42  1.152060e-02
1098 67971.13  2.161118e-02
1099 67972.83  3.143689e-02
1100 67974.53  4.093725e-02
1101 67976.24  5.005427e-02
1102 67977.94  5.873275e-02
1103 67979.65  6.692071e-02
1104 67981.35  7.456964e-02
1105 67983.06  8.163485e-02
1106 67984.76  8.807573e-02
1107 67986.46  9.385599e-02
1108 67988.17  9.894387e-02
1109 67989.87  1.033124e-01
1110 67991.58  1.069393e-01
1111 67993.28  1.098075e-01
1112 67994.98  1.119050e-01
1113 67996.69  1.132248e-01
1114 67998.39  1.137650e-01
1115 68000.10  1.135290e-01
1116 68001.80  1.125253e-01
1117 68003.50  1.107671e-01
1118 68005.21  1.082726e-01
1119 68006.91  1.050649e-01
1120 68008.62  1.011713e-01
1121 68010.32  9.662349e-02
1122 68012.02  9.145734e-02
1123 68013.73  8.571235e-02
1124 68015.43  7.943153e-02
1125 68017.14  7.266107e-02
1126 68018.84  6.544996e-02
1127 68020.54  5.784965e-02
1128 68022.25  4.991368e-02
1129 68023.95  4.169730e-02
1130 68025.66  3.325705e-02
1131 68027.36  2.465040e-02
1132 68029.07  1.593531e-02
1133 68030.77  7.169849e-03
1134 68032.47 -1.588230e-03
1135 68034.18 -1.028187e-02
1136 68035.88 -1.885509e-02
1137 68037.59 -2.725340e-02
1138 68039.29 -3.542414e-02
1139 68040.99 -4.331683e-02
1140 68042.70 -5.088349e-02
1141 68044.40 -5.807899e-02
1142 68046.11 -6.486129e-02
1143 68047.81 -7.119172e-02
1144 68049.51 -7.703524e-02
1145 68051.22 -8.236060e-02
1146 68052.92 -8.714053e-02
1147 68054.63 -9.135191e-02
1148 68056.33 -9.497586e-02
1149 68058.03 -9.799784e-02
1150 68059.74 -1.004077e-01
1151 68061.44 -1.021995e-01
1152 68063.15 -1.033720e-01
1153 68064.85 -1.039281e-01
1154 68066.56 -1.038749e-01
1155 68068.26 -1.032236e-01
1156 68069.96 -1.019896e-01
1157 68071.67 -1.001919e-01
1158 68073.37 -9.785317e-02
1159 68075.08 -9.499956e-02
1160 68076.78 -9.166028e-02
1161 68078.48 -8.786745e-02
1162 68080.19 -8.365577e-02
1163 68081.89 -7.906224e-02
1164 68083.60 -7.412583e-02
1165 68085.30 -6.888719e-02
1166 68087.00 -6.338824e-02
1167 68088.71 -5.767191e-02
1168 68090.41 -5.178173e-02
1169 68092.12 -4.576154e-02
1170 68093.82 -3.965512e-02
1171 68095.52 -3.350585e-02
1172 68097.23 -2.735639e-02
1173 68098.93 -2.124840e-02
1174 68100.64 -1.522216e-02
1175 68102.34 -9.316366e-03
1176 68104.05 -3.567791e-03
1177 68105.75  1.988915e-03
1178 68107.45  7.321478e-03
1179 68109.16  1.240019e-02
1180 68110.86  1.719811e-02
1181 68112.57  2.169118e-02
1182 68114.27  2.585838e-02
1183 68115.97  2.968183e-02
1184 68117.68  3.314683e-02
1185 68119.38  3.624194e-02
1186 68121.09  3.895893e-02
1187 68122.79  4.129283e-02
1188 68124.49  4.324187e-02
1189 68126.20  4.480736e-02
1190 68127.90  4.599366e-02
1191 68129.61  4.680799e-02
1192 68131.31  4.726035e-02
1193 68133.01  4.736330e-02
1194 68134.72  4.713178e-02
1195 68136.42  4.658293e-02
1196 68138.13  4.573585e-02
1197 68139.83  4.461132e-02
1198 68141.53  4.323165e-02
1199 68143.24  4.162031e-02
1200 68144.94  3.980174e-02
1201 68146.65  3.780108e-02
1202 68148.35  3.564384e-02
1203 68150.06  3.335570e-02
1204 68151.76  3.096222e-02
1205 68153.46  2.848858e-02
1206 68155.17  2.595931e-02
1207 68156.87  2.339812e-02
1208 68158.58  2.082759e-02
1209 68160.28  1.826903e-02
1210 68161.98  1.574225e-02
1211 68163.69  1.326541e-02
1212 68165.39  1.085488e-02
1213 68167.10  8.525066e-03
1214 68168.80  6.288356e-03
1215 68170.50  4.155014e-03
1216 68172.21  2.133133e-03
1217 68173.91  2.286063e-04
1218 68175.62 -1.554880e-03
1219 68177.32 -3.215819e-03
1220 68179.02 -4.754843e-03
1221 68180.73 -6.174645e-03
1222 68182.43 -7.479885e-03
1223 68184.14 -8.677073e-03
1224 68185.84 -9.774429e-03
1225 68187.55 -1.078172e-02
1226 68189.25 -1.171009e-02
1227 68190.95 -1.257186e-02
1228 68192.66 -1.338031e-02
1229 68194.36 -1.414949e-02
1230 68196.07 -1.489396e-02
1231 68197.77 -1.562856e-02
1232 68199.47 -1.636819e-02
1233 68201.18 -1.712753e-02
1234 68202.88 -1.792084e-02
1235 68204.59 -1.876170e-02
1236 68206.29 -1.966279e-02
1237 68207.99 -2.063563e-02
1238 68209.70 -2.169044e-02
1239 68211.40 -2.283586e-02
1240 68213.11 -2.407886e-02
1241 68214.81 -2.542448e-02
1242 68216.51 -2.687577e-02
1243 68218.22 -2.843362e-02
1244 68219.92 -3.009670e-02
1245 68221.63 -3.186136e-02
1246 68223.33 -3.372159e-02
1247 68225.04 -3.566903e-02
1248 68226.74 -3.769297e-02
1249 68228.44 -3.978036e-02
1250 68230.15 -4.191592e-02
1251 68231.85 -4.408221e-02
1252 68233.56 -4.625980e-02
1253 68235.26 -4.842733e-02
1254 68236.96 -5.056181e-02
1255 68238.67 -5.263872e-02
1256 68240.37 -5.463228e-02
1257 68242.08 -5.651571e-02
1258 68243.78 -5.826146e-02
1259 68245.48 -5.984152e-02
1260 68247.19 -6.122770e-02
1261 68248.89 -6.239198e-02
1262 68250.60 -6.330675e-02
1263 68252.30 -6.394520e-02
1264 68254.00 -6.428163e-02
1265 68255.71 -6.429174e-02
1266 68257.41 -6.395300e-02
1267 68259.12 -6.324492e-02
1268 68260.82 -6.214940e-02
1269 68262.52 -6.065095e-02
1270 68264.23 -5.873703e-02
1271 68265.93 -5.639825e-02
1272 68267.64 -5.362864e-02
1273 68269.34 -5.042581e-02
1274 68271.05 -4.679116e-02
1275 68272.75 -4.273000e-02
1276 68274.45 -3.825164e-02
1277 68276.16 -3.336954e-02
1278 68277.86 -2.810125e-02
1279 68279.57 -2.246850e-02
1280 68281.27 -1.649707e-02
1281 68282.97 -1.021680e-02
1282 68284.68 -3.661430e-03
1283 68286.38  3.131567e-03
1284 68288.09  1.012116e-02
1285 68289.79  1.726299e-02
1286 68291.49  2.450967e-02
1287 68293.20  3.181107e-02
1288 68294.90  3.911464e-02
1289 68296.61  4.636583e-02
1290 68298.31  5.350844e-02
1291 68300.01  6.048508e-02
1292 68301.72  6.723759e-02
1293 68303.42  7.370756e-02
1294 68305.13  7.983675e-02
1295 68306.83  8.556761e-02
1296 68308.54  9.084380e-02
1297 68310.24  9.561070e-02
1298 68311.94  9.981586e-02
1299 68313.65  1.034096e-01
1300 68315.35  1.063453e-01
1301 68317.06  1.085802e-01
1302 68318.76  1.100756e-01
1303 68320.46  1.107974e-01
1304 68322.17  1.107163e-01
1305 68323.87  1.098085e-01
1306 68325.58  1.080560e-01
1307 68327.28  1.054466e-01
1308 68328.98  1.019745e-01
1309 68330.69  9.764014e-02
1310 68332.39  9.245085e-02
1311 68334.10  8.642061e-02
1312 68335.80  7.957018e-02
1313 68337.50  7.192720e-02
1314 68339.21  6.352603e-02
1315 68340.91  5.440774e-02
1316 68342.62  4.461989e-02
1317 68344.32  3.421634e-02
1318 68346.03  2.325697e-02
1319 68347.73  1.180736e-02
1320 68349.43 -6.159338e-05
1321 68351.14 -1.227412e-02
1322 68352.84 -2.475003e-02
1323 68354.55 -3.740525e-02
1324 68356.25 -5.015241e-02
1325 68357.95 -6.290142e-02
1326 68359.66 -7.556012e-02
1327 68361.36 -8.803493e-02
1328 68363.07 -1.002316e-01
1329 68364.77 -1.120558e-01
1330 68366.47 -1.234141e-01
1331 68368.18 -1.342144e-01
1332 68369.88 -1.443667e-01
1333 68371.59 -1.537843e-01
1334 68373.29 -1.623838e-01
1335 68374.99 -1.700863e-01
1336 68376.70 -1.768180e-01
1337 68378.40 -1.825109e-01
1338 68380.11 -1.871032e-01
1339 68381.81 -1.905401e-01
1340 68383.51 -1.927745e-01
1341 68385.22 -1.937670e-01
1342 68386.92 -1.934869e-01
1343 68388.63 -1.919122e-01
1344 68390.33 -1.890300e-01
1345 68392.04 -1.848371e-01
1346 68393.74 -1.793397e-01
1347 68395.44 -1.725538e-01
1348 68397.15 -1.645053e-01
1349 68398.85 -1.552296e-01
1350 68400.56 -1.447721e-01
1351 68402.26 -1.331875e-01
1352 68403.96 -1.205398e-01
1353 68405.67 -1.069018e-01
1354 68407.37 -9.235491e-02
1355 68409.08 -7.698862e-02
1356 68410.78 -6.089982e-02
1357 68412.48 -4.419228e-02
1358 68414.19 -2.697602e-02
1359 68415.89 -9.366527e-03
1360 68417.60  8.516020e-03
1361 68419.30  2.654756e-02
1362 68421.00  4.460104e-02
1363 68422.71  6.254730e-02
1364 68424.41  8.025603e-02
1365 68426.12  9.759670e-02
1366 68427.82  1.144396e-01
1367 68429.53  1.306567e-01
1368 68431.23  1.461227e-01
1369 68432.93  1.607160e-01
1370 68434.64  1.743199e-01
1371 68436.34  1.868228e-01
1372 68438.05  1.981201e-01
1373 68439.75  2.081143e-01
1374 68441.45  2.167162e-01
1375 68443.16  2.238455e-01
1376 68444.86  2.294316e-01
1377 68446.57  2.334142e-01
1378 68448.27  2.357440e-01
1379 68449.97  2.363832e-01
1380 68451.68  2.353055e-01
1381 68453.38  2.324973e-01
1382 68455.09  2.279569e-01
1383 68456.79  2.216957e-01
1384 68458.49  2.137374e-01
1385 68460.20  2.041186e-01
1386 68461.90  1.928884e-01
1387 68463.61  1.801080e-01
1388 68465.31  1.658509e-01
1389 68467.02  1.502021e-01
1390 68468.72  1.332576e-01
1391 68470.42  1.151241e-01
1392 68472.13  9.591808e-02
1393 68473.83  7.576511e-02
1394 68475.54  5.479906e-02
1395 68477.24  3.316117e-02
1396 68478.94  1.099911e-02
1397 68480.65 -1.153406e-02
1398 68482.35 -3.428097e-02
1399 68484.06 -5.708103e-02
1400 68485.76 -7.977160e-02
1401 68487.46 -1.021891e-01
1402 68489.17 -1.241705e-01
1403 68490.87 -1.455539e-01
1404 68492.58 -1.661805e-01
1405 68494.28 -1.858953e-01
1406 68495.98 -2.045483e-01
1407 68497.69 -2.219959e-01
1408 68499.39 -2.381018e-01
1409 68501.10 -2.527382e-01
1410 68502.80 -2.657868e-01
1411 68504.50 -2.771397e-01
1412 68506.21 -2.867003e-01
1413 68507.91 -2.943840e-01
1414 68509.62 -3.001194e-01
1415 68511.32 -3.038483e-01
1416 68513.03 -3.055266e-01
1417 68514.73 -3.051248e-01
1418 68516.43 -3.026282e-01
1419 68518.14 -2.980371e-01
1420 68519.84 -2.913671e-01
1421 68521.55 -2.826488e-01
1422 68523.25 -2.719281e-01
1423 68524.95 -2.592658e-01
1424 68526.66 -2.447372e-01
1425 68528.36 -2.284315e-01
1426 68530.07 -2.104520e-01
1427 68531.77 -1.909144e-01
1428 68533.47 -1.699469e-01
1429 68535.18 -1.476890e-01
1430 68536.88 -1.242904e-01
1431 68538.59 -9.991045e-02
1432 68540.29 -7.471654e-02
1433 68541.99 -4.888329e-02
1434 68543.70 -2.259118e-02
1435 68545.40  3.974722e-03
1436 68547.11  3.062608e-02
1437 68548.81  5.717264e-02
1438 68550.52  8.342361e-02
1439 68552.22  1.091891e-01
1440 68553.92  1.342813e-01
1441 68555.63  1.585163e-01
1442 68557.33  1.817151e-01
1443 68559.04  2.037050e-01
1444 68560.74  2.243210e-01
1445 68562.44  2.434070e-01
1446 68564.15  2.608172e-01
1447 68565.85  2.764168e-01
1448 68567.56  2.900835e-01
1449 68569.26  3.017081e-01
1450 68570.96  3.111957e-01
1451 68572.67  3.184662e-01
1452 68574.37  3.234553e-01
1453 68576.08  3.261146e-01
1454 68577.78  3.264125e-01
1455 68579.48  3.243342e-01
1456 68581.19  3.198822e-01
1457 68582.89  3.130761e-01
1458 68584.60  3.039525e-01
1459 68586.30  2.925652e-01
1460 68588.01  2.789846e-01
1461 68589.71  2.632974e-01
1462 68591.41  2.456058e-01
1463 68593.12  2.260271e-01
1464 68594.82  2.046930e-01
1465 68596.53  1.817483e-01
1466 68598.23  1.573503e-01
1467 68599.93  1.316673e-01
1468 68601.64  1.048781e-01
1469 68603.34  7.716992e-02
1470 68605.05  4.873762e-02
1471 68606.75  1.978214e-02
1472 68608.45 -9.490955e-03
1473 68610.16 -3.887293e-02
1474 68611.86 -6.815341e-02
1475 68613.57 -9.712189e-02
1476 68615.27 -1.255693e-01
1477 68616.97 -1.532895e-01
1478 68618.68 -1.800809e-01
1479 68620.38 -2.057478e-01
1480 68622.09 -2.301020e-01
1481 68623.79 -2.529639e-01
1482 68625.49 -2.741644e-01
1483 68627.20 -2.935456e-01
1484 68628.90 -3.109623e-01
1485 68630.61 -3.262831e-01
1486 68632.31 -3.393913e-01
1487 68634.02 -3.501858e-01
1488 68635.72 -3.585821e-01
1489 68637.42 -3.645127e-01
1490 68639.13 -3.679277e-01
1491 68640.83 -3.687955e-01
1492 68642.54 -3.671027e-01
1493 68644.24 -3.628543e-01
1494 68645.94 -3.560743e-01
1495 68647.65 -3.468046e-01
1496 68649.35 -3.351055e-01
1497 68651.06 -3.210552e-01
1498 68652.76 -3.047489e-01
1499 68654.46 -2.862986e-01
1500 68656.17 -2.658320e-01
1501 68657.87 -2.434918e-01
1502 68659.58 -2.194346e-01
1503 68661.28 -1.938298e-01
1504 68662.98 -1.668583e-01
1505 68664.69 -1.387117e-01
1506 68666.39 -1.095900e-01
1507 68668.10 -7.970112e-02
1508 68669.80 -4.925869e-02
1509 68671.51 -1.848088e-02
1510 68673.21  1.241129e-02
1511 68674.91  4.319558e-02
1512 68676.62  7.365017e-02
1513 68678.32  1.035552e-01
1514 68680.03  1.326945e-01
1515 68681.73  1.608570e-01
1516 68683.43  1.878386e-01
1517 68685.14  2.134432e-01
1518 68686.84  2.374846e-01
1519 68688.55  2.597878e-01
1520 68690.25  2.801899e-01
1521 68691.95  2.985419e-01
1522 68693.66  3.147092e-01
1523 68695.36  3.285733e-01
1524 68697.07  3.400319e-01
1525 68698.77  3.490004e-01
1526 68700.47  3.554121e-01
1527 68702.18  3.592188e-01
1528 68703.88  3.603911e-01
1529 68705.59  3.589190e-01
1530 68707.29  3.548115e-01
1531 68709.00  3.480967e-01
1532 68710.70  3.388221e-01
1533 68712.40  3.270532e-01
1534 68714.11  3.128744e-01
1535 68715.81  2.963871e-01
1536 68717.52  2.777098e-01
1537 68719.22  2.569770e-01
1538 68720.92  2.343382e-01
1539 68722.63  2.099567e-01
1540 68724.33  1.840087e-01
1541 68726.04  1.566817e-01
1542 68727.74  1.281734e-01
1543 68729.44  9.868995e-02
1544 68731.15  6.844485e-02
1545 68732.85  3.765699e-02
1546 68734.56  6.549242e-03
1547 68736.26 -2.465319e-02
1548 68737.96 -5.572446e-02
1549 68739.67 -8.643972e-02
1550 68741.37 -1.165767e-01
1551 68743.08 -1.459176e-01
1552 68744.78 -1.742503e-01
1553 68746.48 -2.013701e-01
1554 68748.19 -2.270813e-01
1555 68749.89 -2.511988e-01
1556 68751.60 -2.735487e-01
1557 68753.30 -2.939706e-01
1558 68755.01 -3.123180e-01
1559 68756.71 -3.284598e-01
1560 68758.41 -3.422808e-01
1561 68760.12 -3.536832e-01
1562 68761.82 -3.625866e-01
1563 68763.53 -3.689293e-01
1564 68765.23 -3.726680e-01
1565 68766.93 -3.737787e-01
1566 68768.64 -3.722566e-01
1567 68770.34 -3.681159e-01
1568 68772.05 -3.613903e-01
1569 68773.75 -3.521321e-01
1570 68775.45 -3.404122e-01
1571 68777.16 -3.263192e-01
1572 68778.86 -3.099593e-01
1573 68780.57 -2.914549e-01
1574 68782.27 -2.709439e-01
1575 68783.97 -2.485788e-01
1576 68785.68 -2.245255e-01
1577 68787.38 -1.989619e-01
1578 68789.09 -1.720766e-01
1579 68790.79 -1.440679e-01
1580 68792.50 -1.151418e-01
1581 68794.20 -8.551058e-02
1582 68795.90 -5.539154e-02
1583 68797.61 -2.500506e-02
1584 68799.31  5.426880e-03
1585 68801.02  3.568238e-02
1586 68802.72  6.554125e-02
1587 68804.42  9.478662e-02
1588 68806.13  1.232066e-01
1589 68807.83  1.505956e-01
1590 68809.54  1.767564e-01
1591 68811.24  2.015007e-01
1592 68812.94  2.246514e-01
1593 68814.65  2.460433e-01
1594 68816.35  2.655245e-01
1595 68818.06  2.829576e-01
1596 68819.76  2.982205e-01
1597 68821.46  3.112071e-01
1598 68823.17  3.218288e-01
1599 68824.87  3.300141e-01
1600 68826.58  3.357098e-01
1601 68828.28  3.388813e-01
1602 68829.98  3.395123e-01
1603 68831.69  3.376056e-01
1604 68833.39  3.331825e-01
1605 68835.10  3.262829e-01
1606 68836.80  3.169645e-01
1607 68838.51  3.053030e-01
1608 68840.21  2.913911e-01
1609 68841.91  2.753378e-01
1610 68843.62  2.572674e-01
1611 68845.32  2.373189e-01
1612 68847.03  2.156449e-01
1613 68848.73  1.924098e-01
1614 68850.43  1.677895e-01
1615 68852.14  1.419694e-01
1616 68853.84  1.151430e-01
1617 68855.55  8.751104e-02
1618 68857.25  5.927922e-02
1619 68858.95  3.065717e-02
1620 68860.66  1.856704e-03
1621 68862.36 -2.690975e-02
1622 68864.07 -5.543072e-02
1623 68865.77 -8.349723e-02
1624 68867.47 -1.109044e-01
1625 68869.18 -1.374529e-01
1626 68870.88 -1.629506e-01
1627 68872.59 -1.872134e-01
1628 68874.29 -2.100676e-01
1629 68876.00 -2.313500e-01
1630 68877.70 -2.509099e-01
1631 68879.40 -2.686100e-01
1632 68881.11 -2.843271e-01
1633 68882.81 -2.979532e-01
1634 68884.52 -3.093963e-01
1635 68886.22 -3.185808e-01
1636 68887.92 -3.254483e-01
1637 68889.63 -3.299578e-01
1638 68891.33 -3.320859e-01
1639 68893.04 -3.318269e-01
1640 68894.74 -3.291931e-01
1641 68896.44 -3.242143e-01
1642 68898.15 -3.169374e-01
1643 68899.85 -3.074265e-01
1644 68901.56 -2.957619e-01
1645 68903.26 -2.820397e-01
1646 68904.96 -2.663707e-01
1647 68906.67 -2.488799e-01
1648 68908.37 -2.297054e-01
1649 68910.08 -2.089970e-01
1650 68911.78 -1.869156e-01
1651 68913.49 -1.636314e-01
1652 68915.19 -1.393228e-01
1653 68916.89 -1.141754e-01
1654 68918.60 -8.837974e-02
1655 68920.30 -6.213076e-02
1656 68922.01 -3.562572e-02
1657 68923.71 -9.062926e-03
1658 68925.41  1.735979e-02
1659 68927.12  4.344653e-02
1660 68928.82  6.900482e-02
1661 68930.53  9.384705e-02
1662 68932.23  1.177918e-01
1663 68933.93  1.406653e-01
1664 68935.64  1.623025e-01
1665 68937.34  1.825485e-01
1666 68939.05  2.012595e-01
1667 68940.75  2.183039e-01
1668 68942.45  2.335633e-01
1669 68944.16  2.469331e-01
1670 68945.86  2.583235e-01
1671 68947.57  2.676601e-01
1672 68949.27  2.748840e-01
1673 68950.97  2.799526e-01
1674 68952.68  2.828398e-01
1675 68954.38  2.835358e-01
1676 68956.09  2.820475e-01
1677 68957.79  2.783980e-01
1678 68959.50  2.726267e-01
1679 68961.20  2.647887e-01
1680 68962.90  2.549543e-01
1681 68964.61  2.432084e-01
1682 68966.31  2.296499e-01
1683 68968.02  2.143911e-01
1684 68969.72  1.975559e-01
1685 68971.42  1.792801e-01
1686 68973.13  1.597090e-01
1687 68974.83  1.389974e-01
1688 68976.54  1.173075e-01
1689 68978.24  9.480813e-02
1690 68979.94  7.167331e-02
1691 68981.65  4.808087e-02
1692 68983.35  2.421111e-02
1693 68985.06  2.454273e-04
1694 68986.76 -2.363509e-02
1695 68988.46 -4.725100e-02
1696 68990.17 -7.042591e-02
1697 68991.87 -9.298772e-02
1698 68993.58 -1.147700e-01
1699 68995.28 -1.356131e-01
1700 68996.99 -1.553656e-01
1701 68998.69 -1.738850e-01
1702 69000.39 -1.910390e-01
1703 69002.10 -2.067066e-01
1704 69003.80 -2.207786e-01
1705 69005.51 -2.331586e-01
1706 69007.21 -2.437637e-01
1707 69008.91 -2.525249e-01
1708 69010.62 -2.593876e-01
1709 69012.32 -2.643119e-01
1710 69014.03 -2.672730e-01
1711 69015.73 -2.682612e-01
1712 69017.43 -2.672816e-01
1713 69019.14 -2.643547e-01
1714 69020.84 -2.595151e-01
1715 69022.55 -2.528123e-01
1716 69024.25 -2.443094e-01
1717 69025.95 -2.340828e-01
1718 69027.66 -2.222218e-01
1719 69029.36 -2.088273e-01
1720 69031.07 -1.940115e-01
1721 69032.77 -1.778966e-01
1722 69034.48 -1.606140e-01
1723 69036.18 -1.423032e-01
1724 69037.88 -1.231107e-01
1725 69039.59 -1.031886e-01
1726 69041.29 -8.269394e-02
1727 69043.00 -6.178679e-02
1728 69044.70 -4.062952e-02
1729 69046.40 -1.938535e-02
1730 69048.11  1.782920e-03
1731 69049.81  2.271414e-02
1732 69051.52  4.325000e-02
1733 69053.22  6.323630e-02
1734 69054.92  8.252404e-02
1735 69056.63  1.009706e-01
1736 69058.33  1.184406e-01
1737 69060.04  1.348074e-01
1738 69061.74  1.499533e-01
1739 69063.44  1.637710e-01
1740 69065.15  1.761640e-01
1741 69066.85  1.870475e-01
1742 69068.56  1.963488e-01
1743 69070.26  2.040079e-01
1744 69071.96  2.099779e-01
1745 69073.67  2.142250e-01
1746 69075.37  2.167292e-01
Warning message:
In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values

----- BANDPASS FILTERING STRATIGRAPHIC SERIES-----

----- APPLYING PIECEWISE-LINEAR INTERPOLATION TO STRATIGRAPHIC SERIES -----

 ,* Number of samples= 3226
 ,* Determining median sampling interval for series
 ,* Will interpolate to median sampling interval of 1.704084
 ,* New number of samples= 1592
 ,* Number of data points= 1592
 ,* Sample interval= 1.704084
 ,* Mean value removed= 0.01463981
 ,* Center of bandpass filter = 0.0094
 ,* 15 pos/neg frequency pairs will be bandpassed
          age        scl_ma
1    66060.00 -1.145622e-01
2    66061.71 -1.102254e-01
3    66063.41 -1.049499e-01
4    66065.12 -9.878163e-02
5    66066.82 -9.177336e-02
6    66068.52 -8.398382e-02
7    66070.23 -7.547733e-02
8    66071.93 -6.632326e-02
9    66073.64 -5.659535e-02
10   66075.34 -4.637115e-02
11   66077.04 -3.573132e-02
12   66078.75 -2.475899e-02
13   66080.45 -1.353906e-02
14   66082.16 -2.157560e-03
15   66083.86  9.299074e-03
16   66085.56  2.074465e-02
17   66087.27  3.209387e-02
18   66088.97  4.326299e-02
19   66090.68  5.417043e-02
20   66092.38  6.473735e-02
21   66094.08  7.488824e-02
22   66095.79  8.455141e-02
23   66097.49  9.365950e-02
24   66099.20  1.021499e-01
25   66100.90  1.099651e-01
26   66102.61  1.170533e-01
27   66104.31  1.233681e-01
28   66106.01  1.288697e-01
29   66107.72  1.335241e-01
30   66109.42  1.373040e-01
31   66111.13  1.401884e-01
32   66112.83  1.421630e-01
33   66114.53  1.432200e-01
34   66116.24  1.433581e-01
35   66117.94  1.425826e-01
36   66119.65  1.409048e-01
37   66121.35  1.383424e-01
38   66123.05  1.349187e-01
39   66124.76  1.306629e-01
40   66126.46  1.256094e-01
41   66128.17  1.197978e-01
42   66129.87  1.132721e-01
43   66131.57  1.060810e-01
44   66133.28  9.827689e-02
45   66134.98  8.991582e-02
46   66136.69  8.105696e-02
47   66138.39  7.176218e-02
48   66140.09  6.209564e-02
49   66141.80  5.212331e-02
50   66143.50  4.191263e-02
51   66145.21  3.153195e-02
52   66146.91  2.105022e-02
53   66148.62  1.053648e-02
54   66150.32  5.949534e-05
55   66152.02 -1.031266e-02
56   66153.73 -2.051299e-02
57   66155.43 -3.047595e-02
58   66157.14 -4.013781e-02
59   66158.84 -4.943699e-02
60   66160.54 -5.831439e-02
61   66162.25 -6.671367e-02
62   66163.95 -7.458159e-02
63   66165.66 -8.186821e-02
64   66167.36 -8.852717e-02
65   66169.06 -9.451593e-02
66   66170.77 -9.979595e-02
67   66172.47 -1.043329e-01
68   66174.18 -1.080967e-01
69   66175.88 -1.110619e-01
70   66177.58 -1.132076e-01
71   66179.29 -1.145177e-01
72   66180.99 -1.149809e-01
73   66182.70 -1.145906e-01
74   66184.40 -1.133454e-01
75   66186.11 -1.112486e-01
76   66187.81 -1.083086e-01
77   66189.51 -1.045388e-01
78   66191.22 -9.995728e-02
79   66192.92 -9.458720e-02
80   66194.63 -8.845637e-02
81   66196.33 -8.159734e-02
82   66198.03 -7.404722e-02
83   66199.74 -6.584755e-02
84   66201.44 -5.704417e-02
85   66203.15 -4.768701e-02
86   66204.85 -3.782990e-02
87   66206.55 -2.753034e-02
88   66208.26 -1.684926e-02
89   66209.96 -5.850776e-03
90   66211.67  5.398166e-03
91   66213.37  1.682805e-02
92   66215.07  2.836715e-02
93   66216.78  3.994190e-02
94   66218.48  5.147725e-02
95   66220.19  6.289708e-02
96   66221.89  7.412466e-02
97   66223.60  8.508303e-02
98   66225.30  9.569550e-02
99   66227.00  1.058861e-01
100  66228.71  1.155802e-01
101  66230.41  1.247046e-01
102  66232.12  1.331888e-01
103  66233.82  1.409645e-01
104  66235.52  1.479670e-01
105  66237.23  1.541353e-01
106  66238.93  1.594127e-01
107  66240.64  1.637471e-01
108  66242.34  1.670920e-01
109  66244.04  1.694061e-01
110  66245.75  1.706549e-01
111  66247.45  1.708099e-01
112  66249.16  1.698499e-01
113  66250.86  1.677609e-01
114  66252.56  1.645367e-01
115  66254.27  1.601789e-01
116  66255.97  1.546971e-01
117  66257.68  1.481093e-01
118  66259.38  1.404419e-01
119  66261.08  1.317299e-01
120  66262.79  1.220163e-01
121  66264.49  1.113530e-01
122  66266.20  9.979972e-02
123  66267.90  8.742437e-02
124  66269.61  7.430251e-02
125  66271.31  6.051710e-02
126  66273.01  4.615802e-02
127  66274.72  3.132161e-02
128  66276.42  1.611009e-02
129  66278.13  6.309234e-04
130  66279.83 -1.500384e-02
131  66281.53 -3.067834e-02
132  66283.24 -4.627373e-02
133  66284.94 -6.166898e-02
134  66286.65 -7.674183e-02
135  66288.35 -9.136970e-02
136  66290.05 -1.054307e-01
137  66291.76 -1.188045e-01
138  66293.46 -1.313737e-01
139  66295.17 -1.430241e-01
140  66296.87 -1.536468e-01
141  66298.57 -1.631382e-01
142  66300.28 -1.714015e-01
143  66301.98 -1.783477e-01
144  66303.69 -1.838963e-01
145  66305.39 -1.879763e-01
146  66307.10 -1.905269e-01
147  66308.80 -1.914986e-01
148  66310.50 -1.908535e-01
149  66312.21 -1.885659e-01
150  66313.91 -1.846232e-01
151  66315.62 -1.790259e-01
152  66317.32 -1.717883e-01
153  66319.02 -1.629381e-01
154  66320.73 -1.525174e-01
155  66322.43 -1.405815e-01
156  66324.14 -1.272000e-01
157  66325.84 -1.124555e-01
158  66327.54 -9.644380e-02
159  66329.25 -7.927309e-02
160  66330.95 -6.106349e-02
161  66332.66 -4.194615e-02
162  66334.36 -2.206244e-02
163  66336.06 -1.562951e-03
164  66337.77  1.939362e-02
165  66339.47  4.064164e-02
166  66341.18  6.200981e-02
167  66342.88  8.332257e-02
168  66344.59  1.044014e-01
169  66346.29  1.250666e-01
170  66347.99  1.451384e-01
171  66349.70  1.644388e-01
172  66351.40  1.827930e-01
173  66353.11  2.000314e-01
174  66354.81  2.159903e-01
175  66356.51  2.305145e-01
176  66358.22  2.434580e-01
177  66359.92  2.546857e-01
178  66361.63  2.640752e-01
179  66363.33  2.715174e-01
180  66365.03  2.769181e-01
181  66366.74  2.801993e-01
182  66368.44  2.812996e-01
183  66370.15  2.801757e-01
184  66371.85  2.768026e-01
185  66373.55  2.711744e-01
186  66375.26  2.633047e-01
187  66376.96  2.532266e-01
188  66378.67  2.409931e-01
189  66380.37  2.266766e-01
190  66382.07  2.103688e-01
191  66383.78  1.921804e-01
192  66385.48  1.722401e-01
193  66387.19  1.506938e-01
194  66388.89  1.277038e-01
195  66390.60  1.034476e-01
196  66392.30  7.811622e-02
197  66394.00  5.191326e-02
198  66395.71  2.505288e-02
199  66397.41 -2.241757e-03
200  66399.12 -2.974039e-02
201  66400.82 -5.720759e-02
202  66402.52 -8.440476e-02
203  66404.23 -1.110923e-01
204  66405.93 -1.370315e-01
205  66407.64 -1.619870e-01
206  66409.34 -1.857289e-01
207  66411.04 -2.080345e-01
208  66412.75 -2.286909e-01
209  66414.45 -2.474968e-01
210  66416.16 -2.642646e-01
211  66417.86 -2.788221e-01
212  66419.56 -2.910143e-01
213  66421.27 -3.007052e-01
214  66422.97 -3.077793e-01
215  66424.68 -3.121426e-01
216  66426.38 -3.137239e-01
217  66428.09 -3.124760e-01
218  66429.79 -3.083762e-01
219  66431.49 -3.014267e-01
220  66433.20 -2.916551e-01
221  66434.90 -2.791148e-01
222  66436.61 -2.638840e-01
223  66438.31 -2.460662e-01
224  66440.01 -2.257890e-01
225  66441.72 -2.032036e-01
226  66443.42 -1.784834e-01
227  66445.13 -1.518232e-01
228  66446.83 -1.234371e-01
229  66448.53 -9.355713e-02
230  66450.24 -6.243145e-02
231  66451.94 -3.032206e-02
232  66453.65  2.497283e-03
233  66455.35  3.574343e-02
234  66457.05  6.912630e-02
235  66458.76  1.023515e-01
236  66460.46  1.351227e-01
237  66462.17  1.671448e-01
238  66463.87  1.981260e-01
239  66465.58  2.277810e-01
240  66467.28  2.558334e-01
241  66468.98  2.820183e-01
242  66470.69  3.060851e-01
243  66472.39  3.277996e-01
244  66474.10  3.469463e-01
245  66475.80  3.633311e-01
246  66477.50  3.767826e-01
247  66479.21  3.871541e-01
248  66480.91  3.943255e-01
249  66482.62  3.982043e-01
250  66484.32  3.987269e-01
251  66486.02  3.958594e-01
252  66487.73  3.895980e-01
253  66489.43  3.799699e-01
254  66491.14  3.670326e-01
255  66492.84  3.508742e-01
256  66494.54  3.316127e-01
257  66496.25  3.093951e-01
258  66497.95  2.843965e-01
259  66499.66  2.568186e-01
260  66501.36  2.268882e-01
261  66503.06  1.948551e-01
262  66504.77  1.609906e-01
263  66506.47  1.255843e-01
264  66508.18  8.894249e-02
265  66509.88  5.138486e-02
266  66511.59  1.324200e-02
267  66513.29 -2.514767e-02
268  66514.99 -6.344090e-02
269  66516.70 -1.012927e-01
270  66518.40 -1.383597e-01
271  66520.11 -1.743028e-01
272  66521.81 -2.087909e-01
273  66523.51 -2.415039e-01
274  66525.22 -2.721352e-01
275  66526.92 -3.003954e-01
276  66528.63 -3.260143e-01
277  66530.33 -3.487443e-01
278  66532.03 -3.683623e-01
279  66533.74 -3.846718e-01
280  66535.44 -3.975057e-01
281  66537.15 -4.067272e-01
282  66538.85 -4.122314e-01
283  66540.55 -4.139472e-01
284  66542.26 -4.118370e-01
285  66543.96 -4.058983e-01
286  66545.67 -3.961634e-01
287  66547.37 -3.826996e-01
288  66549.08 -3.656084e-01
289  66550.78 -3.450251e-01
290  66552.48 -3.211179e-01
291  66554.19 -2.940860e-01
292  66555.89 -2.641585e-01
293  66557.60 -2.315921e-01
294  66559.30 -1.966689e-01
295  66561.00 -1.596942e-01
296  66562.71 -1.209936e-01
297  66564.41 -8.091009e-02
298  66566.12 -3.980093e-02
299  66567.82  1.965402e-03
300  66569.52  4.401269e-02
301  66571.23  8.596041e-02
302  66572.93  1.274272e-01
303  66574.64  1.680345e-01
304  66576.34  2.074099e-01
305  66578.04  2.451906e-01
306  66579.75  2.810272e-01
307  66581.45  3.145865e-01
308  66583.16  3.455549e-01
309  66584.86  3.736414e-01
310  66586.57  3.985804e-01
311  66588.27  4.201342e-01
312  66589.97  4.380953e-01
313  66591.68  4.522886e-01
314  66593.38  4.625730e-01
315  66595.09  4.688427e-01
316  66596.79  4.710289e-01
317  66598.49  4.690997e-01
318  66600.20  4.630613e-01
319  66601.90  4.529577e-01
320  66603.61  4.388703e-01
321  66605.31  4.209176e-01
322  66607.01  3.992541e-01
323  66608.72  3.740687e-01
324  66610.42  3.455835e-01
325  66612.13  3.140513e-01
326  66613.83  2.797539e-01
327  66615.53  2.429990e-01
328  66617.24  2.041179e-01
329  66618.94  1.634621e-01
330  66620.65  1.214001e-01
331  66622.35  7.831450e-02
332  66624.05  3.459761e-02
333  66625.76 -9.351468e-03
334  66627.46 -5.313089e-02
335  66629.17 -9.633971e-02
336  66630.87 -1.385817e-01
337  66632.58 -1.794689e-01
338  66634.28 -2.186254e-01
339  66635.98 -2.556910e-01
340  66637.69 -2.903242e-01
341  66639.39 -3.222058e-01
342  66641.10 -3.510417e-01
343  66642.80 -3.765657e-01
344  66644.50 -3.985422e-01
345  66646.21 -4.167681e-01
346  66647.91 -4.310751e-01
347  66649.62 -4.413310e-01
348  66651.32 -4.474412e-01
349  66653.02 -4.493496e-01
350  66654.73 -4.470387e-01
351  66656.43 -4.405305e-01
352  66658.14 -4.298857e-01
353  66659.84 -4.152036e-01
354  66661.54 -3.966207e-01
355  66663.25 -3.743099e-01
356  66664.95 -3.484785e-01
357  66666.66 -3.193667e-01
358  66668.36 -2.872446e-01
359  66670.07 -2.524105e-01
360  66671.77 -2.151875e-01
361  66673.47 -1.759207e-01
362  66675.18 -1.349740e-01
363  66676.88 -9.272637e-02
364  66678.59 -4.956865e-02
365  66680.29 -5.899607e-03
366  66681.99  3.787773e-02
367  66683.70  8.135985e-02
368  66685.40  1.241466e-01
369  66687.11  1.658449e-01
370  66688.81  2.060724e-01
371  66690.51  2.444613e-01
372  66692.22  2.806615e-01
373  66693.92  3.143439e-01
374  66695.63  3.452036e-01
375  66697.33  3.729627e-01
376  66699.03  3.973728e-01
377  66700.74  4.182174e-01
378  66702.44  4.353137e-01
379  66704.15  4.485144e-01
380  66705.85  4.577089e-01
381  66707.56  4.628244e-01
382  66709.26  4.638263e-01
383  66710.96  4.607186e-01
384  66712.67  4.535436e-01
385  66714.37  4.423816e-01
386  66716.08  4.273497e-01
387  66717.78  4.086011e-01
388  66719.48  3.863229e-01
389  66721.19  3.607348e-01
390  66722.89  3.320866e-01
391  66724.60  3.006557e-01
392  66726.30  2.667446e-01
393  66728.00  2.306778e-01
394  66729.71  1.927986e-01
395  66731.41  1.534659e-01
396  66733.12  1.130507e-01
397  66734.82  7.193245e-02
398  66736.52  3.049556e-02
399  66738.23 -1.087436e-02
400  66739.93 -5.179417e-02
401  66741.64 -9.188676e-02
402  66743.34 -1.307847e-01
403  66745.04 -1.681334e-01
404  66746.75 -2.035950e-01
405  66748.45 -2.368509e-01
406  66750.16 -2.676048e-01
407  66751.86 -2.955859e-01
408  66753.57 -3.205505e-01
409  66755.27 -3.422851e-01
410  66756.97 -3.606074e-01
411  66758.68 -3.753685e-01
412  66760.38 -3.864538e-01
413  66762.09 -3.937841e-01
414  66763.79 -3.973158e-01
415  66765.49 -3.970416e-01
416  66767.20 -3.929898e-01
417  66768.90 -3.852244e-01
418  66770.61 -3.738436e-01
419  66772.31 -3.589794e-01
420  66774.01 -3.407952e-01
421  66775.72 -3.194849e-01
422  66777.42 -2.952705e-01
423  66779.13 -2.683996e-01
424  66780.83 -2.391429e-01
425  66782.53 -2.077919e-01
426  66784.24 -1.746554e-01
427  66785.94 -1.400566e-01
428  66787.65 -1.043302e-01
429  66789.35 -6.781847e-02
430  66791.06 -3.086863e-02
431  66792.76  6.171013e-03
432  66794.46  4.295423e-02
433  66796.17  7.914019e-02
434  66797.87  1.143967e-01
435  66799.58  1.484032e-01
436  66801.28  1.808540e-01
437  66802.98  2.114609e-01
438  66804.69  2.399557e-01
439  66806.39  2.660928e-01
440  66808.10  2.896514e-01
441  66809.80  3.104371e-01
442  66811.50  3.282838e-01
443  66813.21  3.430549e-01
444  66814.91  3.546445e-01
445  66816.62  3.629777e-01
446  66818.32  3.680116e-01
447  66820.02  3.697348e-01
448  66821.73  3.681679e-01
449  66823.43  3.633621e-01
450  66825.14  3.553991e-01
451  66826.84  3.443897e-01
452  66828.55  3.304724e-01
453  66830.25  3.138119e-01
454  66831.95  2.945969e-01
455  66833.66  2.730386e-01
456  66835.36  2.493677e-01
457  66837.07  2.238325e-01
458  66838.77  1.966959e-01
459  66840.47  1.682330e-01
460  66842.18  1.387280e-01
461  66843.88  1.084715e-01
462  66845.59  7.775763e-02
463  66847.29  4.688104e-02
464  66848.99  1.613407e-02
465  66850.70 -1.419609e-02
466  66852.40 -4.383006e-02
467  66854.11 -7.249895e-02
468  66855.81 -9.994684e-02
469  66857.51 -1.259331e-01
470  66859.22 -1.502344e-01
471  66860.92 -1.726470e-01
472  66862.63 -1.929881e-01
473  66864.33 -2.110974e-01
474  66866.03 -2.268386e-01
475  66867.74 -2.401002e-01
476  66869.44 -2.507962e-01
477  66871.15 -2.588666e-01
478  66872.85 -2.642777e-01
479  66874.56 -2.670218e-01
480  66876.26 -2.671174e-01
481  66877.96 -2.646078e-01
482  66879.67 -2.595612e-01
483  66881.37 -2.520688e-01
484  66883.08 -2.422440e-01
485  66884.78 -2.302211e-01
486  66886.48 -2.161531e-01
487  66888.19 -2.002102e-01
488  66889.89 -1.825778e-01
489  66891.60 -1.634544e-01
490  66893.30 -1.430494e-01
491  66895.00 -1.215808e-01
492  66896.71 -9.927291e-02
493  66898.41 -7.635394e-02
494  66900.12 -5.305382e-02
495  66901.82 -2.960175e-02
496  66903.52 -6.223940e-03
497  66905.23  1.685857e-02
498  66906.93  3.943203e-02
499  66908.64  6.129199e-02
500  66910.34  8.224516e-02
501  66912.05  1.021111e-01
502  66913.75  1.207240e-01
503  66915.45  1.379336e-01
504  66917.16  1.536068e-01
505  66918.86  1.676286e-01
506  66920.57  1.799027e-01
507  66922.27  1.903522e-01
508  66923.97  1.989201e-01
509  66925.68  2.055692e-01
510  66927.38  2.102822e-01
511  66929.09  2.130614e-01
512  66930.79  2.139283e-01
513  66932.49  2.129229e-01
514  66934.20  2.101029e-01
515  66935.90  2.055425e-01
516  66937.61  1.993319e-01
517  66939.31  1.915750e-01
518  66941.01  1.823890e-01
519  66942.72  1.719020e-01
520  66944.42  1.602523e-01
521  66946.13  1.475857e-01
522  66947.83  1.340549e-01
523  66949.53  1.198166e-01
524  66951.24  1.050309e-01
525  66952.94  8.985851e-02
526  66954.65  7.445971e-02
527  66956.35  5.899243e-02
528  66958.06  4.361067e-02
529  66959.76  2.846298e-02
530  66961.46  1.369104e-02
531  66963.17 -5.717010e-04
532  66964.87 -1.420117e-02
533  66966.58 -2.708376e-02
534  66968.28 -3.911727e-02
535  66969.98 -5.021168e-02
536  66971.69 -6.028972e-02
537  66973.39 -6.928741e-02
538  66975.10 -7.715433e-02
539  66976.80 -8.385373e-02
540  66978.50 -8.936259e-02
541  66980.21 -9.367140e-02
542  66981.91 -9.678385e-02
543  66983.62 -9.871639e-02
544  66985.32 -9.949764e-02
545  66987.02 -9.916766e-02
546  66988.73 -9.777716e-02
547  66990.43 -9.538651e-02
548  66992.14 -9.206481e-02
549  66993.84 -8.788874e-02
550  66995.55 -8.294145e-02
551  66997.25 -7.731136e-02
552  66998.95 -7.109094e-02
553  67000.66 -6.437551e-02
554  67002.36 -5.726197e-02
555  67004.07 -4.984761e-02
556  67005.77 -4.222893e-02
557  67007.47 -3.450050e-02
558  67009.18 -2.675385e-02
559  67010.88 -1.907651e-02
560  67012.59 -1.155104e-02
561  67014.29 -4.254170e-03
562  67015.99  2.743909e-03
563  67017.70  9.380215e-03
564  67019.40  1.559951e-02
565  67021.11  2.135470e-02
566  67022.81  2.660717e-02
567  67024.51  3.132695e-02
568  67026.22  3.549279e-02
569  67027.92  3.909211e-02
570  67029.63  4.212084e-02
571  67031.33  4.458315e-02
572  67033.04  4.649111e-02
573  67034.74  4.786417e-02
574  67036.44  4.872865e-02
575  67038.15  4.911708e-02
576  67039.85  4.906753e-02
577  67041.56  4.862282e-02
578  67043.26  4.782973e-02
579  67044.96  4.673818e-02
580  67046.67  4.540030e-02
581  67048.37  4.386965e-02
582  67050.08  4.220024e-02
583  67051.78  4.044574e-02
584  67053.48  3.865862e-02
585  67055.19  3.688934e-02
586  67056.89  3.518557e-02
587  67058.60  3.359152e-02
588  67060.30  3.214726e-02
589  67062.00  3.088819e-02
590  67063.71  2.984449e-02
591  67065.41  2.904077e-02
592  67067.12  2.849569e-02
593  67068.82  2.822177e-02
594  67070.52  2.822525e-02
595  67072.23  2.850602e-02
596  67073.93  2.905771e-02
597  67075.64  2.986783e-02
598  67077.34  3.091798e-02
599  67079.05  3.218421e-02
600  67080.75  3.363738e-02
601  67082.45  3.524373e-02
602  67084.16  3.696530e-02
603  67085.86  3.876068e-02
604  67087.57  4.058555e-02
605  67089.27  4.239348e-02
606  67090.97  4.413661e-02
607  67092.68  4.576643e-02
608  67094.38  4.723457e-02
609  67096.09  4.849354e-02
610  67097.79  4.949755e-02
611  67099.49  5.020319e-02
612  67101.20  5.057022e-02
613  67102.90  5.056220e-02
614  67104.61  5.014716e-02
615  67106.31  4.929814e-02
616  67108.01  4.799374e-02
617  67109.72  4.621852e-02
618  67111.42  4.396340e-02
619  67113.13  4.122594e-02
620  67114.83  3.801050e-02
621  67116.54  3.432837e-02
622  67118.24  3.019780e-02
623  67119.94  2.564387e-02
624  67121.65  2.069837e-02
625  67123.35  1.539952e-02
626  67125.06  9.791617e-03
627  67126.76  3.924610e-03
628  67128.46 -2.146411e-03
629  67130.17 -8.361801e-03
630  67131.87 -1.465800e-02
631  67133.58 -2.096826e-02
632  67135.28 -2.722337e-02
633  67136.98 -3.335249e-02
634  67138.69 -3.928395e-02
635  67140.39 -4.494614e-02
636  67142.10 -5.026833e-02
637  67143.80 -5.518156e-02
638  67145.50 -5.961950e-02
639  67147.21 -6.351926e-02
640  67148.91 -6.682224e-02
641  67150.62 -6.947484e-02
642  67152.32 -7.142924e-02
643  67154.03 -7.264401e-02
644  67155.73 -7.308472e-02
645  67157.43 -7.272449e-02
646  67159.14 -7.154439e-02
647  67160.84 -6.953380e-02
648  67162.55 -6.669073e-02
649  67164.25 -6.302190e-02
650  67165.95 -5.854290e-02
651  67167.66 -5.327811e-02
652  67169.36 -4.726064e-02
653  67171.07 -4.053201e-02
654  67172.77 -3.314195e-02
655  67174.47 -2.514790e-02
656  67176.18 -1.661456e-02
657  67177.88 -7.613313e-03
658  67179.59  1.778476e-03
659  67181.29  1.147815e-02
660  67182.99  2.139859e-02
661  67184.70  3.144903e-02
662  67186.40  4.153597e-02
663  67188.11  5.156413e-02
664  67189.81  6.143737e-02
665  67191.51  7.105970e-02
666  67193.22  8.033624e-02
667  67194.92  8.917423e-02
668  67196.63  9.748395e-02
669  67198.33  1.051797e-01
670  67200.04  1.121807e-01
671  67201.74  1.184119e-01
672  67203.44  1.238048e-01
673  67205.15  1.282983e-01
674  67206.85  1.318393e-01
675  67208.56  1.343831e-01
676  67210.26  1.358943e-01
677  67211.96  1.363469e-01
678  67213.67  1.357247e-01
679  67215.37  1.340217e-01
680  67217.08  1.312419e-01
681  67218.78  1.273998e-01
682  67220.48  1.225197e-01
683  67222.19  1.166362e-01
684  67223.89  1.097934e-01
685  67225.60  1.020447e-01
686  67227.30  9.345247e-02
687  67229.00  8.408732e-02
688  67230.71  7.402753e-02
689  67232.41  6.335835e-02
690  67234.12  5.217118e-02
691  67235.82  4.056275e-02
692  67237.53  2.863425e-02
693  67239.23  1.649034e-02
694  67240.93  4.238192e-03
695  67242.64 -8.013478e-03
696  67244.34 -2.015546e-02
697  67246.05 -3.207905e-02
698  67247.75 -4.367708e-02
699  67249.45 -5.484489e-02
700  67251.16 -6.548133e-02
701  67252.86 -7.548968e-02
702  67254.57 -8.477857e-02
703  67256.27 -9.326281e-02
704  67257.97 -1.008642e-01
705  67259.68 -1.075122e-01
706  67261.38 -1.131446e-01
707  67263.09 -1.177081e-01
708  67264.79 -1.211590e-01
709  67266.49 -1.234631e-01
710  67268.20 -1.245964e-01
711  67269.90 -1.245453e-01
712  67271.61 -1.233066e-01
713  67273.31 -1.208875e-01
714  67275.02 -1.173057e-01
715  67276.72 -1.125890e-01
716  67278.42 -1.067752e-01
717  67280.13 -9.991180e-02
718  67281.83 -9.205530e-02
719  67283.54 -8.327101e-02
720  67285.24 -7.363229e-02
721  67286.94 -6.321989e-02
722  67288.65 -5.212130e-02
723  67290.35 -4.042990e-02
724  67292.06 -2.824419e-02
725  67293.76 -1.566688e-02
726  67295.46 -2.804023e-03
727  67297.17  1.023591e-02
728  67298.87  2.334300e-02
729  67300.58  3.640679e-02
730  67302.28  4.931726e-02
731  67303.98  6.196576e-02
732  67305.69  7.424592e-02
733  67307.39  8.605456e-02
734  67309.10  9.729254e-02
735  67310.80  1.078656e-01
736  67312.50  1.176851e-01
737  67314.21  1.266689e-01
738  67315.91  1.347418e-01
739  67317.62  1.418363e-01
740  67319.32  1.478929e-01
741  67321.03  1.528612e-01
742  67322.73  1.566994e-01
743  67324.43  1.593753e-01
744  67326.14  1.608664e-01
745  67327.84  1.611597e-01
746  67329.55  1.602522e-01
747  67331.25  1.581507e-01
748  67332.95  1.548718e-01
749  67334.66  1.504416e-01
750  67336.36  1.448956e-01
751  67338.07  1.382785e-01
752  67339.77  1.306432e-01
753  67341.47  1.220514e-01
754  67343.18  1.125719e-01
755  67344.88  1.022811e-01
756  67346.59  9.126169e-02
757  67348.29  7.960214e-02
758  67349.99  6.739613e-02
759  67351.70  5.474165e-02
760  67353.40  4.174029e-02
761  67355.11  2.849641e-02
762  67356.81  1.511630e-02
763  67358.52  1.707385e-03
764  67360.22 -1.162266e-02
765  67361.92 -2.476673e-02
766  67363.63 -3.761912e-02
767  67365.33 -5.007637e-02
768  67367.04 -6.203804e-02
769  67368.74 -7.340752e-02
770  67370.44 -8.409276e-02
771  67372.15 -9.400698e-02
772  67373.85 -1.030694e-01
773  67375.56 -1.112056e-01
774  67377.26 -1.183487e-01
775  67378.96 -1.244392e-01
776  67380.67 -1.294259e-01
777  67382.37 -1.332660e-01
778  67384.08 -1.359258e-01
779  67385.78 -1.373806e-01
780  67387.48 -1.376153e-01
781  67389.19 -1.366241e-01
782  67390.89 -1.344111e-01
783  67392.60 -1.309897e-01
784  67394.30 -1.263830e-01
785  67396.01 -1.206235e-01
786  67397.71 -1.137529e-01
787  67399.41 -1.058217e-01
788  67401.12 -9.688919e-02
789  67402.82 -8.702252e-02
790  67404.53 -7.629667e-02
791  67406.23 -6.479375e-02
792  67407.93 -5.260238e-02
793  67409.64 -3.981709e-02
794  67411.34 -2.653761e-02
795  67413.05 -1.286815e-02
796  67414.75  1.083424e-03
797  67416.45  1.520634e-02
798  67418.16  2.938781e-02
799  67419.86  4.351386e-02
800  67421.57  5.747023e-02
801  67423.27  7.114326e-02
802  67424.97  8.442078e-02
803  67426.68  9.719300e-02
804  67428.38  1.093534e-01
805  67430.09  1.207996e-01
806  67431.79  1.314342e-01
807  67433.49  1.411657e-01
808  67435.20  1.499089e-01
809  67436.90  1.575862e-01
810  67438.61  1.641280e-01
811  67440.31  1.694730e-01
812  67442.02  1.735696e-01
813  67443.72  1.763757e-01
814  67445.42  1.778593e-01
815  67447.13  1.779990e-01
816  67448.83  1.767842e-01
817  67450.54  1.742156e-01
818  67452.24  1.703045e-01
819  67453.94  1.650739e-01
820  67455.65  1.585575e-01
821  67457.35  1.508003e-01
822  67459.06  1.418577e-01
823  67460.76  1.317956e-01
824  67462.46  1.206900e-01
825  67464.17  1.086260e-01
826  67465.87  9.569767e-02
827  67467.58  8.200736e-02
828  67469.28  6.766464e-02
829  67470.98  5.278566e-02
830  67472.69  3.749222e-02
831  67474.39  2.191082e-02
832  67476.10  6.171582e-03
833  67477.80 -9.592729e-03
834  67479.51 -2.524787e-02
835  67481.21 -4.065921e-02
836  67482.91 -5.569292e-02
837  67484.62 -7.021708e-02
838  67486.32 -8.410288e-02
839  67488.03 -9.722578e-02
840  67489.73 -1.094666e-01
841  67491.43 -1.207126e-01
842  67493.14 -1.308586e-01
843  67494.84 -1.398080e-01
844  67496.55 -1.474737e-01
845  67498.25 -1.537789e-01
846  67499.95 -1.586581e-01
847  67501.66 -1.620574e-01
848  67503.36 -1.639357e-01
849  67505.07 -1.642649e-01
850  67506.77 -1.630299e-01
851  67508.47 -1.602299e-01
852  67510.18 -1.558775e-01
853  67511.88 -1.499994e-01
854  67513.59 -1.426361e-01
855  67515.29 -1.338417e-01
856  67517.00 -1.236837e-01
857  67518.70 -1.122423e-01
858  67520.40 -9.961011e-02
859  67522.11 -8.589112e-02
860  67523.81 -7.120015e-02
861  67525.52 -5.566184e-02
862  67527.22 -3.940957e-02
863  67528.92 -2.258440e-02
864  67530.63 -5.333838e-03
865  67532.33  1.218945e-02
866  67534.04  2.982897e-02
867  67535.74  4.742583e-02
868  67537.44  6.482014e-02
869  67539.15  8.185253e-02
870  67540.85  9.836559e-02
871  67542.56  1.142053e-01
872  67544.26  1.292228e-01
873  67545.96  1.432752e-01
874  67547.67  1.562277e-01
875  67549.37  1.679543e-01
876  67551.08  1.783397e-01
877  67552.78  1.872798e-01
878  67554.48  1.946833e-01
879  67556.19  2.004724e-01
880  67557.89  2.045838e-01
881  67559.60  2.069695e-01
882  67561.30  2.075971e-01
883  67563.01  2.064505e-01
884  67564.71  2.035301e-01
885  67566.41  1.988531e-01
886  67568.12  1.924530e-01
887  67569.82  1.843802e-01
888  67571.53  1.747010e-01
889  67573.23  1.634974e-01
890  67574.93  1.508663e-01
891  67576.64  1.369188e-01
892  67578.34  1.217794e-01
893  67580.05  1.055845e-01
894  67581.75  8.848165e-02
895  67583.45  7.062773e-02
896  67585.16  5.218797e-02
897  67586.86  3.333415e-02
898  67588.57  1.424307e-02
899  67590.27 -4.905155e-03
900  67591.97 -2.392877e-02
901  67593.68 -4.264617e-02
902  67595.38 -6.087765e-02
903  67597.09 -7.844718e-02
904  67598.79 -9.518411e-02
905  67600.50 -1.109249e-01
906  67602.20 -1.255148e-01
907  67603.90 -1.388092e-01
908  67605.61 -1.506756e-01
909  67607.31 -1.609944e-01
910  67609.02 -1.696604e-01
911  67610.72 -1.765843e-01
912  67612.42 -1.816930e-01
913  67614.13 -1.849307e-01
914  67615.83 -1.862598e-01
915  67617.54 -1.856612e-01
916  67619.24 -1.831342e-01
917  67620.94 -1.786974e-01
918  67622.65 -1.723880e-01
919  67624.35 -1.642618e-01
920  67626.06 -1.543925e-01
921  67627.76 -1.428714e-01
922  67629.46 -1.298064e-01
923  67631.17 -1.153211e-01
924  67632.87 -9.955354e-02
925  67634.58 -8.265485e-02
926  67636.28 -6.478800e-02
927  67637.99 -4.612614e-02
928  67639.69 -2.685087e-02
929  67641.39 -7.150510e-03
930  67643.10  1.278174e-02
931  67644.80  3.274976e-02
932  67646.51  5.255643e-02
933  67648.21  7.200560e-02
934  67649.91  9.090410e-02
935  67651.62  1.090636e-01
936  67653.32  1.263028e-01
937  67655.03  1.424488e-01
938  67656.73  1.573394e-01
939  67658.43  1.708242e-01
940  67660.14  1.827670e-01
941  67661.84  1.930463e-01
942  67663.55  2.015571e-01
943  67665.25  2.082120e-01
944  67666.95  2.129420e-01
945  67668.66  2.156974e-01
946  67670.36  2.164483e-01
947  67672.07  2.151848e-01
948  67673.77  2.119176e-01
949  67675.47  2.066774e-01
950  67677.18  1.995150e-01
951  67678.88  1.905010e-01
952  67680.59  1.797246e-01
953  67682.29  1.672932e-01
954  67684.00  1.533312e-01
955  67685.70  1.379787e-01
956  67687.40  1.213903e-01
957  67689.11  1.037332e-01
958  67690.81  8.518606e-02
959  67692.52  6.593664e-02
960  67694.22  4.618027e-02
961  67695.92  2.611770e-02
962  67697.63  5.953074e-03
963  67699.33 -1.410813e-02
964  67701.04 -3.386124e-02
965  67702.74 -5.310449e-02
966  67704.44 -7.164112e-02
967  67706.15 -8.928138e-02
968  67707.85 -1.058445e-01
969  67709.56 -1.211607e-01
970  67711.26 -1.350727e-01
971  67712.96 -1.474376e-01
972  67714.67 -1.581284e-01
973  67716.37 -1.670351e-01
974  67718.08 -1.740661e-01
975  67719.78 -1.791490e-01
976  67721.49 -1.822316e-01
977  67723.19 -1.832823e-01
978  67724.89 -1.822905e-01
979  67726.60 -1.792666e-01
980  67728.30 -1.742424e-01
981  67730.01 -1.672701e-01
982  67731.71 -1.584224e-01
983  67733.41 -1.477914e-01
984  67735.12 -1.354878e-01
985  67736.82 -1.216397e-01
986  67738.53 -1.063914e-01
987  67740.23 -8.990187e-02
988  67741.93 -7.234297e-02
989  67743.64 -5.389786e-02
990  67745.34 -3.475901e-02
991  67747.05 -1.512619e-02
992  67748.75  4.795597e-03
993  67750.45  2.479825e-02
994  67752.16  4.467274e-02
995  67753.86  6.421132e-02
996  67755.57  8.320969e-02
997  67757.27  1.014691e-01
998  67758.97  1.187986e-01
999  67760.68  1.350168e-01
1000 67762.38  1.499540e-01
1001 67764.09  1.634538e-01
1002 67765.79  1.753748e-01
1003 67767.50  1.855924e-01
1004 67769.20  1.939995e-01
1005 67770.90  2.005083e-01
1006 67772.61  2.050508e-01
1007 67774.31  2.075797e-01
1008 67776.02  2.080687e-01
1009 67777.72  2.065131e-01
1010 67779.42  2.029298e-01
1011 67781.13  1.973570e-01
1012 67782.83  1.898537e-01
1013 67784.54  1.804995e-01
1014 67786.24  1.693934e-01
1015 67787.94  1.566527e-01
1016 67789.65  1.424125e-01
1017 67791.35  1.268231e-01
1018 67793.06  1.100496e-01
1019 67794.76  9.226931e-02
1020 67796.46  7.367037e-02
1021 67798.17  5.444955e-02
1022 67799.87  3.481026e-02
1023 67801.58  1.496038e-02
1024 67803.28 -4.889939e-03
1025 67804.99 -2.453046e-02
1026 67806.69 -4.375311e-02
1027 67808.39 -6.235418e-02
1028 67810.10 -8.013644e-02
1029 67811.80 -9.691128e-02
1030 67813.51 -1.125006e-01
1031 67815.21 -1.267390e-01
1032 67816.91 -1.394750e-01
1033 67818.62 -1.505730e-01
1034 67820.32 -1.599149e-01
1035 67822.03 -1.674010e-01
1036 67823.73 -1.729510e-01
1037 67825.43 -1.765052e-01
1038 67827.14 -1.780251e-01
1039 67828.84 -1.774933e-01
1040 67830.55 -1.749146e-01
1041 67832.25 -1.703149e-01
1042 67833.95 -1.637418e-01
1043 67835.66 -1.552638e-01
1044 67837.36 -1.449693e-01
1045 67839.07 -1.329661e-01
1046 67840.77 -1.193802e-01
1047 67842.48 -1.043542e-01
1048 67844.18 -8.804603e-02
1049 67845.88 -7.062729e-02
1050 67847.59 -5.228137e-02
1051 67849.29 -3.320155e-02
1052 67851.00 -1.358896e-02
1053 67852.70  6.349508e-03
1054 67854.40  2.640342e-02
1055 67856.11  4.636098e-02
1056 67857.81  6.601128e-02
1057 67859.52  8.514649e-02
1058 67861.22  1.035641e-01
1059 67862.92  1.210689e-01
1060 67864.63  1.374754e-01
1061 67866.33  1.526093e-01
1062 67868.04  1.663095e-01
1063 67869.74  1.784302e-01
1064 67871.44  1.888417e-01
1065 67873.15  1.974324e-01
1066 67874.85  2.041096e-01
1067 67876.56  2.088007e-01
1068 67878.26  2.114537e-01
1069 67879.96  2.120381e-01
1070 67881.67  2.105450e-01
1071 67883.37  2.069872e-01
1072 67885.08  2.013991e-01
1073 67886.78  1.938365e-01
1074 67888.49  1.843756e-01
1075 67890.19  1.731128e-01
1076 67891.89  1.601632e-01
1077 67893.60  1.456597e-01
1078 67895.30  1.297514e-01
1079 67897.01  1.126023e-01
1080 67898.71  9.438925e-02
1081 67900.41  7.530049e-02
1082 67902.12  5.553346e-02
1083 67903.82  3.529281e-02
1084 67905.53  1.478826e-02
1085 67907.23 -5.767559e-03
1086 67908.93 -2.616131e-02
1087 67910.64 -4.618119e-02
1088 67912.34 -6.561909e-02
1089 67914.05 -8.427277e-02
1090 67915.75 -1.019480e-01
1091 67917.45 -1.184604e-01
1092 67919.16 -1.336376e-01
1093 67920.86 -1.473208e-01
1094 67922.57 -1.593665e-01
1095 67924.27 -1.696481e-01
1096 67925.98 -1.780569e-01
1097 67927.68 -1.845035e-01
1098 67929.38 -1.889186e-01
1099 67931.09 -1.912538e-01
1100 67932.79 -1.914819e-01
1101 67934.50 -1.895973e-01
1102 67936.20 -1.856161e-01
1103 67937.90 -1.795760e-01
1104 67939.61 -1.715356e-01
1105 67941.31 -1.615741e-01
1106 67943.02 -1.497903e-01
1107 67944.72 -1.363018e-01
1108 67946.42 -1.212434e-01
1109 67948.13 -1.047662e-01
1110 67949.83 -8.703570e-02
1111 67951.54 -6.823026e-02
1112 67953.24 -4.853925e-02
1113 67954.94 -2.816108e-02
1114 67956.65 -7.301238e-03
1115 67958.35  1.382983e-02
1116 67960.06  3.501887e-02
1117 67961.76  5.605197e-02
1118 67963.47  7.671672e-02
1119 67965.17  9.680438e-02
1120 67966.87  1.161120e-01
1121 67968.58  1.344444e-01
1122 67970.28  1.516162e-01
1123 67971.99  1.674538e-01
1124 67973.69  1.817968e-01
1125 67975.39  1.944998e-01
1126 67977.10  2.054340e-01
1127 67978.80  2.144883e-01
1128 67980.51  2.215703e-01
1129 67982.21  2.266075e-01
1130 67983.91  2.295476e-01
1131 67985.62  2.303596e-01
1132 67987.32  2.290334e-01
1133 67989.03  2.255805e-01
1134 67990.73  2.200334e-01
1135 67992.43  2.124455e-01
1136 67994.14  2.028904e-01
1137 67995.84  1.914614e-01
1138 67997.55  1.782701e-01
1139 67999.25  1.634458e-01
1140 68000.95  1.471336e-01
1141 68002.66  1.294937e-01
1142 68004.36  1.106990e-01
1143 68006.07  9.093382e-02
1144 68007.77  7.039195e-02
1145 68009.48  4.927476e-02
1146 68011.18  2.778915e-02
1147 68012.88  6.145509e-03
1148 68014.59 -1.544437e-02
1149 68016.29 -3.676935e-02
1150 68018.00 -5.762106e-02
1151 68019.70 -7.779593e-02
1152 68021.40 -9.709718e-02
1153 68023.11 -1.153367e-01
1154 68024.81 -1.323371e-01
1155 68026.52 -1.479329e-01
1156 68028.22 -1.619728e-01
1157 68029.92 -1.743207e-01
1158 68031.63 -1.848570e-01
1159 68033.33 -1.934801e-01
1160 68035.04 -2.001067e-01
1161 68036.74 -2.046734e-01
1162 68038.44 -2.071366e-01
1163 68040.15 -2.074731e-01
1164 68041.85 -2.056804e-01
1165 68043.56 -2.017765e-01
1166 68045.26 -1.957999e-01
1167 68046.97 -1.878089e-01
1168 68048.67 -1.778812e-01
1169 68050.37 -1.661129e-01
1170 68052.08 -1.526179e-01
1171 68053.78 -1.375263e-01
1172 68055.49 -1.209834e-01
1173 68057.19 -1.031481e-01
1174 68058.89 -8.419162e-02
1175 68060.60 -6.429539e-02
1176 68062.30 -4.364963e-02
1177 68064.01 -2.245133e-02
1178 68065.71 -9.024360e-04
1179 68067.41  2.079218e-02
1180 68069.12  4.242665e-02
1181 68070.82  6.379604e-02
1182 68072.53  8.469840e-02
1183 68074.23  1.049366e-01
1184 68075.93  1.243202e-01
1185 68077.64  1.426673e-01
1186 68079.34  1.598061e-01
1187 68081.05  1.755769e-01
1188 68082.75  1.898329e-01
1189 68084.46  2.024423e-01
1190 68086.16  2.132889e-01
1191 68087.86  2.222735e-01
1192 68089.57  2.293145e-01
1193 68091.27  2.343492e-01
1194 68092.98  2.373335e-01
1195 68094.68  2.382429e-01
1196 68096.38  2.370723e-01
1197 68098.09  2.338363e-01
1198 68099.79  2.285686e-01
1199 68101.50  2.213220e-01
1200 68103.20  2.121677e-01
1201 68104.90  2.011944e-01
1202 68106.61  1.885076e-01
1203 68108.31  1.742284e-01
1204 68110.02  1.584927e-01
1205 68111.72  1.414492e-01
1206 68113.42  1.232587e-01
1207 68115.13  1.040919e-01
1208 68116.83  8.412827e-02
1209 68118.54  6.355404e-02
1210 68120.24  4.256060e-02
1211 68121.94  2.134263e-02
1212 68123.65  9.629339e-05
1213 68125.35 -2.098260e-02
1214 68127.06 -4.170040e-02
1215 68128.76 -6.186738e-02
1216 68130.47 -8.129953e-02
1217 68132.17 -9.982021e-02
1218 68133.87 -1.172617e-01
1219 68135.58 -1.334669e-01
1220 68137.28 -1.482905e-01
1221 68138.99 -1.616004e-01
1222 68140.69 -1.732788e-01
1223 68142.39 -1.832234e-01
1224 68144.10 -1.913481e-01
1225 68145.80 -1.975838e-01
1226 68147.51 -2.018790e-01
1227 68149.21 -2.041999e-01
1228 68150.91 -2.045313e-01
1229 68152.62 -2.028760e-01
1230 68154.32 -1.992548e-01
1231 68156.03 -1.937067e-01
1232 68157.73 -1.862880e-01
1233 68159.43 -1.770717e-01
1234 68161.14 -1.661472e-01
1235 68162.84 -1.536189e-01
1236 68164.55 -1.396054e-01
1237 68166.25 -1.242387e-01
1238 68167.96 -1.076621e-01
1239 68169.66 -9.002966e-02
1240 68171.36 -7.150436e-02
1241 68173.07 -5.225663e-02
1242 68174.77 -3.246278e-02
1243 68176.48 -1.230338e-02
1244 68178.18  8.038417e-03
1245 68179.88  2.837854e-02
1246 68181.59  4.853368e-02
1247 68183.29  6.832294e-02
1248 68185.00  8.756950e-02
1249 68186.70  1.061021e-01
1250 68188.40  1.237568e-01
1251 68190.11  1.403782e-01
1252 68191.81  1.558207e-01
1253 68193.52  1.699502e-01
1254 68195.22  1.826450e-01
1255 68196.92  1.937966e-01
1256 68198.63  2.033112e-01
1257 68200.33  2.111099e-01
1258 68202.04  2.171298e-01
1259 68203.74  2.213241e-01
1260 68205.45  2.236628e-01
1261 68207.15  2.241325e-01
1262 68208.85  2.227369e-01
1263 68210.56  2.194962e-01
1264 68212.26  2.144473e-01
1265 68213.97  2.076431e-01
1266 68215.67  1.991519e-01
1267 68217.37  1.890569e-01
1268 68219.08  1.774554e-01
1269 68220.78  1.644575e-01
1270 68222.49  1.501856e-01
1271 68224.19  1.347726e-01
1272 68225.89  1.183612e-01
1273 68227.60  1.011023e-01
1274 68229.30  8.315369e-02
1275 68231.01  6.467842e-02
1276 68232.71  4.584353e-02
1277 68234.41  2.681842e-02
1278 68236.12  7.773335e-03
1279 68237.82 -1.112219e-02
1280 68239.53 -2.970082e-02
1281 68241.23 -4.779895e-02
1282 68242.93 -6.525811e-02
1283 68244.64 -8.192642e-02
1284 68246.34 -9.765985e-02
1285 68248.05 -1.123235e-01
1286 68249.75 -1.257929e-01
1287 68251.46 -1.379547e-01
1288 68253.16 -1.487081e-01
1289 68254.86 -1.579653e-01
1290 68256.57 -1.656524e-01
1291 68258.27 -1.717101e-01
1292 68259.98 -1.760939e-01
1293 68261.68 -1.787743e-01
1294 68263.38 -1.797377e-01
1295 68265.09 -1.789854e-01
1296 68266.79 -1.765343e-01
1297 68268.50 -1.724164e-01
1298 68270.20 -1.666784e-01
1299 68271.90 -1.593810e-01
1300 68273.61 -1.505986e-01
1301 68275.31 -1.404186e-01
1302 68277.02 -1.289399e-01
1303 68278.72 -1.162727e-01
1304 68280.42 -1.025371e-01
1305 68282.13 -8.786171e-02
1306 68283.83 -7.238300e-02
1307 68285.54 -5.624351e-02
1308 68287.24 -3.959079e-02
1309 68288.95 -2.257594e-02
1310 68290.65 -5.352245e-03
1311 68292.35  1.192620e-02
1312 68294.06  2.910594e-02
1313 68295.76  4.603549e-02
1314 68297.47  6.256671e-02
1315 68299.17  7.855615e-02
1316 68300.87  9.386627e-02
1317 68302.58  1.083666e-01
1318 68304.28  1.219351e-01
1319 68305.99  1.344589e-01
1320 68307.69  1.458353e-01
1321 68309.39  1.559729e-01
1322 68311.10  1.647920e-01
1323 68312.80  1.722254e-01
1324 68314.51  1.782190e-01
1325 68316.21  1.827319e-01
1326 68317.91  1.857371e-01
1327 68319.62  1.872210e-01
1328 68321.32  1.871841e-01
1329 68323.03  1.856404e-01
1330 68324.73  1.826173e-01
1331 68326.44  1.781554e-01
1332 68328.14  1.723076e-01
1333 68329.84  1.651390e-01
1334 68331.55  1.567259e-01
1335 68333.25  1.471550e-01
1336 68334.96  1.365227e-01
1337 68336.66  1.249337e-01
1338 68338.36  1.125006e-01
1339 68340.07  9.934232e-02
1340 68341.77  8.558305e-02
1341 68343.48  7.135113e-02
1342 68345.18  5.677778e-02
1343 68346.88  4.199588e-02
1344 68348.59  2.713873e-02
1345 68350.29  1.233882e-02
1346 68352.00 -2.273382e-03
1347 68353.70 -1.657060e-02
1348 68355.40 -3.042988e-02
1349 68357.11 -4.373372e-02
1350 68358.81 -5.637103e-02
1351 68360.52 -6.823810e-02
1352 68362.22 -7.923950e-02
1353 68363.92 -8.928884e-02
1354 68365.63 -9.830945e-02
1355 68367.33 -1.062350e-01
1356 68369.04 -1.130099e-01
1357 68370.74 -1.185898e-01
1358 68372.45 -1.229418e-01
1359 68374.15 -1.260445e-01
1360 68375.85 -1.278883e-01
1361 68377.56 -1.284751e-01
1362 68379.26 -1.278182e-01
1363 68380.97 -1.259419e-01
1364 68382.67 -1.228814e-01
1365 68384.37 -1.186819e-01
1366 68386.08 -1.133986e-01
1367 68387.78 -1.070954e-01
1368 68389.49 -9.984466e-02
1369 68391.19 -9.172599e-02
1370 68392.89 -8.282574e-02
1371 68394.60 -7.323589e-02
1372 68396.30 -6.305312e-02
1373 68398.01 -5.237784e-02
1374 68399.71 -4.131317e-02
1375 68401.41 -2.996391e-02
1376 68403.12 -1.843554e-02
1377 68404.82 -6.833169e-03
1378 68406.53  4.739391e-03
1379 68408.23  1.618064e-02
1380 68409.94  2.739230e-02
1381 68411.64  3.828016e-02
1382 68413.34  4.875493e-02
1383 68415.05  5.873299e-02
1384 68416.75  6.813704e-02
1385 68418.46  7.689676e-02
1386 68420.16  8.494929e-02
1387 68421.86  9.223971e-02
1388 68423.57  9.872137e-02
1389 68425.27  1.043562e-01
1390 68426.98  1.091147e-01
1391 68428.68  1.129765e-01
1392 68430.38  1.159296e-01
1393 68432.09  1.179710e-01
1394 68433.79  1.191061e-01
1395 68435.50  1.193485e-01
1396 68437.20  1.187198e-01
1397 68438.90  1.172491e-01
1398 68440.61  1.149723e-01
1399 68442.31  1.119320e-01
1400 68444.02  1.081765e-01
1401 68445.72  1.037593e-01
1402 68447.43  9.873846e-02
1403 68449.13  9.317594e-02
1404 68450.83  8.713666e-02
1405 68452.54  8.068790e-02
1406 68454.24  7.389855e-02
1407 68455.95  6.683830e-02
1408 68457.65  5.957695e-02
1409 68459.35  5.218369e-02
1410 68461.06  4.472641e-02
1411 68462.76  3.727104e-02
1412 68464.47  2.988093e-02
1413 68466.17  2.261633e-02
1414 68467.87  1.553384e-02
1415 68469.58  8.685967e-03
1416 68471.28  2.120736e-03
1417 68472.99 -4.118633e-03
1418 68474.69 -9.993991e-03
1419 68476.39 -1.547246e-02
1420 68478.10 -2.052653e-02
1421 68479.80 -2.513417e-02
1422 68481.51 -2.927875e-02
1423 68483.21 -3.294904e-02
1424 68484.91 -3.613901e-02
1425 68486.62 -3.884766e-02
1426 68488.32 -4.107879e-02
1427 68490.03 -4.284068e-02
1428 68491.73 -4.414572e-02
1429 68493.44 -4.501009e-02
1430 68495.14 -4.545329e-02
1431 68496.84 -4.549774e-02
1432 68498.55 -4.516826e-02
1433 68500.25 -4.449167e-02
1434 68501.96 -4.349625e-02
1435 68503.66 -4.221129e-02
1436 68505.36 -4.066661e-02
1437 68507.07 -3.889209e-02
1438 68508.77 -3.691728e-02
1439 68510.48 -3.477090e-02
1440 68512.18 -3.248057e-02
1441 68513.88 -3.007237e-02
1442 68515.59 -2.757057e-02
1443 68517.29 -2.499740e-02
1444 68519.00 -2.237279e-02
1445 68520.70 -1.971423e-02
1446 68522.40 -1.703665e-02
1447 68524.11 -1.435236e-02
1448 68525.81 -1.167104e-02
1449 68527.52 -8.999785e-03
1450 68529.22 -6.343175e-03
1451 68530.93 -3.703435e-03
1452 68532.63 -1.080602e-03
1453 68534.33  1.527249e-03
1454 68536.04  4.123750e-03
1455 68537.74  6.713949e-03
1456 68539.45  9.303993e-03
1457 68541.15  1.190079e-02
1458 68542.85  1.451166e-02
1459 68544.56  1.714396e-02
1460 68546.26  1.980474e-02
1461 68547.97  2.250035e-02
1462 68549.67  2.523614e-02
1463 68551.37  2.801604e-02
1464 68553.08  3.084233e-02
1465 68554.78  3.371529e-02
1466 68556.49  3.663298e-02
1467 68558.19  3.959101e-02
1468 68559.89  4.258235e-02
1469 68561.60  4.559723e-02
1470 68563.30  4.862303e-02
1471 68565.01  5.164427e-02
1472 68566.71  5.464260e-02
1473 68568.41  5.759694e-02
1474 68570.12  6.048355e-02
1475 68571.82  6.327623e-02
1476 68573.53  6.594660e-02
1477 68575.23  6.846433e-02
1478 68576.94  7.079751e-02
1479 68578.64  7.291304e-02
1480 68580.34  7.477701e-02
1481 68582.05  7.635520e-02
1482 68583.75  7.761352e-02
1483 68585.46  7.851855e-02
1484 68587.16  7.903805e-02
1485 68588.86  7.914148e-02
1486 68590.57  7.880055e-02
1487 68592.27  7.798974e-02
1488 68593.98  7.668681e-02
1489 68595.68  7.487331e-02
1490 68597.38  7.253502e-02
1491 68599.09  6.966239e-02
1492 68600.79  6.625095e-02
1493 68602.50  6.230161e-02
1494 68604.20  5.782097e-02
1495 68605.90  5.282154e-02
1496 68607.61  4.732190e-02
1497 68609.31  4.134675e-02
1498 68611.02  3.492700e-02
1499 68612.72  2.809963e-02
1500 68614.43  2.090760e-02
1501 68616.13  1.339962e-02
1502 68617.83  5.629859e-03
1503 68619.54 -2.342430e-03
1504 68621.24 -1.045335e-02
1505 68622.95 -1.863487e-02
1506 68624.65 -2.681542e-02
1507 68626.35 -3.492052e-02
1508 68628.06 -4.287348e-02
1509 68629.76 -5.059618e-02
1510 68631.47 -5.800979e-02
1511 68633.17 -6.503568e-02
1512 68634.87 -7.159618e-02
1513 68636.58 -7.761554e-02
1514 68638.28 -8.302068e-02
1515 68639.99 -8.774218e-02
1516 68641.69 -9.171503e-02
1517 68643.39 -9.487952e-02
1518 68645.10 -9.718198e-02
1519 68646.80 -9.857557e-02
1520 68648.51 -9.902095e-02
1521 68650.21 -9.848693e-02
1522 68651.92 -9.695100e-02
1523 68653.62 -9.439982e-02
1524 68655.32 -9.082962e-02
1525 68657.03 -8.624648e-02
1526 68658.73 -8.066657e-02
1527 68660.44 -7.411619e-02
1528 68662.14 -6.663180e-02
1529 68663.84 -5.825989e-02
1530 68665.55 -4.905676e-02
1531 68667.25 -3.908815e-02
1532 68668.96 -2.842885e-02
1533 68670.66 -1.716211e-02
1534 68672.36 -5.378994e-03
1535 68674.07  6.822351e-03
1536 68675.77  1.933755e-02
1537 68677.48  3.205692e-02
1538 68679.18  4.486645e-02
1539 68680.88  5.764886e-02
1540 68682.59  7.028475e-02
1541 68684.29  8.265370e-02
1542 68686.00  9.463552e-02
1543 68687.70  1.061114e-01
1544 68689.40  1.169652e-01
1545 68691.11  1.270846e-01
1546 68692.81  1.363622e-01
1547 68694.52  1.446970e-01
1548 68696.22  1.519952e-01
1549 68697.93  1.581714e-01
1550 68699.63  1.631494e-01
1551 68701.33  1.668636e-01
1552 68703.04  1.692593e-01
1553 68704.74  1.702935e-01
1554 68706.45  1.699359e-01
1555 68708.15  1.681689e-01
1556 68709.85  1.649883e-01
1557 68711.56  1.604034e-01
1558 68713.26  1.544371e-01
1559 68714.97  1.471258e-01
1560 68716.67  1.385196e-01
1561 68718.37  1.286815e-01
1562 68720.08  1.176871e-01
1563 68721.78  1.056243e-01
1564 68723.49  9.259215e-02
1565 68725.19  7.870034e-02
1566 68726.89  6.406812e-02
1567 68728.60  4.882326e-02
1568 68730.30  3.310091e-02
1569 68732.01  1.704231e-02
1570 68733.71  7.935317e-04
1571 68735.42 -1.549597e-02
1572 68737.12 -3.167471e-02
1573 68738.82 -4.759073e-02
1574 68740.53 -6.309299e-02
1575 68742.23 -7.803293e-02
1576 68743.94 -9.226589e-02
1577 68745.64 -1.056526e-01
1578 68747.34 -1.180607e-01
1579 68749.05 -1.293657e-01
1580 68750.75 -1.394528e-01
1581 68752.46 -1.482178e-01
1582 68754.16 -1.555682e-01
1583 68755.86 -1.614242e-01
1584 68757.57 -1.657197e-01
1585 68759.27 -1.684030e-01
1586 68760.98 -1.694372e-01
1587 68762.68 -1.688012e-01
1588 68764.38 -1.664892e-01
1589 68766.09 -1.625117e-01
1590 68767.79 -1.568949e-01
1591 68769.50 -1.496809e-01
1592 68771.20 -1.409273e-01
Warning message:
In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values

----- BANDPASS FILTERING STRATIGRAPHIC SERIES-----

----- APPLYING PIECEWISE-LINEAR INTERPOLATION TO STRATIGRAPHIC SERIES -----

 ,* Number of samples= 3226
 ,* Determining median sampling interval for series
 ,* Will interpolate to median sampling interval of 1.704084
 ,* New number of samples= 1592
 ,* Number of data points= 1592
 ,* Sample interval= 1.704084
 ,* Mean value removed= 0.01463981
 ,* Center of bandpass filter = 0.0094
 ,* 15 pos/neg frequency pairs will be bandpassed
          age        scl_ma
1    66060.00 -1.145622e-01
2    66061.71 -1.102254e-01
3    66063.41 -1.049499e-01
4    66065.12 -9.878163e-02
5    66066.82 -9.177336e-02
6    66068.52 -8.398382e-02
7    66070.23 -7.547733e-02
8    66071.93 -6.632326e-02
9    66073.64 -5.659535e-02
10   66075.34 -4.637115e-02
11   66077.04 -3.573132e-02
12   66078.75 -2.475899e-02
13   66080.45 -1.353906e-02
14   66082.16 -2.157560e-03
15   66083.86  9.299074e-03
16   66085.56  2.074465e-02
17   66087.27  3.209387e-02
18   66088.97  4.326299e-02
19   66090.68  5.417043e-02
20   66092.38  6.473735e-02
21   66094.08  7.488824e-02
22   66095.79  8.455141e-02
23   66097.49  9.365950e-02
24   66099.20  1.021499e-01
25   66100.90  1.099651e-01
26   66102.61  1.170533e-01
27   66104.31  1.233681e-01
28   66106.01  1.288697e-01
29   66107.72  1.335241e-01
30   66109.42  1.373040e-01
31   66111.13  1.401884e-01
32   66112.83  1.421630e-01
33   66114.53  1.432200e-01
34   66116.24  1.433581e-01
35   66117.94  1.425826e-01
36   66119.65  1.409048e-01
37   66121.35  1.383424e-01
38   66123.05  1.349187e-01
39   66124.76  1.306629e-01
40   66126.46  1.256094e-01
41   66128.17  1.197978e-01
42   66129.87  1.132721e-01
43   66131.57  1.060810e-01
44   66133.28  9.827689e-02
45   66134.98  8.991582e-02
46   66136.69  8.105696e-02
47   66138.39  7.176218e-02
48   66140.09  6.209564e-02
49   66141.80  5.212331e-02
50   66143.50  4.191263e-02
51   66145.21  3.153195e-02
52   66146.91  2.105022e-02
53   66148.62  1.053648e-02
54   66150.32  5.949534e-05
55   66152.02 -1.031266e-02
56   66153.73 -2.051299e-02
57   66155.43 -3.047595e-02
58   66157.14 -4.013781e-02
59   66158.84 -4.943699e-02
60   66160.54 -5.831439e-02
61   66162.25 -6.671367e-02
62   66163.95 -7.458159e-02
63   66165.66 -8.186821e-02
64   66167.36 -8.852717e-02
65   66169.06 -9.451593e-02
66   66170.77 -9.979595e-02
67   66172.47 -1.043329e-01
68   66174.18 -1.080967e-01
69   66175.88 -1.110619e-01
70   66177.58 -1.132076e-01
71   66179.29 -1.145177e-01
72   66180.99 -1.149809e-01
73   66182.70 -1.145906e-01
74   66184.40 -1.133454e-01
75   66186.11 -1.112486e-01
76   66187.81 -1.083086e-01
77   66189.51 -1.045388e-01
78   66191.22 -9.995728e-02
79   66192.92 -9.458720e-02
80   66194.63 -8.845637e-02
81   66196.33 -8.159734e-02
82   66198.03 -7.404722e-02
83   66199.74 -6.584755e-02
84   66201.44 -5.704417e-02
85   66203.15 -4.768701e-02
86   66204.85 -3.782990e-02
87   66206.55 -2.753034e-02
88   66208.26 -1.684926e-02
89   66209.96 -5.850776e-03
90   66211.67  5.398166e-03
91   66213.37  1.682805e-02
92   66215.07  2.836715e-02
93   66216.78  3.994190e-02
94   66218.48  5.147725e-02
95   66220.19  6.289708e-02
96   66221.89  7.412466e-02
97   66223.60  8.508303e-02
98   66225.30  9.569550e-02
99   66227.00  1.058861e-01
100  66228.71  1.155802e-01
101  66230.41  1.247046e-01
102  66232.12  1.331888e-01
103  66233.82  1.409645e-01
104  66235.52  1.479670e-01
105  66237.23  1.541353e-01
106  66238.93  1.594127e-01
107  66240.64  1.637471e-01
108  66242.34  1.670920e-01
109  66244.04  1.694061e-01
110  66245.75  1.706549e-01
111  66247.45  1.708099e-01
112  66249.16  1.698499e-01
113  66250.86  1.677609e-01
114  66252.56  1.645367e-01
115  66254.27  1.601789e-01
116  66255.97  1.546971e-01
117  66257.68  1.481093e-01
118  66259.38  1.404419e-01
119  66261.08  1.317299e-01
120  66262.79  1.220163e-01
121  66264.49  1.113530e-01
122  66266.20  9.979972e-02
123  66267.90  8.742437e-02
124  66269.61  7.430251e-02
125  66271.31  6.051710e-02
126  66273.01  4.615802e-02
127  66274.72  3.132161e-02
128  66276.42  1.611009e-02
129  66278.13  6.309234e-04
130  66279.83 -1.500384e-02
131  66281.53 -3.067834e-02
132  66283.24 -4.627373e-02
133  66284.94 -6.166898e-02
134  66286.65 -7.674183e-02
135  66288.35 -9.136970e-02
136  66290.05 -1.054307e-01
137  66291.76 -1.188045e-01
138  66293.46 -1.313737e-01
139  66295.17 -1.430241e-01
140  66296.87 -1.536468e-01
141  66298.57 -1.631382e-01
142  66300.28 -1.714015e-01
143  66301.98 -1.783477e-01
144  66303.69 -1.838963e-01
145  66305.39 -1.879763e-01
146  66307.10 -1.905269e-01
147  66308.80 -1.914986e-01
148  66310.50 -1.908535e-01
149  66312.21 -1.885659e-01
150  66313.91 -1.846232e-01
151  66315.62 -1.790259e-01
152  66317.32 -1.717883e-01
153  66319.02 -1.629381e-01
154  66320.73 -1.525174e-01
155  66322.43 -1.405815e-01
156  66324.14 -1.272000e-01
157  66325.84 -1.124555e-01
158  66327.54 -9.644380e-02
159  66329.25 -7.927309e-02
160  66330.95 -6.106349e-02
161  66332.66 -4.194615e-02
162  66334.36 -2.206244e-02
163  66336.06 -1.562951e-03
164  66337.77  1.939362e-02
165  66339.47  4.064164e-02
166  66341.18  6.200981e-02
167  66342.88  8.332257e-02
168  66344.59  1.044014e-01
169  66346.29  1.250666e-01
170  66347.99  1.451384e-01
171  66349.70  1.644388e-01
172  66351.40  1.827930e-01
173  66353.11  2.000314e-01
174  66354.81  2.159903e-01
175  66356.51  2.305145e-01
176  66358.22  2.434580e-01
177  66359.92  2.546857e-01
178  66361.63  2.640752e-01
179  66363.33  2.715174e-01
180  66365.03  2.769181e-01
181  66366.74  2.801993e-01
182  66368.44  2.812996e-01
183  66370.15  2.801757e-01
184  66371.85  2.768026e-01
185  66373.55  2.711744e-01
186  66375.26  2.633047e-01
187  66376.96  2.532266e-01
188  66378.67  2.409931e-01
189  66380.37  2.266766e-01
190  66382.07  2.103688e-01
191  66383.78  1.921804e-01
192  66385.48  1.722401e-01
193  66387.19  1.506938e-01
194  66388.89  1.277038e-01
195  66390.60  1.034476e-01
196  66392.30  7.811622e-02
197  66394.00  5.191326e-02
198  66395.71  2.505288e-02
199  66397.41 -2.241757e-03
200  66399.12 -2.974039e-02
201  66400.82 -5.720759e-02
202  66402.52 -8.440476e-02
203  66404.23 -1.110923e-01
204  66405.93 -1.370315e-01
205  66407.64 -1.619870e-01
206  66409.34 -1.857289e-01
207  66411.04 -2.080345e-01
208  66412.75 -2.286909e-01
209  66414.45 -2.474968e-01
210  66416.16 -2.642646e-01
211  66417.86 -2.788221e-01
212  66419.56 -2.910143e-01
213  66421.27 -3.007052e-01
214  66422.97 -3.077793e-01
215  66424.68 -3.121426e-01
216  66426.38 -3.137239e-01
217  66428.09 -3.124760e-01
218  66429.79 -3.083762e-01
219  66431.49 -3.014267e-01
220  66433.20 -2.916551e-01
221  66434.90 -2.791148e-01
222  66436.61 -2.638840e-01
223  66438.31 -2.460662e-01
224  66440.01 -2.257890e-01
225  66441.72 -2.032036e-01
226  66443.42 -1.784834e-01
227  66445.13 -1.518232e-01
228  66446.83 -1.234371e-01
229  66448.53 -9.355713e-02
230  66450.24 -6.243145e-02
231  66451.94 -3.032206e-02
232  66453.65  2.497283e-03
233  66455.35  3.574343e-02
234  66457.05  6.912630e-02
235  66458.76  1.023515e-01
236  66460.46  1.351227e-01
237  66462.17  1.671448e-01
238  66463.87  1.981260e-01
239  66465.58  2.277810e-01
240  66467.28  2.558334e-01
241  66468.98  2.820183e-01
242  66470.69  3.060851e-01
243  66472.39  3.277996e-01
244  66474.10  3.469463e-01
245  66475.80  3.633311e-01
246  66477.50  3.767826e-01
247  66479.21  3.871541e-01
248  66480.91  3.943255e-01
249  66482.62  3.982043e-01
250  66484.32  3.987269e-01
251  66486.02  3.958594e-01
252  66487.73  3.895980e-01
253  66489.43  3.799699e-01
254  66491.14  3.670326e-01
255  66492.84  3.508742e-01
256  66494.54  3.316127e-01
257  66496.25  3.093951e-01
258  66497.95  2.843965e-01
259  66499.66  2.568186e-01
260  66501.36  2.268882e-01
261  66503.06  1.948551e-01
262  66504.77  1.609906e-01
263  66506.47  1.255843e-01
264  66508.18  8.894249e-02
265  66509.88  5.138486e-02
266  66511.59  1.324200e-02
267  66513.29 -2.514767e-02
268  66514.99 -6.344090e-02
269  66516.70 -1.012927e-01
270  66518.40 -1.383597e-01
271  66520.11 -1.743028e-01
272  66521.81 -2.087909e-01
273  66523.51 -2.415039e-01
274  66525.22 -2.721352e-01
275  66526.92 -3.003954e-01
276  66528.63 -3.260143e-01
277  66530.33 -3.487443e-01
278  66532.03 -3.683623e-01
279  66533.74 -3.846718e-01
280  66535.44 -3.975057e-01
281  66537.15 -4.067272e-01
282  66538.85 -4.122314e-01
283  66540.55 -4.139472e-01
284  66542.26 -4.118370e-01
285  66543.96 -4.058983e-01
286  66545.67 -3.961634e-01
287  66547.37 -3.826996e-01
288  66549.08 -3.656084e-01
289  66550.78 -3.450251e-01
290  66552.48 -3.211179e-01
291  66554.19 -2.940860e-01
292  66555.89 -2.641585e-01
293  66557.60 -2.315921e-01
294  66559.30 -1.966689e-01
295  66561.00 -1.596942e-01
296  66562.71 -1.209936e-01
297  66564.41 -8.091009e-02
298  66566.12 -3.980093e-02
299  66567.82  1.965402e-03
300  66569.52  4.401269e-02
301  66571.23  8.596041e-02
302  66572.93  1.274272e-01
303  66574.64  1.680345e-01
304  66576.34  2.074099e-01
305  66578.04  2.451906e-01
306  66579.75  2.810272e-01
307  66581.45  3.145865e-01
308  66583.16  3.455549e-01
309  66584.86  3.736414e-01
310  66586.57  3.985804e-01
311  66588.27  4.201342e-01
312  66589.97  4.380953e-01
313  66591.68  4.522886e-01
314  66593.38  4.625730e-01
315  66595.09  4.688427e-01
316  66596.79  4.710289e-01
317  66598.49  4.690997e-01
318  66600.20  4.630613e-01
319  66601.90  4.529577e-01
320  66603.61  4.388703e-01
321  66605.31  4.209176e-01
322  66607.01  3.992541e-01
323  66608.72  3.740687e-01
324  66610.42  3.455835e-01
325  66612.13  3.140513e-01
326  66613.83  2.797539e-01
327  66615.53  2.429990e-01
328  66617.24  2.041179e-01
329  66618.94  1.634621e-01
330  66620.65  1.214001e-01
331  66622.35  7.831450e-02
332  66624.05  3.459761e-02
333  66625.76 -9.351468e-03
334  66627.46 -5.313089e-02
335  66629.17 -9.633971e-02
336  66630.87 -1.385817e-01
337  66632.58 -1.794689e-01
338  66634.28 -2.186254e-01
339  66635.98 -2.556910e-01
340  66637.69 -2.903242e-01
341  66639.39 -3.222058e-01
342  66641.10 -3.510417e-01
343  66642.80 -3.765657e-01
344  66644.50 -3.985422e-01
345  66646.21 -4.167681e-01
346  66647.91 -4.310751e-01
347  66649.62 -4.413310e-01
348  66651.32 -4.474412e-01
349  66653.02 -4.493496e-01
350  66654.73 -4.470387e-01
351  66656.43 -4.405305e-01
352  66658.14 -4.298857e-01
353  66659.84 -4.152036e-01
354  66661.54 -3.966207e-01
355  66663.25 -3.743099e-01
356  66664.95 -3.484785e-01
357  66666.66 -3.193667e-01
358  66668.36 -2.872446e-01
359  66670.07 -2.524105e-01
360  66671.77 -2.151875e-01
361  66673.47 -1.759207e-01
362  66675.18 -1.349740e-01
363  66676.88 -9.272637e-02
364  66678.59 -4.956865e-02
365  66680.29 -5.899607e-03
366  66681.99  3.787773e-02
367  66683.70  8.135985e-02
368  66685.40  1.241466e-01
369  66687.11  1.658449e-01
370  66688.81  2.060724e-01
371  66690.51  2.444613e-01
372  66692.22  2.806615e-01
373  66693.92  3.143439e-01
374  66695.63  3.452036e-01
375  66697.33  3.729627e-01
376  66699.03  3.973728e-01
377  66700.74  4.182174e-01
378  66702.44  4.353137e-01
379  66704.15  4.485144e-01
380  66705.85  4.577089e-01
381  66707.56  4.628244e-01
382  66709.26  4.638263e-01
383  66710.96  4.607186e-01
384  66712.67  4.535436e-01
385  66714.37  4.423816e-01
386  66716.08  4.273497e-01
387  66717.78  4.086011e-01
388  66719.48  3.863229e-01
389  66721.19  3.607348e-01
390  66722.89  3.320866e-01
391  66724.60  3.006557e-01
392  66726.30  2.667446e-01
393  66728.00  2.306778e-01
394  66729.71  1.927986e-01
395  66731.41  1.534659e-01
396  66733.12  1.130507e-01
397  66734.82  7.193245e-02
398  66736.52  3.049556e-02
399  66738.23 -1.087436e-02
400  66739.93 -5.179417e-02
401  66741.64 -9.188676e-02
402  66743.34 -1.307847e-01
403  66745.04 -1.681334e-01
404  66746.75 -2.035950e-01
405  66748.45 -2.368509e-01
406  66750.16 -2.676048e-01
407  66751.86 -2.955859e-01
408  66753.57 -3.205505e-01
409  66755.27 -3.422851e-01
410  66756.97 -3.606074e-01
411  66758.68 -3.753685e-01
412  66760.38 -3.864538e-01
413  66762.09 -3.937841e-01
414  66763.79 -3.973158e-01
415  66765.49 -3.970416e-01
416  66767.20 -3.929898e-01
417  66768.90 -3.852244e-01
418  66770.61 -3.738436e-01
419  66772.31 -3.589794e-01
420  66774.01 -3.407952e-01
421  66775.72 -3.194849e-01
422  66777.42 -2.952705e-01
423  66779.13 -2.683996e-01
424  66780.83 -2.391429e-01
425  66782.53 -2.077919e-01
426  66784.24 -1.746554e-01
427  66785.94 -1.400566e-01
428  66787.65 -1.043302e-01
429  66789.35 -6.781847e-02
430  66791.06 -3.086863e-02
431  66792.76  6.171013e-03
432  66794.46  4.295423e-02
433  66796.17  7.914019e-02
434  66797.87  1.143967e-01
435  66799.58  1.484032e-01
436  66801.28  1.808540e-01
437  66802.98  2.114609e-01
438  66804.69  2.399557e-01
439  66806.39  2.660928e-01
440  66808.10  2.896514e-01
441  66809.80  3.104371e-01
442  66811.50  3.282838e-01
443  66813.21  3.430549e-01
444  66814.91  3.546445e-01
445  66816.62  3.629777e-01
446  66818.32  3.680116e-01
447  66820.02  3.697348e-01
448  66821.73  3.681679e-01
449  66823.43  3.633621e-01
450  66825.14  3.553991e-01
451  66826.84  3.443897e-01
452  66828.55  3.304724e-01
453  66830.25  3.138119e-01
454  66831.95  2.945969e-01
455  66833.66  2.730386e-01
456  66835.36  2.493677e-01
457  66837.07  2.238325e-01
458  66838.77  1.966959e-01
459  66840.47  1.682330e-01
460  66842.18  1.387280e-01
461  66843.88  1.084715e-01
462  66845.59  7.775763e-02
463  66847.29  4.688104e-02
464  66848.99  1.613407e-02
465  66850.70 -1.419609e-02
466  66852.40 -4.383006e-02
467  66854.11 -7.249895e-02
468  66855.81 -9.994684e-02
469  66857.51 -1.259331e-01
470  66859.22 -1.502344e-01
471  66860.92 -1.726470e-01
472  66862.63 -1.929881e-01
473  66864.33 -2.110974e-01
474  66866.03 -2.268386e-01
475  66867.74 -2.401002e-01
476  66869.44 -2.507962e-01
477  66871.15 -2.588666e-01
478  66872.85 -2.642777e-01
479  66874.56 -2.670218e-01
480  66876.26 -2.671174e-01
481  66877.96 -2.646078e-01
482  66879.67 -2.595612e-01
483  66881.37 -2.520688e-01
484  66883.08 -2.422440e-01
485  66884.78 -2.302211e-01
486  66886.48 -2.161531e-01
487  66888.19 -2.002102e-01
488  66889.89 -1.825778e-01
489  66891.60 -1.634544e-01
490  66893.30 -1.430494e-01
491  66895.00 -1.215808e-01
492  66896.71 -9.927291e-02
493  66898.41 -7.635394e-02
494  66900.12 -5.305382e-02
495  66901.82 -2.960175e-02
496  66903.52 -6.223940e-03
497  66905.23  1.685857e-02
498  66906.93  3.943203e-02
499  66908.64  6.129199e-02
500  66910.34  8.224516e-02
501  66912.05  1.021111e-01
502  66913.75  1.207240e-01
503  66915.45  1.379336e-01
504  66917.16  1.536068e-01
505  66918.86  1.676286e-01
506  66920.57  1.799027e-01
507  66922.27  1.903522e-01
508  66923.97  1.989201e-01
509  66925.68  2.055692e-01
510  66927.38  2.102822e-01
511  66929.09  2.130614e-01
512  66930.79  2.139283e-01
513  66932.49  2.129229e-01
514  66934.20  2.101029e-01
515  66935.90  2.055425e-01
516  66937.61  1.993319e-01
517  66939.31  1.915750e-01
518  66941.01  1.823890e-01
519  66942.72  1.719020e-01
520  66944.42  1.602523e-01
521  66946.13  1.475857e-01
522  66947.83  1.340549e-01
523  66949.53  1.198166e-01
524  66951.24  1.050309e-01
525  66952.94  8.985851e-02
526  66954.65  7.445971e-02
527  66956.35  5.899243e-02
528  66958.06  4.361067e-02
529  66959.76  2.846298e-02
530  66961.46  1.369104e-02
531  66963.17 -5.717010e-04
532  66964.87 -1.420117e-02
533  66966.58 -2.708376e-02
534  66968.28 -3.911727e-02
535  66969.98 -5.021168e-02
536  66971.69 -6.028972e-02
537  66973.39 -6.928741e-02
538  66975.10 -7.715433e-02
539  66976.80 -8.385373e-02
540  66978.50 -8.936259e-02
541  66980.21 -9.367140e-02
542  66981.91 -9.678385e-02
543  66983.62 -9.871639e-02
544  66985.32 -9.949764e-02
545  66987.02 -9.916766e-02
546  66988.73 -9.777716e-02
547  66990.43 -9.538651e-02
548  66992.14 -9.206481e-02
549  66993.84 -8.788874e-02
550  66995.55 -8.294145e-02
551  66997.25 -7.731136e-02
552  66998.95 -7.109094e-02
553  67000.66 -6.437551e-02
554  67002.36 -5.726197e-02
555  67004.07 -4.984761e-02
556  67005.77 -4.222893e-02
557  67007.47 -3.450050e-02
558  67009.18 -2.675385e-02
559  67010.88 -1.907651e-02
560  67012.59 -1.155104e-02
561  67014.29 -4.254170e-03
562  67015.99  2.743909e-03
563  67017.70  9.380215e-03
564  67019.40  1.559951e-02
565  67021.11  2.135470e-02
566  67022.81  2.660717e-02
567  67024.51  3.132695e-02
568  67026.22  3.549279e-02
569  67027.92  3.909211e-02
570  67029.63  4.212084e-02
571  67031.33  4.458315e-02
572  67033.04  4.649111e-02
573  67034.74  4.786417e-02
574  67036.44  4.872865e-02
575  67038.15  4.911708e-02
576  67039.85  4.906753e-02
577  67041.56  4.862282e-02
578  67043.26  4.782973e-02
579  67044.96  4.673818e-02
580  67046.67  4.540030e-02
581  67048.37  4.386965e-02
582  67050.08  4.220024e-02
583  67051.78  4.044574e-02
584  67053.48  3.865862e-02
585  67055.19  3.688934e-02
586  67056.89  3.518557e-02
587  67058.60  3.359152e-02
588  67060.30  3.214726e-02
589  67062.00  3.088819e-02
590  67063.71  2.984449e-02
591  67065.41  2.904077e-02
592  67067.12  2.849569e-02
593  67068.82  2.822177e-02
594  67070.52  2.822525e-02
595  67072.23  2.850602e-02
596  67073.93  2.905771e-02
597  67075.64  2.986783e-02
598  67077.34  3.091798e-02
599  67079.05  3.218421e-02
600  67080.75  3.363738e-02
601  67082.45  3.524373e-02
602  67084.16  3.696530e-02
603  67085.86  3.876068e-02
604  67087.57  4.058555e-02
605  67089.27  4.239348e-02
606  67090.97  4.413661e-02
607  67092.68  4.576643e-02
608  67094.38  4.723457e-02
609  67096.09  4.849354e-02
610  67097.79  4.949755e-02
611  67099.49  5.020319e-02
612  67101.20  5.057022e-02
613  67102.90  5.056220e-02
614  67104.61  5.014716e-02
615  67106.31  4.929814e-02
616  67108.01  4.799374e-02
617  67109.72  4.621852e-02
618  67111.42  4.396340e-02
619  67113.13  4.122594e-02
620  67114.83  3.801050e-02
621  67116.54  3.432837e-02
622  67118.24  3.019780e-02
623  67119.94  2.564387e-02
624  67121.65  2.069837e-02
625  67123.35  1.539952e-02
626  67125.06  9.791617e-03
627  67126.76  3.924610e-03
628  67128.46 -2.146411e-03
629  67130.17 -8.361801e-03
630  67131.87 -1.465800e-02
631  67133.58 -2.096826e-02
632  67135.28 -2.722337e-02
633  67136.98 -3.335249e-02
634  67138.69 -3.928395e-02
635  67140.39 -4.494614e-02
636  67142.10 -5.026833e-02
637  67143.80 -5.518156e-02
638  67145.50 -5.961950e-02
639  67147.21 -6.351926e-02
640  67148.91 -6.682224e-02
641  67150.62 -6.947484e-02
642  67152.32 -7.142924e-02
643  67154.03 -7.264401e-02
644  67155.73 -7.308472e-02
645  67157.43 -7.272449e-02
646  67159.14 -7.154439e-02
647  67160.84 -6.953380e-02
648  67162.55 -6.669073e-02
649  67164.25 -6.302190e-02
650  67165.95 -5.854290e-02
651  67167.66 -5.327811e-02
652  67169.36 -4.726064e-02
653  67171.07 -4.053201e-02
654  67172.77 -3.314195e-02
655  67174.47 -2.514790e-02
656  67176.18 -1.661456e-02
657  67177.88 -7.613313e-03
658  67179.59  1.778476e-03
659  67181.29  1.147815e-02
660  67182.99  2.139859e-02
661  67184.70  3.144903e-02
662  67186.40  4.153597e-02
663  67188.11  5.156413e-02
664  67189.81  6.143737e-02
665  67191.51  7.105970e-02
666  67193.22  8.033624e-02
667  67194.92  8.917423e-02
668  67196.63  9.748395e-02
669  67198.33  1.051797e-01
670  67200.04  1.121807e-01
671  67201.74  1.184119e-01
672  67203.44  1.238048e-01
673  67205.15  1.282983e-01
674  67206.85  1.318393e-01
675  67208.56  1.343831e-01
676  67210.26  1.358943e-01
677  67211.96  1.363469e-01
678  67213.67  1.357247e-01
679  67215.37  1.340217e-01
680  67217.08  1.312419e-01
681  67218.78  1.273998e-01
682  67220.48  1.225197e-01
683  67222.19  1.166362e-01
684  67223.89  1.097934e-01
685  67225.60  1.020447e-01
686  67227.30  9.345247e-02
687  67229.00  8.408732e-02
688  67230.71  7.402753e-02
689  67232.41  6.335835e-02
690  67234.12  5.217118e-02
691  67235.82  4.056275e-02
692  67237.53  2.863425e-02
693  67239.23  1.649034e-02
694  67240.93  4.238192e-03
695  67242.64 -8.013478e-03
696  67244.34 -2.015546e-02
697  67246.05 -3.207905e-02
698  67247.75 -4.367708e-02
699  67249.45 -5.484489e-02
700  67251.16 -6.548133e-02
701  67252.86 -7.548968e-02
702  67254.57 -8.477857e-02
703  67256.27 -9.326281e-02
704  67257.97 -1.008642e-01
705  67259.68 -1.075122e-01
706  67261.38 -1.131446e-01
707  67263.09 -1.177081e-01
708  67264.79 -1.211590e-01
709  67266.49 -1.234631e-01
710  67268.20 -1.245964e-01
711  67269.90 -1.245453e-01
712  67271.61 -1.233066e-01
713  67273.31 -1.208875e-01
714  67275.02 -1.173057e-01
715  67276.72 -1.125890e-01
716  67278.42 -1.067752e-01
717  67280.13 -9.991180e-02
718  67281.83 -9.205530e-02
719  67283.54 -8.327101e-02
720  67285.24 -7.363229e-02
721  67286.94 -6.321989e-02
722  67288.65 -5.212130e-02
723  67290.35 -4.042990e-02
724  67292.06 -2.824419e-02
725  67293.76 -1.566688e-02
726  67295.46 -2.804023e-03
727  67297.17  1.023591e-02
728  67298.87  2.334300e-02
729  67300.58  3.640679e-02
730  67302.28  4.931726e-02
731  67303.98  6.196576e-02
732  67305.69  7.424592e-02
733  67307.39  8.605456e-02
734  67309.10  9.729254e-02
735  67310.80  1.078656e-01
736  67312.50  1.176851e-01
737  67314.21  1.266689e-01
738  67315.91  1.347418e-01
739  67317.62  1.418363e-01
740  67319.32  1.478929e-01
741  67321.03  1.528612e-01
742  67322.73  1.566994e-01
743  67324.43  1.593753e-01
744  67326.14  1.608664e-01
745  67327.84  1.611597e-01
746  67329.55  1.602522e-01
747  67331.25  1.581507e-01
748  67332.95  1.548718e-01
749  67334.66  1.504416e-01
750  67336.36  1.448956e-01
751  67338.07  1.382785e-01
752  67339.77  1.306432e-01
753  67341.47  1.220514e-01
754  67343.18  1.125719e-01
755  67344.88  1.022811e-01
756  67346.59  9.126169e-02
757  67348.29  7.960214e-02
758  67349.99  6.739613e-02
759  67351.70  5.474165e-02
760  67353.40  4.174029e-02
761  67355.11  2.849641e-02
762  67356.81  1.511630e-02
763  67358.52  1.707385e-03
764  67360.22 -1.162266e-02
765  67361.92 -2.476673e-02
766  67363.63 -3.761912e-02
767  67365.33 -5.007637e-02
768  67367.04 -6.203804e-02
769  67368.74 -7.340752e-02
770  67370.44 -8.409276e-02
771  67372.15 -9.400698e-02
772  67373.85 -1.030694e-01
773  67375.56 -1.112056e-01
774  67377.26 -1.183487e-01
775  67378.96 -1.244392e-01
776  67380.67 -1.294259e-01
777  67382.37 -1.332660e-01
778  67384.08 -1.359258e-01
779  67385.78 -1.373806e-01
780  67387.48 -1.376153e-01
781  67389.19 -1.366241e-01
782  67390.89 -1.344111e-01
783  67392.60 -1.309897e-01
784  67394.30 -1.263830e-01
785  67396.01 -1.206235e-01
786  67397.71 -1.137529e-01
787  67399.41 -1.058217e-01
788  67401.12 -9.688919e-02
789  67402.82 -8.702252e-02
790  67404.53 -7.629667e-02
791  67406.23 -6.479375e-02
792  67407.93 -5.260238e-02
793  67409.64 -3.981709e-02
794  67411.34 -2.653761e-02
795  67413.05 -1.286815e-02
796  67414.75  1.083424e-03
797  67416.45  1.520634e-02
798  67418.16  2.938781e-02
799  67419.86  4.351386e-02
800  67421.57  5.747023e-02
801  67423.27  7.114326e-02
802  67424.97  8.442078e-02
803  67426.68  9.719300e-02
804  67428.38  1.093534e-01
805  67430.09  1.207996e-01
806  67431.79  1.314342e-01
807  67433.49  1.411657e-01
808  67435.20  1.499089e-01
809  67436.90  1.575862e-01
810  67438.61  1.641280e-01
811  67440.31  1.694730e-01
812  67442.02  1.735696e-01
813  67443.72  1.763757e-01
814  67445.42  1.778593e-01
815  67447.13  1.779990e-01
816  67448.83  1.767842e-01
817  67450.54  1.742156e-01
818  67452.24  1.703045e-01
819  67453.94  1.650739e-01
820  67455.65  1.585575e-01
821  67457.35  1.508003e-01
822  67459.06  1.418577e-01
823  67460.76  1.317956e-01
824  67462.46  1.206900e-01
825  67464.17  1.086260e-01
826  67465.87  9.569767e-02
827  67467.58  8.200736e-02
828  67469.28  6.766464e-02
829  67470.98  5.278566e-02
830  67472.69  3.749222e-02
831  67474.39  2.191082e-02
832  67476.10  6.171582e-03
833  67477.80 -9.592729e-03
834  67479.51 -2.524787e-02
835  67481.21 -4.065921e-02
836  67482.91 -5.569292e-02
837  67484.62 -7.021708e-02
838  67486.32 -8.410288e-02
839  67488.03 -9.722578e-02
840  67489.73 -1.094666e-01
841  67491.43 -1.207126e-01
842  67493.14 -1.308586e-01
843  67494.84 -1.398080e-01
844  67496.55 -1.474737e-01
845  67498.25 -1.537789e-01
846  67499.95 -1.586581e-01
847  67501.66 -1.620574e-01
848  67503.36 -1.639357e-01
849  67505.07 -1.642649e-01
850  67506.77 -1.630299e-01
851  67508.47 -1.602299e-01
852  67510.18 -1.558775e-01
853  67511.88 -1.499994e-01
854  67513.59 -1.426361e-01
855  67515.29 -1.338417e-01
856  67517.00 -1.236837e-01
857  67518.70 -1.122423e-01
858  67520.40 -9.961011e-02
859  67522.11 -8.589112e-02
860  67523.81 -7.120015e-02
861  67525.52 -5.566184e-02
862  67527.22 -3.940957e-02
863  67528.92 -2.258440e-02
864  67530.63 -5.333838e-03
865  67532.33  1.218945e-02
866  67534.04  2.982897e-02
867  67535.74  4.742583e-02
868  67537.44  6.482014e-02
869  67539.15  8.185253e-02
870  67540.85  9.836559e-02
871  67542.56  1.142053e-01
872  67544.26  1.292228e-01
873  67545.96  1.432752e-01
874  67547.67  1.562277e-01
875  67549.37  1.679543e-01
876  67551.08  1.783397e-01
877  67552.78  1.872798e-01
878  67554.48  1.946833e-01
879  67556.19  2.004724e-01
880  67557.89  2.045838e-01
881  67559.60  2.069695e-01
882  67561.30  2.075971e-01
883  67563.01  2.064505e-01
884  67564.71  2.035301e-01
885  67566.41  1.988531e-01
886  67568.12  1.924530e-01
887  67569.82  1.843802e-01
888  67571.53  1.747010e-01
889  67573.23  1.634974e-01
890  67574.93  1.508663e-01
891  67576.64  1.369188e-01
892  67578.34  1.217794e-01
893  67580.05  1.055845e-01
894  67581.75  8.848165e-02
895  67583.45  7.062773e-02
896  67585.16  5.218797e-02
897  67586.86  3.333415e-02
898  67588.57  1.424307e-02
899  67590.27 -4.905155e-03
900  67591.97 -2.392877e-02
901  67593.68 -4.264617e-02
902  67595.38 -6.087765e-02
903  67597.09 -7.844718e-02
904  67598.79 -9.518411e-02
905  67600.50 -1.109249e-01
906  67602.20 -1.255148e-01
907  67603.90 -1.388092e-01
908  67605.61 -1.506756e-01
909  67607.31 -1.609944e-01
910  67609.02 -1.696604e-01
911  67610.72 -1.765843e-01
912  67612.42 -1.816930e-01
913  67614.13 -1.849307e-01
914  67615.83 -1.862598e-01
915  67617.54 -1.856612e-01
916  67619.24 -1.831342e-01
917  67620.94 -1.786974e-01
918  67622.65 -1.723880e-01
919  67624.35 -1.642618e-01
920  67626.06 -1.543925e-01
921  67627.76 -1.428714e-01
922  67629.46 -1.298064e-01
923  67631.17 -1.153211e-01
924  67632.87 -9.955354e-02
925  67634.58 -8.265485e-02
926  67636.28 -6.478800e-02
927  67637.99 -4.612614e-02
928  67639.69 -2.685087e-02
929  67641.39 -7.150510e-03
930  67643.10  1.278174e-02
931  67644.80  3.274976e-02
932  67646.51  5.255643e-02
933  67648.21  7.200560e-02
934  67649.91  9.090410e-02
935  67651.62  1.090636e-01
936  67653.32  1.263028e-01
937  67655.03  1.424488e-01
938  67656.73  1.573394e-01
939  67658.43  1.708242e-01
940  67660.14  1.827670e-01
941  67661.84  1.930463e-01
942  67663.55  2.015571e-01
943  67665.25  2.082120e-01
944  67666.95  2.129420e-01
945  67668.66  2.156974e-01
946  67670.36  2.164483e-01
947  67672.07  2.151848e-01
948  67673.77  2.119176e-01
949  67675.47  2.066774e-01
950  67677.18  1.995150e-01
951  67678.88  1.905010e-01
952  67680.59  1.797246e-01
953  67682.29  1.672932e-01
954  67684.00  1.533312e-01
955  67685.70  1.379787e-01
956  67687.40  1.213903e-01
957  67689.11  1.037332e-01
958  67690.81  8.518606e-02
959  67692.52  6.593664e-02
960  67694.22  4.618027e-02
961  67695.92  2.611770e-02
962  67697.63  5.953074e-03
963  67699.33 -1.410813e-02
964  67701.04 -3.386124e-02
965  67702.74 -5.310449e-02
966  67704.44 -7.164112e-02
967  67706.15 -8.928138e-02
968  67707.85 -1.058445e-01
969  67709.56 -1.211607e-01
970  67711.26 -1.350727e-01
971  67712.96 -1.474376e-01
972  67714.67 -1.581284e-01
973  67716.37 -1.670351e-01
974  67718.08 -1.740661e-01
975  67719.78 -1.791490e-01
976  67721.49 -1.822316e-01
977  67723.19 -1.832823e-01
978  67724.89 -1.822905e-01
979  67726.60 -1.792666e-01
980  67728.30 -1.742424e-01
981  67730.01 -1.672701e-01
982  67731.71 -1.584224e-01
983  67733.41 -1.477914e-01
984  67735.12 -1.354878e-01
985  67736.82 -1.216397e-01
986  67738.53 -1.063914e-01
987  67740.23 -8.990187e-02
988  67741.93 -7.234297e-02
989  67743.64 -5.389786e-02
990  67745.34 -3.475901e-02
991  67747.05 -1.512619e-02
992  67748.75  4.795597e-03
993  67750.45  2.479825e-02
994  67752.16  4.467274e-02
995  67753.86  6.421132e-02
996  67755.57  8.320969e-02
997  67757.27  1.014691e-01
998  67758.97  1.187986e-01
999  67760.68  1.350168e-01
1000 67762.38  1.499540e-01
1001 67764.09  1.634538e-01
1002 67765.79  1.753748e-01
1003 67767.50  1.855924e-01
1004 67769.20  1.939995e-01
1005 67770.90  2.005083e-01
1006 67772.61  2.050508e-01
1007 67774.31  2.075797e-01
1008 67776.02  2.080687e-01
1009 67777.72  2.065131e-01
1010 67779.42  2.029298e-01
1011 67781.13  1.973570e-01
1012 67782.83  1.898537e-01
1013 67784.54  1.804995e-01
1014 67786.24  1.693934e-01
1015 67787.94  1.566527e-01
1016 67789.65  1.424125e-01
1017 67791.35  1.268231e-01
1018 67793.06  1.100496e-01
1019 67794.76  9.226931e-02
1020 67796.46  7.367037e-02
1021 67798.17  5.444955e-02
1022 67799.87  3.481026e-02
1023 67801.58  1.496038e-02
1024 67803.28 -4.889939e-03
1025 67804.99 -2.453046e-02
1026 67806.69 -4.375311e-02
1027 67808.39 -6.235418e-02
1028 67810.10 -8.013644e-02
1029 67811.80 -9.691128e-02
1030 67813.51 -1.125006e-01
1031 67815.21 -1.267390e-01
1032 67816.91 -1.394750e-01
1033 67818.62 -1.505730e-01
1034 67820.32 -1.599149e-01
1035 67822.03 -1.674010e-01
1036 67823.73 -1.729510e-01
1037 67825.43 -1.765052e-01
1038 67827.14 -1.780251e-01
1039 67828.84 -1.774933e-01
1040 67830.55 -1.749146e-01
1041 67832.25 -1.703149e-01
1042 67833.95 -1.637418e-01
1043 67835.66 -1.552638e-01
1044 67837.36 -1.449693e-01
1045 67839.07 -1.329661e-01
1046 67840.77 -1.193802e-01
1047 67842.48 -1.043542e-01
1048 67844.18 -8.804603e-02
1049 67845.88 -7.062729e-02
1050 67847.59 -5.228137e-02
1051 67849.29 -3.320155e-02
1052 67851.00 -1.358896e-02
1053 67852.70  6.349508e-03
1054 67854.40  2.640342e-02
1055 67856.11  4.636098e-02
1056 67857.81  6.601128e-02
1057 67859.52  8.514649e-02
1058 67861.22  1.035641e-01
1059 67862.92  1.210689e-01
1060 67864.63  1.374754e-01
1061 67866.33  1.526093e-01
1062 67868.04  1.663095e-01
1063 67869.74  1.784302e-01
1064 67871.44  1.888417e-01
1065 67873.15  1.974324e-01
1066 67874.85  2.041096e-01
1067 67876.56  2.088007e-01
1068 67878.26  2.114537e-01
1069 67879.96  2.120381e-01
1070 67881.67  2.105450e-01
1071 67883.37  2.069872e-01
1072 67885.08  2.013991e-01
1073 67886.78  1.938365e-01
1074 67888.49  1.843756e-01
1075 67890.19  1.731128e-01
1076 67891.89  1.601632e-01
1077 67893.60  1.456597e-01
1078 67895.30  1.297514e-01
1079 67897.01  1.126023e-01
1080 67898.71  9.438925e-02
1081 67900.41  7.530049e-02
1082 67902.12  5.553346e-02
1083 67903.82  3.529281e-02
1084 67905.53  1.478826e-02
1085 67907.23 -5.767559e-03
1086 67908.93 -2.616131e-02
1087 67910.64 -4.618119e-02
1088 67912.34 -6.561909e-02
1089 67914.05 -8.427277e-02
1090 67915.75 -1.019480e-01
1091 67917.45 -1.184604e-01
1092 67919.16 -1.336376e-01
1093 67920.86 -1.473208e-01
1094 67922.57 -1.593665e-01
1095 67924.27 -1.696481e-01
1096 67925.98 -1.780569e-01
1097 67927.68 -1.845035e-01
1098 67929.38 -1.889186e-01
1099 67931.09 -1.912538e-01
1100 67932.79 -1.914819e-01
1101 67934.50 -1.895973e-01
1102 67936.20 -1.856161e-01
1103 67937.90 -1.795760e-01
1104 67939.61 -1.715356e-01
1105 67941.31 -1.615741e-01
1106 67943.02 -1.497903e-01
1107 67944.72 -1.363018e-01
1108 67946.42 -1.212434e-01
1109 67948.13 -1.047662e-01
1110 67949.83 -8.703570e-02
1111 67951.54 -6.823026e-02
1112 67953.24 -4.853925e-02
1113 67954.94 -2.816108e-02
1114 67956.65 -7.301238e-03
1115 67958.35  1.382983e-02
1116 67960.06  3.501887e-02
1117 67961.76  5.605197e-02
1118 67963.47  7.671672e-02
1119 67965.17  9.680438e-02
1120 67966.87  1.161120e-01
1121 67968.58  1.344444e-01
1122 67970.28  1.516162e-01
1123 67971.99  1.674538e-01
1124 67973.69  1.817968e-01
1125 67975.39  1.944998e-01
1126 67977.10  2.054340e-01
1127 67978.80  2.144883e-01
1128 67980.51  2.215703e-01
1129 67982.21  2.266075e-01
1130 67983.91  2.295476e-01
1131 67985.62  2.303596e-01
1132 67987.32  2.290334e-01
1133 67989.03  2.255805e-01
1134 67990.73  2.200334e-01
1135 67992.43  2.124455e-01
1136 67994.14  2.028904e-01
1137 67995.84  1.914614e-01
1138 67997.55  1.782701e-01
1139 67999.25  1.634458e-01
1140 68000.95  1.471336e-01
1141 68002.66  1.294937e-01
1142 68004.36  1.106990e-01
1143 68006.07  9.093382e-02
1144 68007.77  7.039195e-02
1145 68009.48  4.927476e-02
1146 68011.18  2.778915e-02
1147 68012.88  6.145509e-03
1148 68014.59 -1.544437e-02
1149 68016.29 -3.676935e-02
1150 68018.00 -5.762106e-02
1151 68019.70 -7.779593e-02
1152 68021.40 -9.709718e-02
1153 68023.11 -1.153367e-01
1154 68024.81 -1.323371e-01
1155 68026.52 -1.479329e-01
1156 68028.22 -1.619728e-01
1157 68029.92 -1.743207e-01
1158 68031.63 -1.848570e-01
1159 68033.33 -1.934801e-01
1160 68035.04 -2.001067e-01
1161 68036.74 -2.046734e-01
1162 68038.44 -2.071366e-01
1163 68040.15 -2.074731e-01
1164 68041.85 -2.056804e-01
1165 68043.56 -2.017765e-01
1166 68045.26 -1.957999e-01
1167 68046.97 -1.878089e-01
1168 68048.67 -1.778812e-01
1169 68050.37 -1.661129e-01
1170 68052.08 -1.526179e-01
1171 68053.78 -1.375263e-01
1172 68055.49 -1.209834e-01
1173 68057.19 -1.031481e-01
1174 68058.89 -8.419162e-02
1175 68060.60 -6.429539e-02
1176 68062.30 -4.364963e-02
1177 68064.01 -2.245133e-02
1178 68065.71 -9.024360e-04
1179 68067.41  2.079218e-02
1180 68069.12  4.242665e-02
1181 68070.82  6.379604e-02
1182 68072.53  8.469840e-02
1183 68074.23  1.049366e-01
1184 68075.93  1.243202e-01
1185 68077.64  1.426673e-01
1186 68079.34  1.598061e-01
1187 68081.05  1.755769e-01
1188 68082.75  1.898329e-01
1189 68084.46  2.024423e-01
1190 68086.16  2.132889e-01
1191 68087.86  2.222735e-01
1192 68089.57  2.293145e-01
1193 68091.27  2.343492e-01
1194 68092.98  2.373335e-01
1195 68094.68  2.382429e-01
1196 68096.38  2.370723e-01
1197 68098.09  2.338363e-01
1198 68099.79  2.285686e-01
1199 68101.50  2.213220e-01
1200 68103.20  2.121677e-01
1201 68104.90  2.011944e-01
1202 68106.61  1.885076e-01
1203 68108.31  1.742284e-01
1204 68110.02  1.584927e-01
1205 68111.72  1.414492e-01
1206 68113.42  1.232587e-01
1207 68115.13  1.040919e-01
1208 68116.83  8.412827e-02
1209 68118.54  6.355404e-02
1210 68120.24  4.256060e-02
1211 68121.94  2.134263e-02
1212 68123.65  9.629339e-05
1213 68125.35 -2.098260e-02
1214 68127.06 -4.170040e-02
1215 68128.76 -6.186738e-02
1216 68130.47 -8.129953e-02
1217 68132.17 -9.982021e-02
1218 68133.87 -1.172617e-01
1219 68135.58 -1.334669e-01
1220 68137.28 -1.482905e-01
1221 68138.99 -1.616004e-01
1222 68140.69 -1.732788e-01
1223 68142.39 -1.832234e-01
1224 68144.10 -1.913481e-01
1225 68145.80 -1.975838e-01
1226 68147.51 -2.018790e-01
1227 68149.21 -2.041999e-01
1228 68150.91 -2.045313e-01
1229 68152.62 -2.028760e-01
1230 68154.32 -1.992548e-01
1231 68156.03 -1.937067e-01
1232 68157.73 -1.862880e-01
1233 68159.43 -1.770717e-01
1234 68161.14 -1.661472e-01
1235 68162.84 -1.536189e-01
1236 68164.55 -1.396054e-01
1237 68166.25 -1.242387e-01
1238 68167.96 -1.076621e-01
1239 68169.66 -9.002966e-02
1240 68171.36 -7.150436e-02
1241 68173.07 -5.225663e-02
1242 68174.77 -3.246278e-02
1243 68176.48 -1.230338e-02
1244 68178.18  8.038417e-03
1245 68179.88  2.837854e-02
1246 68181.59  4.853368e-02
1247 68183.29  6.832294e-02
1248 68185.00  8.756950e-02
1249 68186.70  1.061021e-01
1250 68188.40  1.237568e-01
1251 68190.11  1.403782e-01
1252 68191.81  1.558207e-01
1253 68193.52  1.699502e-01
1254 68195.22  1.826450e-01
1255 68196.92  1.937966e-01
1256 68198.63  2.033112e-01
1257 68200.33  2.111099e-01
1258 68202.04  2.171298e-01
1259 68203.74  2.213241e-01
1260 68205.45  2.236628e-01
1261 68207.15  2.241325e-01
1262 68208.85  2.227369e-01
1263 68210.56  2.194962e-01
1264 68212.26  2.144473e-01
1265 68213.97  2.076431e-01
1266 68215.67  1.991519e-01
1267 68217.37  1.890569e-01
1268 68219.08  1.774554e-01
1269 68220.78  1.644575e-01
1270 68222.49  1.501856e-01
1271 68224.19  1.347726e-01
1272 68225.89  1.183612e-01
1273 68227.60  1.011023e-01
1274 68229.30  8.315369e-02
1275 68231.01  6.467842e-02
1276 68232.71  4.584353e-02
1277 68234.41  2.681842e-02
1278 68236.12  7.773335e-03
1279 68237.82 -1.112219e-02
1280 68239.53 -2.970082e-02
1281 68241.23 -4.779895e-02
1282 68242.93 -6.525811e-02
1283 68244.64 -8.192642e-02
1284 68246.34 -9.765985e-02
1285 68248.05 -1.123235e-01
1286 68249.75 -1.257929e-01
1287 68251.46 -1.379547e-01
1288 68253.16 -1.487081e-01
1289 68254.86 -1.579653e-01
1290 68256.57 -1.656524e-01
1291 68258.27 -1.717101e-01
1292 68259.98 -1.760939e-01
1293 68261.68 -1.787743e-01
1294 68263.38 -1.797377e-01
1295 68265.09 -1.789854e-01
1296 68266.79 -1.765343e-01
1297 68268.50 -1.724164e-01
1298 68270.20 -1.666784e-01
1299 68271.90 -1.593810e-01
1300 68273.61 -1.505986e-01
1301 68275.31 -1.404186e-01
1302 68277.02 -1.289399e-01
1303 68278.72 -1.162727e-01
1304 68280.42 -1.025371e-01
1305 68282.13 -8.786171e-02
1306 68283.83 -7.238300e-02
1307 68285.54 -5.624351e-02
1308 68287.24 -3.959079e-02
1309 68288.95 -2.257594e-02
1310 68290.65 -5.352245e-03
1311 68292.35  1.192620e-02
1312 68294.06  2.910594e-02
1313 68295.76  4.603549e-02
1314 68297.47  6.256671e-02
1315 68299.17  7.855615e-02
1316 68300.87  9.386627e-02
1317 68302.58  1.083666e-01
1318 68304.28  1.219351e-01
1319 68305.99  1.344589e-01
1320 68307.69  1.458353e-01
1321 68309.39  1.559729e-01
1322 68311.10  1.647920e-01
1323 68312.80  1.722254e-01
1324 68314.51  1.782190e-01
1325 68316.21  1.827319e-01
1326 68317.91  1.857371e-01
1327 68319.62  1.872210e-01
1328 68321.32  1.871841e-01
1329 68323.03  1.856404e-01
1330 68324.73  1.826173e-01
1331 68326.44  1.781554e-01
1332 68328.14  1.723076e-01
1333 68329.84  1.651390e-01
1334 68331.55  1.567259e-01
1335 68333.25  1.471550e-01
1336 68334.96  1.365227e-01
1337 68336.66  1.249337e-01
1338 68338.36  1.125006e-01
1339 68340.07  9.934232e-02
1340 68341.77  8.558305e-02
1341 68343.48  7.135113e-02
1342 68345.18  5.677778e-02
1343 68346.88  4.199588e-02
1344 68348.59  2.713873e-02
1345 68350.29  1.233882e-02
1346 68352.00 -2.273382e-03
1347 68353.70 -1.657060e-02
1348 68355.40 -3.042988e-02
1349 68357.11 -4.373372e-02
1350 68358.81 -5.637103e-02
1351 68360.52 -6.823810e-02
1352 68362.22 -7.923950e-02
1353 68363.92 -8.928884e-02
1354 68365.63 -9.830945e-02
1355 68367.33 -1.062350e-01
1356 68369.04 -1.130099e-01
1357 68370.74 -1.185898e-01
1358 68372.45 -1.229418e-01
1359 68374.15 -1.260445e-01
1360 68375.85 -1.278883e-01
1361 68377.56 -1.284751e-01
1362 68379.26 -1.278182e-01
1363 68380.97 -1.259419e-01
1364 68382.67 -1.228814e-01
1365 68384.37 -1.186819e-01
1366 68386.08 -1.133986e-01
1367 68387.78 -1.070954e-01
1368 68389.49 -9.984466e-02
1369 68391.19 -9.172599e-02
1370 68392.89 -8.282574e-02
1371 68394.60 -7.323589e-02
1372 68396.30 -6.305312e-02
1373 68398.01 -5.237784e-02
1374 68399.71 -4.131317e-02
1375 68401.41 -2.996391e-02
1376 68403.12 -1.843554e-02
1377 68404.82 -6.833169e-03
1378 68406.53  4.739391e-03
1379 68408.23  1.618064e-02
1380 68409.94  2.739230e-02
1381 68411.64  3.828016e-02
1382 68413.34  4.875493e-02
1383 68415.05  5.873299e-02
1384 68416.75  6.813704e-02
1385 68418.46  7.689676e-02
1386 68420.16  8.494929e-02
1387 68421.86  9.223971e-02
1388 68423.57  9.872137e-02
1389 68425.27  1.043562e-01
1390 68426.98  1.091147e-01
1391 68428.68  1.129765e-01
1392 68430.38  1.159296e-01
1393 68432.09  1.179710e-01
1394 68433.79  1.191061e-01
1395 68435.50  1.193485e-01
1396 68437.20  1.187198e-01
1397 68438.90  1.172491e-01
1398 68440.61  1.149723e-01
1399 68442.31  1.119320e-01
1400 68444.02  1.081765e-01
1401 68445.72  1.037593e-01
1402 68447.43  9.873846e-02
1403 68449.13  9.317594e-02
1404 68450.83  8.713666e-02
1405 68452.54  8.068790e-02
1406 68454.24  7.389855e-02
1407 68455.95  6.683830e-02
1408 68457.65  5.957695e-02
1409 68459.35  5.218369e-02
1410 68461.06  4.472641e-02
1411 68462.76  3.727104e-02
1412 68464.47  2.988093e-02
1413 68466.17  2.261633e-02
1414 68467.87  1.553384e-02
1415 68469.58  8.685967e-03
1416 68471.28  2.120736e-03
1417 68472.99 -4.118633e-03
1418 68474.69 -9.993991e-03
1419 68476.39 -1.547246e-02
1420 68478.10 -2.052653e-02
1421 68479.80 -2.513417e-02
1422 68481.51 -2.927875e-02
1423 68483.21 -3.294904e-02
1424 68484.91 -3.613901e-02
1425 68486.62 -3.884766e-02
1426 68488.32 -4.107879e-02
1427 68490.03 -4.284068e-02
1428 68491.73 -4.414572e-02
1429 68493.44 -4.501009e-02
1430 68495.14 -4.545329e-02
1431 68496.84 -4.549774e-02
1432 68498.55 -4.516826e-02
1433 68500.25 -4.449167e-02
1434 68501.96 -4.349625e-02
1435 68503.66 -4.221129e-02
1436 68505.36 -4.066661e-02
1437 68507.07 -3.889209e-02
1438 68508.77 -3.691728e-02
1439 68510.48 -3.477090e-02
1440 68512.18 -3.248057e-02
1441 68513.88 -3.007237e-02
1442 68515.59 -2.757057e-02
1443 68517.29 -2.499740e-02
1444 68519.00 -2.237279e-02
1445 68520.70 -1.971423e-02
1446 68522.40 -1.703665e-02
1447 68524.11 -1.435236e-02
1448 68525.81 -1.167104e-02
1449 68527.52 -8.999785e-03
1450 68529.22 -6.343175e-03
1451 68530.93 -3.703435e-03
1452 68532.63 -1.080602e-03
1453 68534.33  1.527249e-03
1454 68536.04  4.123750e-03
1455 68537.74  6.713949e-03
1456 68539.45  9.303993e-03
1457 68541.15  1.190079e-02
1458 68542.85  1.451166e-02
1459 68544.56  1.714396e-02
1460 68546.26  1.980474e-02
1461 68547.97  2.250035e-02
1462 68549.67  2.523614e-02
1463 68551.37  2.801604e-02
1464 68553.08  3.084233e-02
1465 68554.78  3.371529e-02
1466 68556.49  3.663298e-02
1467 68558.19  3.959101e-02
1468 68559.89  4.258235e-02
1469 68561.60  4.559723e-02
1470 68563.30  4.862303e-02
1471 68565.01  5.164427e-02
1472 68566.71  5.464260e-02
1473 68568.41  5.759694e-02
1474 68570.12  6.048355e-02
1475 68571.82  6.327623e-02
1476 68573.53  6.594660e-02
1477 68575.23  6.846433e-02
1478 68576.94  7.079751e-02
1479 68578.64  7.291304e-02
1480 68580.34  7.477701e-02
1481 68582.05  7.635520e-02
1482 68583.75  7.761352e-02
1483 68585.46  7.851855e-02
1484 68587.16  7.903805e-02
1485 68588.86  7.914148e-02
1486 68590.57  7.880055e-02
1487 68592.27  7.798974e-02
1488 68593.98  7.668681e-02
1489 68595.68  7.487331e-02
1490 68597.38  7.253502e-02
1491 68599.09  6.966239e-02
1492 68600.79  6.625095e-02
1493 68602.50  6.230161e-02
1494 68604.20  5.782097e-02
1495 68605.90  5.282154e-02
1496 68607.61  4.732190e-02
1497 68609.31  4.134675e-02
1498 68611.02  3.492700e-02
1499 68612.72  2.809963e-02
1500 68614.43  2.090760e-02
1501 68616.13  1.339962e-02
1502 68617.83  5.629859e-03
1503 68619.54 -2.342430e-03
1504 68621.24 -1.045335e-02
1505 68622.95 -1.863487e-02
1506 68624.65 -2.681542e-02
1507 68626.35 -3.492052e-02
1508 68628.06 -4.287348e-02
1509 68629.76 -5.059618e-02
1510 68631.47 -5.800979e-02
1511 68633.17 -6.503568e-02
1512 68634.87 -7.159618e-02
1513 68636.58 -7.761554e-02
1514 68638.28 -8.302068e-02
1515 68639.99 -8.774218e-02
1516 68641.69 -9.171503e-02
1517 68643.39 -9.487952e-02
1518 68645.10 -9.718198e-02
1519 68646.80 -9.857557e-02
1520 68648.51 -9.902095e-02
1521 68650.21 -9.848693e-02
1522 68651.92 -9.695100e-02
1523 68653.62 -9.439982e-02
1524 68655.32 -9.082962e-02
1525 68657.03 -8.624648e-02
1526 68658.73 -8.066657e-02
1527 68660.44 -7.411619e-02
1528 68662.14 -6.663180e-02
1529 68663.84 -5.825989e-02
1530 68665.55 -4.905676e-02
1531 68667.25 -3.908815e-02
1532 68668.96 -2.842885e-02
1533 68670.66 -1.716211e-02
1534 68672.36 -5.378994e-03
1535 68674.07  6.822351e-03
1536 68675.77  1.933755e-02
1537 68677.48  3.205692e-02
1538 68679.18  4.486645e-02
1539 68680.88  5.764886e-02
1540 68682.59  7.028475e-02
1541 68684.29  8.265370e-02
1542 68686.00  9.463552e-02
1543 68687.70  1.061114e-01
1544 68689.40  1.169652e-01
1545 68691.11  1.270846e-01
1546 68692.81  1.363622e-01
1547 68694.52  1.446970e-01
1548 68696.22  1.519952e-01
1549 68697.93  1.581714e-01
1550 68699.63  1.631494e-01
1551 68701.33  1.668636e-01
1552 68703.04  1.692593e-01
1553 68704.74  1.702935e-01
1554 68706.45  1.699359e-01
1555 68708.15  1.681689e-01
1556 68709.85  1.649883e-01
1557 68711.56  1.604034e-01
1558 68713.26  1.544371e-01
1559 68714.97  1.471258e-01
1560 68716.67  1.385196e-01
1561 68718.37  1.286815e-01
1562 68720.08  1.176871e-01
1563 68721.78  1.056243e-01
1564 68723.49  9.259215e-02
1565 68725.19  7.870034e-02
1566 68726.89  6.406812e-02
1567 68728.60  4.882326e-02
1568 68730.30  3.310091e-02
1569 68732.01  1.704231e-02
1570 68733.71  7.935317e-04
1571 68735.42 -1.549597e-02
1572 68737.12 -3.167471e-02
1573 68738.82 -4.759073e-02
1574 68740.53 -6.309299e-02
1575 68742.23 -7.803293e-02
1576 68743.94 -9.226589e-02
1577 68745.64 -1.056526e-01
1578 68747.34 -1.180607e-01
1579 68749.05 -1.293657e-01
1580 68750.75 -1.394528e-01
1581 68752.46 -1.482178e-01
1582 68754.16 -1.555682e-01
1583 68755.86 -1.614242e-01
1584 68757.57 -1.657197e-01
1585 68759.27 -1.684030e-01
1586 68760.98 -1.694372e-01
1587 68762.68 -1.688012e-01
1588 68764.38 -1.664892e-01
1589 68766.09 -1.625117e-01
1590 68767.79 -1.568949e-01
1591 68769.50 -1.496809e-01
1592 68771.20 -1.409273e-01
Warning message:
In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
#+end_example

*** Fe count
:PROPERTIES:
:CREATED:  [2023-09-19 Tue 21:14]
:END:
From [cite:@Westerhold2008].

overview of all supplementary data on PANGAEA
https://doi.pangaea.de/10.1594/PANGAEA.667122

Title says "astronomical calibration of the Paleocene time".

- depth sed [m] from 234 m to 295 m
- depth revised [m] from 265 m to 330 m

#+begin_src R :results graphics file :file imgs/ODP208_1267_Fe.png :width 800
  ODP208_1267_Fe <- pangaear::pg_data("10.1594/PANGAEA.666120")

  ## ODP208_1267_magstrat <- pangaear::pg_data("10.1594/PANGAEA.666515")

  dat <- ODP208_1267_Fe[[1]]$data |>
    tidylog::filter(`Depth revised [m]` > 319.46) |>
    mutate(var = scale(`Fe count [#]`)[, 1], #log(`Fe count [#]`),
           scl_ma = scale(var -
                          slider::slide_mean(var,
                                             before = 5, after = 5))[, 1])

  dat |>
    ggplot(aes(x = `Depth revised [m]`, y = var)) +
    geom_line() #+
    ## geom_line(aes(y = scl_ma))
#+end_src

#+caption: ODP 208 Site 1267 Fe data from [cite:@Westerhold2008].
#+RESULTS:
[[file:imgs/ODP208_1267_Fe.png]]

#+begin_src R :results graphics file :file imgs/ODP208_1267_Fe_wavelet.png :width 800
  par(oma = c(0, 0, 0, 1), mar = c(5, 4, 4, 5) + .1)
  dat |>
    select(depth = `Depth revised [m]`,
           ## scl_ma
           var
           ) |>
    ## filter(depth <= 324.59) |>
    ## filter(depth >= 324.59 & depth <= 328.96) |>
    astrochron::linterp(genplot = FALSE) |>
    biwavelet::wt(sig.level = .95) |>
    plot(plot.cb = TRUE,
         plot.phase = FALSE,
         xlab = "Depth (rmcd)",
         main = "Fe [#]",
         fill.cols = viridis::inferno(n = 64))
#+end_src

#+RESULTS:
[[file:imgs/ODP208_1267_Fe_wavelet.png]]

*** CaCO3 dataset
:PROPERTIES:
:CREATED:  [2023-09-20 Wed 09:06]
:END:
From [cite:@Sexton2011].

Too young!

- depth sed [m] from 154 m to 163 m.
- depth comp [mcd] from to 168 m to 180 m
- age [ka BP] from 47800 ka to 50002 ka.

#+begin_src R :exports none
  ODP208_1267_CaCO3 <- pangaear::pg_data("10.1594/PANGAEA.763155")
  ODP208_1267_CaCO3[[1]]$data |>
    ggplot(aes(x = `Depth comp [mcd]`, y = `CaCO3 [%]`)) +
    geom_line()
#+end_src

#+RESULTS:
: Downloading 1 datasets from 10.1594/PANGAEA.763155
: Processing 1 files

** IODP Exp 342 Site U1403A,B
:PROPERTIES:
:CREATED:  [2023-08-31 Thu 15:29]
:END:
[cite:@Batenburg2018]
- d18O data between 66 Ma and 68.8 Ma
- XRF ln(Fe/Ca) data between 66.0 Ma and 68.8 Ma

That corresponds to Ma_{405}1 to Ma_{405}7

+I haven't looked at this beyond getting the data and creating below two plots!+
I've now quickly created the spectra for both, but haven't looked at it in more detail! Once I've developed my functions well this should be quick to try as well!

Very low sedimentation rate however, about 1 cm/kyr.
*** d13C and d18O
:PROPERTIES:
:CREATED:  [2023-10-02 Mon 13:49]
:END:
#+begin_src R :results output graphics file :file imgs/342-U1403A_d18O_Batenburg2018-fig7.png :width 900 :height 500
  IODP342_U1403A <- pangaear::pg_data("10.1594/PANGAEA.875741")[[1]]
  dat <- IODP342_U1403A$data

  dat |>
    ggplot(aes(x = `Depth comp r [rmcd]`, y = `δ18O carb [‰ PDB]`)) +
    geom_line()
#+end_src

#+caption: IODP 343 Site U1403B d18O data (d13C also available!) from [cite:@Batenburg2018].
#+RESULTS:
[[file:imgs/342-U1403A_d18O_Batenburg2018-fig7.png]]

**** spectral analysis of the d18O data
:PROPERTIES:
:CREATED:  [2023-10-02 Mon 13:52]
:END:
#+begin_src R :results output graphics file :file imgs/IODP342_U1403_d18O_spec.png :width 800
  dat |>
    mutate(ref = "Batenburg et al., 2018") |>
    spectral_analysis(nest = "ref",
                      x = `Depth comp r [rmcd]`,
                      y = `δ18O carb [‰ PDB]`) |>
    plot_spectrum() +
    labs(title = "IODP 342 U1403 δ18O")
#+end_src

#+caption: Spectral analysis of d18O data.
#+RESULTS:
[[file:imgs/IODP342_U1403_d18O_spec.png]]

*** XRF data
:PROPERTIES:
:CREATED:  [2023-10-02 Mon 13:49]
:END:
#+begin_src R :results output graphics file :file imgs/342-U1403A_FeCa_Batenburg2018-fig6.png :width 900 :height 500
  IODP342_U1403A_XRF <- pangaear::pg_data("10.1594/PANGAEA.875742")[[1]]

  dat <- IODP342_U1403A_XRF$data

  bp <- dat |>
    mutate(FeCa = log(`Fe count [#]` / `Ca count [#]`)) |>
    select(depth = `Depth comp r [rmcd]`, FeCa) |>
    astrochron::linterp(genplot = FALSE) |>
    astrochron::bandpass(flow = 1 / 3.4, fhigh = 1 / 6.8)

  # copied from [cite:@Batenburg2018] table 2
  agem <- tibble::tribble(
                     ~ `Depth comp r [rmcd]`, ~ age_ma, ~ sed_rate,
                     247.700, 66.04, NA_real_,
                     251.040, 66.374, 1.00,
                     254.960, 66.782, 0.96,
                     259.205, 67.192, 1.04,
                     263.695, 67.585, 1.14,
                     268.365, 67.986, 1.16,
                     271.680, 68.383, 0.84,
                     274.635, 68.787, 0.73,
                     275.000, 68.837, 0.73
                   )

  dat |>
    ggplot(aes(x = `Depth comp r [rmcd]`, y = log(`Fe count [#]` / `Ca count [#]`))) +
    geom_line() +
    geom_line(aes(x = depth, y = FeCa), data = bp, colour = "red") +
    ## annotate("text", x = 247.7, y = 2, label = "about 66 Ma") +
    ## annotate("text", x = 275, y = 2, label = "about 68.5 Ma") +
    geom_label(aes(label = age_ma, y = 1.9), data = agem) +
    labs(title = "IODP342 U1403A XRF")
#+end_src

#+caption: IODP 342 Site U1403 XRF data from [cite:@Batenburg2018].
#+RESULTS:
[[file:imgs/342-U1403A_FeCa_Batenburg2018-fig6.png]]

**** Fe/Ca spec
:PROPERTIES:
:CREATED:  [2023-10-02 Mon 13:55]
:END:
#+begin_src R :results output graphics file :file imgs/IODP342_U1403_logFeCa_spec.png :width 800
  dat |>
    mutate(ref = "Batenburg et al., 2018") |>
    mutate(FeCa = log(`Fe count [#]` / `Ca count [#]`)) |>
    spectral_analysis(nest = "ref",
                      x = `Depth comp r [rmcd]`,
                      y = FeCa) |>
    plot_spectrum() +
    labs(title = "IODP 342 U1403 log(Fe/Ca)")
#+end_src

#+RESULTS:
[[file:imgs/IODP342_U1403_logFeCa_spec.png]]


** [#A] Zumaia and Sopelana
:PROPERTIES:
:CREATED:  [2023-08-31 Thu 15:37]
:VISIBILITY: content
:CUSTOM_ID: sec:Zumaia-Sopelana
:END:
[cite:@Batenburg2012]
Ma_{405}1 to Ma_{405}9
66 Ma to ~70 Ma

Has some turbidites according to [[id:107d5e85-9f0d-4193-941d-7b8887fa4d28][Frits Hilgen]].

[cite:@Batenburg2014] has Sopelana expansion downwards.

*** Read the data
From the supplementary info of [cite:@Batenburg2012;@Batenburg2014].

#+begin_src R :exports both
  # Batenburg et al., 2012
  Zumaia <- readxl::read_excel("dat/Batenburg2012/1-s2.0-S0012821X12005742-mmc2.xls") |>
    rename(depth = Depth,
           MS = `Magentic susceptibility (SI)`, # notice typo! XD
           Lstar = `Reflectance, L* (%)`,
           d13C = `δ13C (‰VPDB) outliers in italics`) |>
    mutate(depth = depth / 100) # convert from cm to m?

  # Batenburg et. al., 2014
  Sopelana <- readr::read_csv("dat/Batenburg2014/18696_2.csv",
                                 skip = 2,
                                 col_names = c("depth", "MS", "", "depth_comp_mm", "Lstar"),
                                 col_select = c(1, 2, 5))
  # I have double-checked that the depth_comp_m and depth_comp_mm are identical throughout
  ## Sopelana |>
  ## mutate(same = depth_comp_m == depth_comp_mm) |>
  ## filter(!same)

  # assemble them all in a single df
  comp <- Zumaia |>
    pivot_longer(MS:d13C, names_to = "proxy") |>
    mutate(comment = if_else(proxy == "d13C", comment, NA_character_)) |>
    tidylog::filter(is.na(comment) | comment != "outlier") |>
    tidylog::filter(!is.na(value)) |>
    mutate(site = "Zumaia", .before = depth) |>
    bind_rows(
      Sopelana |>
      pivot_longer(MS:Lstar, names_to = "proxy") |>
      mutate(site = "Sopelana")
    ) |>
    tidylog::select(site, proxy, depth, value, comment)
#+end_src

#+RESULTS:
#+begin_example
-/                                                                                                       /                                                                                                       -                                                                                                       > > > + + + indexing 18696_2.csv [===============================================================] 2.05GB/s, eta:  0s                                                                                                                                            New names:
• `` -> `...3`
Rows: 629 Columns: 3
── Column specification ─────────────────────────────────────────────────────────────────────────────────
Delimiter: ","
dbl (3): depth, MS, Lstar

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
filter: removed 5 rows (<1%), 4,159 rows remaining
filter: removed 1,045 rows (25%), 3,114 rows remaining
select: columns reordered (site, proxy, depth, value, comment)
#+end_example

*** Age Model
:PROPERTIES:
:CREATED:  [2023-09-25 Mon 11:01]
:END:
Load the identified 405-kyr minima from the field of [cite:@Batenburg2012;@Batenburg2014].

Note that I had to read the minima for Sopelana from the figure, so they may be a bit less accurate.

#+begin_src R :exports both
  agem <- read_csv("dat/Batenburg2012/405_minima.csv")

  # NOTE: original is only the age model for Zumaia! We add the Sopelana
  # age model by reading some values from their figure.
  agem_simple <- agem |>
    mutate(n = 0:(n() - 1), .before = comment, .by = minmax) |>
    filter(minmax == "minimum") |>
    select(-strat_top, -minmax, -desc) |>
    mutate(site = "Zumaia") |>
    # let's add the age model for Sopelana
    # copied manually by reading figure 3 in Batenburg et al., 2014!
    bind_rows(
      tribble(
        ~ n, ~ strat_bot,
        10, 149,
        11, 160,
        12, 171,
        13, 183) |>
      mutate(site = "Sopelana")
    ) #|>

  agem_sol <- agem_simple |>
    ## mutate(age = n * 405)
    mutate(sol = list(c("La10b", "La10c", "ZB18a", "ZB20a"))) |>
    unnest(cols = c(sol)) |>
    nest(.by = sol) |>
    # TODO: this is still wrong, strat = 0 = K/Pg boundary but in Batenburg
    # et al., 2012 they list 0 as "close to" the first 405 kyr minimum.
    mutate(age = case_when(sol == "ZB18a" ~
                             sln_peaks |>
                             filter(sln == "ZB18a", age >= 65.9 * 1e3 - 200) |>
                             arrange(age) |>
                             slice(1:14) |>
                             pull(age) |> list(),
                           sol == "ZB20a" ~
                             sln_peaks |>
                             filter(sln == "ZB20a", age >= 65.9 * 1e3 - 200) |>
                             arrange(age) |>
                             slice(1:14) |>
                             pull(age) |> list(),
                           sol == "La10b" ~
                             sln_peaks |>
                             filter(sln == "La10b", age >= 65.9 * 1e3 - 200) |>
                             arrange(age) |>
                             slice(1:14) |>
                             pull(age) |> list(),
                           sol == "La10c" ~
                             sln_peaks |>
                             filter(sln == "La10c", age >= 65.9 * 1e3 - 200) |>
                             arrange(age) |>
                             slice(1:14) |>
                             pull(age) |> list(),
                           TRUE ~ list(NA_real_))) |>
    unnest(cols = c(data, age)) |>
    arrange(sol, n) |>
    mutate(depth_diff = abs(strat_bot - lead(strat_bot)),
           age_diff = abs(age - lead(age)), .by = sol)

  tiepoint_uncertainty <- seq(-4, 4, .5)

  agem_tie <- agem_sol |>
    mutate(tie_err = list(tiepoint_uncertainty)) |>
    unnest(tie_err) |>
    mutate(depth = strat_bot + tie_err)
    ## filter(!(strat_bot == 0 & tie_err != 0))
  # prepend -1 cycle based on very rough estimate so that d13C data can be interpolated
  ## agem_simple <- bind_rows(
  ##   tibble(n = -1, comment = NA_character_, strat_bot = -16, site = "Zumaia", age = -405),
  ##   agem_simple
  ## )
  # I no longer do this, just use Hmisc::approxExtrap in stead.
#+end_src

#+RESULTS:
: indexing 405_minima.csv [==========================================================] 232.18MB/s, eta:  0s                                                                                                                                            Rows: 20 Columns: 5
: ── Column specification ─────────────────────────────────────────────────────────────────────────────────
: Delimiter: ","
: chr (3): comment, minmax, desc
: dbl (2): strat_bot, strat_top
:
: ℹ Use `spec()` to retrieve the full column specification for this data.
: ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.

*** COMMENT make a plot
:PROPERTIES:
:CREATED:  [2023-09-27 Wed 18:49]
:END:
#+begin_src R :results output graphics file :file imgs/Zumaia_Batenburg2012.png :width 900 :height 500
  library(patchwork)

  (Zumaia |>
    ggplot(aes(x = depth, y = MS)) +
    geom_line()) /
  (Zumaia |>
    ggplot(aes(x = depth, y = Lstar)) +
    geom_line()) /
  (Zumaia |>
    filter(!is.na(d13C)) |>
    ggplot(aes(x = depth, y = d13C)) +
   geom_line())

  (Sopelana |>
     ggplot(aes(x = depth, y = magsus)) +
   geom_line()) /
    (Sopelana |>
     ggplot(aes(x = depth, y = Lstar)) +
     geom_line())

  comp |>
    ggplot(aes(x = depth, y = value, colour = site)) +
    facet_grid(rows = vars(proxy), scales = "free_y") +
    geom_line() +
    geom_smooth()
    ## geom_smooth(aes(group = "all"))
#+end_src

#+RESULTS:
[[file:imgs/Zumaia_Batenburg2012.png]]

*** COMMENT simple taner filters
:PROPERTIES:
:CREATED:  [2023-09-22 Fri 14:18]
:END:
Like [cite:@Husson2011].
#+begin_src R :results output graphics file :file imgs/Zumaia_filters.png :width 900 :height 500
  f100 <- Zumaia |>
    select(depth, Lstar) |>
    filter(!is.na(Lstar)) |>
    astrochron::linterp(genplot = FALSE) |>
    astrochron::taner(flow = 0, fhigh = 1) |>
    as_tibble()

  f405 <- Zumaia |>
    select(depth, Lstar) |>
    filter(!is.na(Lstar)) |>
    astrochron::linterp(genplot = FALSE) |>
    astrochron::taner(flow = 0, fhigh = .4) |>
    as_tibble()

  (Zumaia |>
   filter(!is.na(d13C)) |>
    ggplot(aes(x = depth, y = d13C)) +
    geom_line() + labs(title = "Zumaia")) /
  (Zumaia |>
   ggplot(aes(x = depth, y = Lstar)) +
   geom_line(alpha = .3, colour = "darkblue") +
   geom_line(data = f100, colour = "skyblue") +
   geom_line(data = f405)) /
  (Zumaia |>
    ggplot(aes(x = depth, y = MS)) +
    geom_line())
#+end_src

#+RESULTS:
[[file:imgs/Zumaia_filters.png]]

*** subtract the long-term trends
:PROPERTIES:
:CREATED:  [2023-09-22 Fri 14:18]
:END:
We have several ways of subtracting the long-term trends prior to doing spectral analysis. Below is a table to summarize them:

#+name: tab:detrend_types
#+caption: The different detrend methods to remove long-term trends prior to spectral analysis.
| name        | method                                                                              |
|-------------+-------------------------------------------------------------------------------------|
| ~value~       | The raw value. Often I still remove a linear trend from the spectral analysis call. |
| ~scl~         | The scaled (or normalized = mean subtracted, divided by standard deviation) value.  |
| ~lin_scl~     | Remove linear trends from red/white intervals separately, then scale the result.    |
| ~gam_det~     | Subtract a gam from the value, then scale the result.                               |
| ~lin_gam_det~ | First do ~lin_scl~ from above, then do ~gam_det~.                                       |

**** This just subtracts a gam from the raw data
:PROPERTIES:
:CREATED:  [2023-09-25 Mon 15:35]
:END:
#+begin_src R
  smooth_basic <- comp |>
    ## pivot_wider() |>
    nest(.by = c(proxy, site)) |> # nest_by is different!!
    mutate(
      gam = map(data,
                     ~ mgcv::gam(value ~ s(depth, bs = "cs"),
                                 method = "REML",
                                 data = .))) |>
    mutate(
      # TODO: this outputs a <dbl[1d]> rather than a simple <dbl>
      gam_pred = map(gam, predict),
    ) |>
    select(-gam) |>
    unnest(cols = c(data, gam_pred)) |>
    mutate(det = scale(value - gam_pred)[, 1], .by = c(proxy, site))
#+end_src

#+RESULTS:

**** SOME COMMENT Do `notch' filtering of everything >2 Myr
:PROPERTIES:
:CREATED:  [2023-11-21 Tue 11:14]
:END:
:LOGBOOK:
- State "SOME"       from              [2023-11-21 Tue 11:20]
:END:
Like they do in [cite:@Batenburg2012]
#+begin_src R :eval never
  comp |>
    nest(.by = c(proxy, site)) |>
    mutate(
      notch = map(data,
                  ~ . |>
                    select(depth, value) |>
                    astrochron::linterp(genplot = FALSE) |>
                    astrochron::lowpass())) |>
    mutate(
      gam_pred = map(gam, predict),
    )

#+end_src
**** subtract red/white interval means and then do a gam for the whole record
:PROPERTIES:
:CREATED:  [2023-09-25 Mon 15:35]
:END:
We have to be careful of the white/red intervals in the record!
So instead of fitting a simple gam through the whole record, we fit +one for+ a line for each coloured interval separately.

This is still a bit iffy, not sure if it is the best approach for detrending\dots

#+begin_src R
  smooth <- comp |>
    mutate(colour = case_when(
             depth < 0 ~ "white1",
             depth > 0 & depth <= 58.59 ~ "red1",
             depth > 58.59 & depth <= 59 ~ "pink1",
             depth > 59 & depth <= 82.75 ~ "white2",
             depth > 82.75 & depth <= 87.8 ~ "pink2",
             depth > 87.8 & depth <= 108.5 ~ "red2",
             depth > 108.5 & depth <= 109.8 ~ "pink3",
             depth > 109.8 ~ "white3",
             TRUE ~ NA_character_)) |>
    ## mutate(mean_colour = mean(value), .by = c(site, proxy, colour)) |>
    ## mutate(dec = value - mean_colour) |>
    ## pivot_wider() |>
    # first calculate a lm for each slice of colour interval
    nest(.by = c(proxy, site, colour)) |> # nest_by is different!!
    mutate(
      lim = map(data, ~ lm(value ~ depth, data = .x)),
      lin_pred = map(lim, predict)) |>
    select(-lim) |>
    unnest(c(data, lin_pred)) |>
    mutate(lin = value - lin_pred) |>
    nest(.by = c(proxy, site)) |> # nest_by is different!!
    mutate(
      gamm = map(data,
                ## ~ loess(dec ~ depth, data = ., span = .9)
                ~ mgcv::gam(lin ~ s(depth, bs = "cs"),
                            method = "REML",
                            data = .)),
      gam_pred = map_dbl(gamm, predict)
    ) |>
    select(-gamm) |>
    unnest(cols = c(data, gam_pred)) |>
    mutate(
      lin_scl = scale(lin)[, 1],
      gam = lin - gam_pred,
      det = scale(gam)[, 1],
      .by = c(proxy, site))
#+end_src

#+RESULTS:
: Error in `mutate()`:
: ℹ In argument: `lin = value - lin_pred`.
: Caused by error:
: ! object 'value' not found
: Run `rlang::last_trace()` to see where the error occurred.

**** combine the trend removal dataframes into smooth_pred
:PROPERTIES:
:CREATED:  [2023-09-28 Thu 14:26]
:END:
#+begin_src R :exports none
  smooth_all <- smooth_basic |>
    mutate(scl = scale(value)[, 1], .before = gam_pred, .by = c(proxy, site)) |>
    rename(gam_det = det) |>
    tidylog::left_join(
               smooth |>
               rename(lin_gam_pred = gam_pred,
                      lin_gam = gam,
                      lin_gam_det = det)) |>
    pivot_longer(c(value, scl, lin_scl, gam_pred, gam_det, lin_pred, lin_gam_pred, lin_gam_det),
                 names_to = "detrend_type", values_to = "value") #|>
    ## ggplot(aes(x = depth, y = value, colour = preprocess_type, group = paste(proxy, site, preprocess_type))) + geom_line() +
    ## facet_grid(rows = vars(proxy), scales = "free_y")

  smooth_pred <- smooth_all |>
    filter(detrend_type %in% c("value", "scl", "lin_scl", "gam_det", "lin_gam_det"))
#+end_src

#+RESULTS:
: Joining with `by = join_by(proxy, site, depth, value, comment)`
: left_join: added 7 columns (colour, lin_pred, lin, lin_gam_pred, lin_scl, …)
: rows only in x       0
: rows only in y  (    0)
: matched rows     4,372
:                 =======
: rows total       4,372

*** COMMENT figures to inspect if it worked
:PROPERTIES:
:CREATED:  [2023-11-14 Tue 13:26]
:END:
**** did the linear trend removal work?
:PROPERTIES:
:CREATED:  [2023-09-26 Tue 10:57]
:END:
***** lines
#+begin_src R :results output graphics file :file imgs/Zumaia_linear-trend-removal.png :width 800
  smooth |>
    ggplot(aes(x = depth, y = value)) +
    geom_line() +
    facet_grid(rows = vars(proxy), scales = "free_y") +
    geom_line(aes(y = lin_pred, group = paste(site, colour)), colour = "red", linewidth = 2)
#+end_src

#+caption: Zumaia/Sopelana MS/L*/d13C linear trend removal.
#+RESULTS:
[[file:imgs/Zumaia_linear-trend-removal.png]]

***** gam
#+begin_src R :results output graphics file :file imgs/Zumaia_gam-trend-removal.png :width 800
  smooth |>
    ggplot(aes(x = depth, y = lin)) +
    geom_line() +
    facet_grid(rows = vars(proxy), scales = "free_y") +
    geom_line(aes(y = gam_pred, group = paste(site)), colour = "red", linewidth = 2)
#+end_src

#+caption: Zumaia/Sopelana MS/L*/d13C gam trend removal (after linear trend removal).
#+RESULTS:
[[file:imgs/Zumaia_gam-trend-removal.png]]

***** detrended result
#+begin_src R :results output graphics file :file imgs/Zumaia_linear-gam-trend-removal.png :width 800
  smooth |>
    ggplot(aes(x = depth, y = det)) +
    geom_line(aes(y=lin_scl)) +
    geom_line(colour = "red") +
    facet_grid(rows = vars(proxy), scales = "free_y") #+
    ## geom_line(aes(y = gam_pred, group = paste(site)), colour = "red", linewidth = 2)
#+end_src

#+caption: Zumaia/Sopelana MS/L*/d13C detrended record (after linear trend and gam removal).
#+RESULTS:
[[file:imgs/Zumaia_linear-gam-trend-removal.png]]


***** COMMENT gam with custom knots around the colour transitions
:PROPERTIES:
:CREATED:  [2023-09-25 Mon 15:43]
:END:
#+begin_src R :eval never
  smooth_k <- comp |>
    nest(.by = c(proxy, site)) |> # nest_by is different!!
    mutate(
      gam = map(data,
                     ~ mgcv::gam(value ~ s(depth, bs = "cs"),
                                 method = "REML",
                                 k = 6,
                                 knots = c(-5, 0, 58.75, 85, 109, 145),
                                 data = .))) |>
    mutate(
      gam_pred = map(gam, predict),
    ) |>
    select(-gam) |>
    unnest(cols = c(data, gam_pred)) |>
    mutate(det = scale(value - gam_pred)[, 1], .by = c(proxy, site))
#+end_src

#+RESULTS:
: Error in `mutate()`:
: ℹ In argument: `gam = map(...)`.
: Caused by error in `map()`:
: ℹ In index: 1.
: Caused by error in `data[[txt]]`:
: ! subscript out of bounds
: Run `rlang::last_trace()` to see where the error occurred.

*** COMMENT plot long-term trend removal
:PROPERTIES:
:CREATED:  [2023-09-25 Mon 14:30]
:END:
#+begin_src R :results output graphics file :file imgs/Zumaia_long-term-trend.png :width 900 :height 500
  (smooth |>
   filter(site == "Zumaia", proxy == "MS") |>
   ggplot(aes(x = depth, y = dec)) +
   geom_line(aes(y = value), colour = "gray") +
   ## geom_line(aes(y = det), smooth_basic) +
   geom_line(colour = "gray4") +
   geom_line(aes(y = mean_colour), colour = "darkgreen") +
   ## geom_smooth(method = "loess", span = .05) +
   geom_line(aes(y = gam_pred, group = site), colour = "blue", linewidth = 2) +
   geom_line(aes(y = gam_pred, group = site), linewidth = 2,
             colour = "red",
             data = smooth_basic |> filter(site == "Zumaia", proxy == "MS")) +
   facet_grid(rows = vars(proxy), scales = "free_y") #+
    ## geom_vline(xintercept = c(59, 85, 109)) +
    ## annotate("rect",
    ##          xmin = c(-5, 0, 58.75, 85, 109),
    ##          xmax = c(0, 59, 85, 109, 145),
    ##          ymin = 0, ymax = 1,
    ##          fill = c("gray", "red", "gray", "red", "gray"),
    ##          alpha = .2
   ##          )
   ) /
  (smooth |>
   filter(site == "Zumaia", proxy == "MS") |>
   ggplot(aes(x = depth, y = det)) +
   geom_line() +
   ## geom_smooth(method = "loess", span = .05) +
   facet_grid(rows = vars(proxy), scales = "free_y") +
   ## geom_vline(xintercept = c(59, 85, 109)) +
   annotate("rect",
            xmin = c(-5, 0, 59, 85, 109),
            xmax = c(0, 59, 85, 109, 145),
            ymin = 0, ymax = 1,
            fill = c("gray", "red", "gray", "red", "gray"),
            alpha = .2
            ))
#+end_src

#+RESULTS:
[[file:imgs/Zumaia_long-term-trend.png]]

*** analysis in the depth domain
:PROPERTIES:
:CREATED:  [2023-09-29 Fri 13:11]
:END:
**** spectral analysis
:PROPERTIES:
:CREATED:  [2023-10-03 Tue 16:05]
:END:
***** MTM spectra
:PROPERTIES:
:CREATED:  [2023-09-25 Mon 10:56]
:END:
#+begin_src R
  specs_fancy <- smooth_pred |>
    spectral_analysis(nest = c("proxy", "site", "detrend_type"),
                      x = depth, y = value)
#+end_src

#+RESULTS:

***** FFT periodogram
:PROPERTIES:
:CREATED:  [2023-11-16 Thu 14:47]
:END:
#+begin_src R
  specs_fft <- smooth_pred |>
    nest(.by = c("proxy", "site", "detrend_type")) |>
    mutate(fft = map(data,
                      ~ . |>
                        select(depth, value) |>
                        astrochron::linterp(genplot = FALSE, verbose = FALSE) |>
                        astrochron::periodogram(genplot = F, verbose = F, output = 1) |>
                        as_tibble()
                        )) |>
    select(-data) |>
    unnest(cols = c(fft)) |>
    rename(freq = Frequency, amp = Amplitude, power = Power, phase = Phase)
#+end_src

#+RESULTS:

***** Blackman-Tukey
:PROPERTIES:
:CREATED:  [2023-11-16 Thu 14:13]
:END:
:LOGBOOK:
- State "SOME"       from              [2023-11-16 Thu 15:01]
:END:
#+begin_src R
  source("https://github.com/jrevenaugh/TSAUMN2/raw/main/R/spec.bt.R")
  source("https://github.com/jrevenaugh/TSAUMN2/raw/main/R/ttools.R")

  ## spec_bt <- smooth_pred |>
  ##   filter(proxy == "MS", site == "Zumaia", detrend_type == "value") |>
  ##   select(depth, value) |>
  ##   astrochron::linterp(genplot = FALSE, verbose = FALSE) |>
  ##   pull(value) |>
  ##   spec.bt(plot = FALSE)
  ##   ## select(c("freq", "spec"))

  specs_bt <- smooth_pred |>
    nest(.by = c("proxy", "site", "detrend_type")) |>
    mutate(bt = map(data,
                      ~ . |>
                        select(depth, value) |>
                        astrochron::linterp(dt = .5, genplot = FALSE, verbose = FALSE) |>
                        pull(value) |>
                        spec.bt(deltat = .5, plot = FALSE))) |>
    select(-data) |>
    mutate(freq = map(bt, pluck, "freq"),
           spec = map(bt, pluck, "spec")) |>
    select(-bt) |>
    unnest(cols = c(freq, spec))
#+end_src

#+RESULTS:

***** use MTLS on the record
:PROPERTIES:
:CREATED:  [2023-11-16 Thu 12:01]
:END:
MTLS is the Multi-taper Averaged Lomb-Scargle periodogram of (un)evenly spaced data. Available on [[https://github.com/jrevenaugh/TSAUMN2/blob/main/R/spec.mtls.R][the author's GitHub]].
It's pretty slow.
#+begin_src R
  source("https://github.com/jrevenaugh/TSAUMN2/raw/main/R/spec.mtls.R")
  source("https://github.com/jrevenaugh/TSAUMN2/raw/main/R/mtm_plots.R")

  specs_mtls <- smooth_pred |>
    nest(.by = c("proxy", "site", "detrend_type")) |>
    mutate(mtls = map(data,
                      ~ . |>
                        select(depth, value) |>
                        # NOTE: no need to linearly interpolate!
                        # That's the point!
                        spec.mtls(plot = FALSE) |>
                        as_tibble())) |>
    select(-data) |>
    unnest(mtls)
#+end_src

#+RESULTS:

**** create tables with ranges of bp filters in depth domain
:PROPERTIES:
:CREATED:  [2023-09-27 Wed 10:05]
:END:
#+begin_src R
  # for wavelet analysis: notch filter that removes periods >25 m
  bat_filters_old <- tribble(
    ~ target, ~ proxy, ~ center, ~ plow, ~ phigh,
    "405 kyr", "Lstar", 15.7, 12, 22,
    "405 kyr", "MS", 18.9, 12, 40,
    "405 kyr", "d13C", 16.6, 11, 31,
    ) |>
    mutate(flow = 1 / plow, fhigh = 1 / phigh, site = "Zumaia", ref = "Batenburg et al., 2011")

  # these are from Batenburg et al., 2014 figure 3
  bat_filters <- tribble(
    ~ target, ~ proxy, ~ center, ~ plow, ~ phigh, ~site,
    "405 kyr", "Lstar", 16, 12, 29, "Zumaia",
    "405 kyr", "Lstar", 12, 8.5, 20, "Sopelana",
    ## "prec", "Lstar", 4, 3.0, 6.0, "both",
    "100 kyr", "Lstar", 4, 3.0, 6.0, "Zumaia",
    "100 kyr", "Lstar", 4, 3.0, 6.0, "Sopelana",
    "prec", "Lstar", 0.72, 0.53, 1.1, "Zumaia",
    "prec", "Lstar", 0.49, 0.37, 0.75, "Sopelana",
    "405 kyr", "MS", 17, 12, 24, "Zumaia",
    "405 kyr", "MS", 12, 8.8, 19, "Sopelana",
    ## "prec", "MS", 4, 3.0, 6.0, "both",
    "100 kyr", "MS", 4, 3.0, 6.0, "Zumaia",
    "100 kyr", "MS", 4, 3.0, 6.0, "Sopelana",
    ## "prec", "MS", 0.72, 0.50, 1.3, "both",
    "prec", "MS", 0.72, 0.50, 1.3, "Zumaia",
    "prec", "MS", 0.72, 0.50, 1.3, "Sopelana",
    ) |>
    mutate(flow = 1 / plow, fhigh = 1 / phigh, ref = "Batenburg et al., 2014")

  freq_perc <- 0.4
  my_filters <- tribble(
    ~ target, ~ p,
    "405 kyr", 16,
    "100 kyr", 4,
    "prec", 0.72
  ) |>
    mutate(f = 1 / p,
           range = freq_perc * f,
           flow = f - range, fhigh = f + range,
           ref = "This study")
#+end_src

#+RESULTS:

**** COMMENT eha
:PROPERTIES:
:CREATED:  [2023-11-17 Fri 15:33]
:END:
#+begin_src R
  smooth_pred |>
    filter(proxy == "MS",
           site == "Zumaia",
           detrend_type == "lin_gam_det") |>
    select(depth, value) |>
    astrochron::linterp(genplot = FALSE) |>
    astrochron::eha(#sigID = TRUE,
                  win = 10, step = .5,
                  fmax = 1,
                  ydir = -1)
#+end_src

#+RESULTS:
#+begin_example

----- APPLYING PIECEWISE-LINEAR INTERPOLATION TO STRATIGRAPHIC SERIES -----

 ,* Number of samples= 1360
 ,* Determining median sampling interval for series
 ,* Will interpolate to median sampling interval of 0.10458
 ,* New number of samples= 1349

 ----- PERFORMING EVOLUTIVE HARMONIC ANALYSIS -----
 ,* Number of data points in stratigraphic series: 1349
 ,* Stratigraphic series length (space or time): 140.9738
 ,* Sampling interval (space or time): 0.10458
 ,* Number of data points per window: 96
 ,* Moving window size (space or time): 9.9351
 ,* Window step points: 5
 ,* Window step (space or time): 0.5229
 ,* Number of windows: 251
 ,* Mean value for each window will be subtracted
 ,* Linear trend for each window will be subtracted
 ,* Nyquist frequency: 4.781029
 ,* Rayleigh frequency: 0.09960477
 ,* MTM Power spectrum bandwidth resolution (halfwidth): 0.1992095
 ,* Will use 3 DPSS tapers
 ,* Padded to 256 points
#+end_example

**** make plot of spectra and annotate the target frequency ranges for bp filtering
:PROPERTIES:
:CREATED:  [2023-09-25 Mon 10:57]
:END:
In [cite:@Batenburg2012;@Batenburg2014] they specify different filter ranges for each proxy, but it's not entirely clear what the ranges are based on. At least the correspond roughly to what we see in the spectrum.

The blue rectangles correspond to our simplified filter intervals where we just take a desired period, convert it to a frequency, then add/subtract a certain percentage from each (\pm40% in the last iteration).
The frequency ranges need to be a little broad to encapsulate the potentially variable sedimentation rates throughout the record.

#+begin_src R :results output graphics file :file imgs/Zumaia-Sopelana_mtm.png :width 900 :height 800
  specs_fancy |>
    filter(detrend_type != "value") |>
    ggplot(aes(x = freq, y = power, colour = detrend_type, group = detrend_type)) +
    facet_grid(cols = vars(site), rows = vars(proxy)) +
    # annotate the Batenburg 2014 filters
    geom_rect(aes(xmin = flow, xmax = fhigh, ymin = 1e-5, ymax = 1, fill = ref),
              inherit.aes = FALSE,
              alpha = .1,
              data = bat_filters |> bind_rows(bat_filters_old)) +
    # show our filters
    geom_rect(aes(xmin = flow, xmax = fhigh, ymin = 1e-5, ymax = 1, fill = ref),
              inherit.aes = FALSE,
              alpha = .1,
              data = my_filters) +
    ggnewscale::new_scale_fill() +

    # plot periodogram
    geom_line(aes(linetype = "FFT"),
              data = specs_fft |> filter(detrend_type != "value")) +
    # annotate Blackman-Tukey spectra
    ## geom_line(aes(y = spec, linetype = "BT"), data = specs_bt) +
    # plot MTM spectra
    geom_line(aes(linetype = "MTM")) +
    # add AR1 fit and uncertainty
    ## geom_line(aes(y = AR1_fit)) +
    ## geom_line(aes(y = AR1_95_power), alpha = .3) +
    geom_ribbon(aes(ymin = AR1_fit, ymax = AR1_power,
                    fill = detrend_type,
                    linetype = NA, group = paste(detrend_type, .width)),
                alpha = .1) +
    # annotate the MTLS spectra
    geom_line(aes(y = spec, linetype = "MTLS"),
              data = specs_mtls |> filter(detrend_type != "value")) +
    ## scale_y_log10() +
    annotation_logticks(sides = "l") + # remember to update if we switch back to log!
    coord_cartesian(
      ## xlim = c(1e-4, 0.0625) * 100 # log axis
      ## xlim = c(0, 2.6), # linear axis
      xlim = c(0, .4),  # linear axis zoomed on 405 and 100 kyr
      ## xlim = c(0, 1.5),  # linear axis zoomed on 405 and 100 kyr
      ## ylim = c(0, 3)
      ylim = c(0, .05) # linear axis
      ) +
    scale_x_continuous(
    ## scale_x_log10(
      sec.axis = sec_axis(trans = ~ 1 / .x,
                                           name = "Period (m)",
                                           breaks = c(50, 10, 5, 3, 2, 1, .5, .3, .2, .1))) +
    labs(x = "Frequency (cycles/m)", y = "Spectral power",
         linetype = "") +
    scale_linetype_manual(values = c("MTM" = "solid","FFT" = "dotdash", "MTLS" = "longdash"))
#+end_src

#+attr_latex: :width \textwidth
#+caption: Zumaia/Sopelana spectral analysis in the depth domain. See cref:tab:detrend_types for a description of the different detrending methods. FFT = fast fourier transform, MTM = multi-taper method, MTLS = Multi-taper averaged Lomb-Scargle periodogram of unevenly spaced data.
#+RESULTS:
[[file:imgs/Zumaia-Sopelana_mtm.png]]

**** Bandpass Filtering
:PROPERTIES:
:CREATED:  [2023-09-25 Mon 10:56]
:END:
#+begin_src R
  filts <- smooth_pred |>
    bandpass_filter(freqs = my_filters, x = depth, y = value,
                    nest = c("proxy", "site", "detrend_type"))
#+end_src

#+RESULTS:

**** get 405 kyr minima from bandpass filters
:PROPERTIES:
:CREATED:  [2023-11-30 Thu 10:46]
:END:
#+begin_src R
  rec_peaks <- filts |>
      tidylog::filter(target == "405 kyr") |>
      mutate(filt = -filt) |> # we want MINIMA rather than maxima
      nest(.by = c(proxy, site, detrend_type)) |>
      mutate(pk = map(data, ~ .x |>
                              select(depth, filt) |>
                              astrochron::peak(genplot = FALSE) |>
                              as_tibble() |>
                              select(depth = Location, peak_value = Peak_Value))) |>
      unnest(pk) |>
    select(-data) |>
    mutate(peak_value = -peak_value) # convert back to original value
#+end_src

#+RESULTS:
#+begin_example
filter: removed 43,290 rows (67%), 21,645 rows remaining

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 386
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 8

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 386
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 8

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 386
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 10

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 386
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 8

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 386
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 10

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 1349
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 9

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 1349
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 9

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 1349
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 9

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 1349
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 9

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 1349
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 9

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 1344
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 9

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 1344
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 9

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 1344
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 9

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 1344
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 9

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 1344
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 9

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 625
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 2

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 625
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 2

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 625
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 2

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 625
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 4

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 625
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 4

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 625
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 3

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 625
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 3

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 625
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 3

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 625
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 4

 ,* No filtering of peaks applied.

----- FINDING MAXIMA OF PEAKS, FILTERING AT THRESHOLD VALUE -----
 ,* Number of data points= 625
 ,* Number of columns= 2
 ,* Identifying maxima of peaks
 ,* Number of peaks identified= 4

 ,* No filtering of peaks applied.
#+end_example

**** hilbert transform of the precession bp filter
:PROPERTIES:
:CREATED:  [2023-09-27 Wed 10:54]
:END:
#+begin_src R :exports none
  hb_prec <- filts |>
    filter(target == "prec") |>
    nest(.by = c(site, proxy, detrend_type)) |>
    mutate(hb = map(data, \(d) d |>
                               select(depth, filt) |>
                               astrochron::hilbert(genplot = FALSE, verbose = FALSE))) |>
    unnest(hb) |>
    select(-data)
#+end_src

#+RESULTS:

[2023-11-27 Mon 19:45]
Richard says that the Hilbert transform is useful for visual inspection, but numerically it is very sensitive and probably doesn't reflect the real amplitude modulation signal very well.

**** make plot of records with filters
:PROPERTIES:
:CREATED:  [2023-09-25 Mon 10:57]
:END:
#+begin_src R :results output graphics file :file imgs/Zumaia_Sopelana_records_and_filters_depth.png :width 1200 :height 900
  smooth_pred |>
    filter(detrend_type != "value") |>
    ggplot(aes(x = depth, y = value, colour = detrend_type)) +
    facet_grid(rows = vars(proxy),
               scales = "free", space = "free_x") +
    geom_line(aes(group = paste(detrend_type, site)), alpha = .6) +
    geom_line(aes(y = filt + as.integer(as.factor(target)),
                  group = paste(detrend_type, site, target)),
              data = filts |> filter(detrend_type != "value")) +
    geom_vline(aes(xintercept = strat_bot), data = agem_simple) +
    geom_line(aes(y = envelope + 3.5, group = paste(detrend_type, site)),
              data = hb_prec |> filter(detrend_type != "value")) +
    geom_point(aes(y = pk),
               size = 3,
               data = filts |>
                 filter(target == "405 kyr") |>
                 filter(detrend_type != "value") |>
                 nest(.by = c(proxy, site, detrend_type, flow, fhigh)) |>
                 mutate(pk = map(data, \(d) d |>
                                            select(depth, filt) |>
                                            mutate(filt = -filt) |> # we want minima rather than maxima
                                            astrochron::peak(genplot = FALSE, verbose = FALSE))) |>
                 unnest(pk) |>
                 rename(depth = Location, pk = Peak_Value) |>
                 mutate(pk = -pk)) +
    scale_x_reverse(breaks = seq(0, 200, 5),
                    minor_breaks = seq(0, 200, 1)) +
    labs(x = "Depth (m)", y = "Normalized proxy",
         ## title = "Zumaia raw proxy record filters"
         ## title = "Zumaia fancy detrended proxy record filters"
         )
#+end_src

#+attr_latex: :width \linewidth
#+caption: *Zumaia/Sopelana detrended records (colour represents the way in which the detrending was done, see cref:tab:detrend_types) and various bandpass filters in the depth domain.* Top lines represent the Hilbert transform of the precession filter for comparison to the 405 and 100 kyr direct filters. Dots represent minima in the 405 kyr filter, which should approximately correspond to the vertical black lines (minima identified in the field) for MS, with maxima coinciding with the black lines for the d13C and Lstar records.
#+RESULTS:
[[file:imgs/Zumaia_Sopelana_records_and_filters_depth.png]]

***** show how the linear/gam detrending works
:PROPERTIES:
:CREATED:  [2023-09-25 Mon 16:19]
:END:
#+begin_src R :results output graphics file :file imgs/Zumaia-Sopelana_records_complicated.png :width 900
  smooth |>
    filter(site == "Zumaia", proxy == "MS") |>
    ggplot(aes(x = depth, y = value, group = paste(site, proxy))) +
    facet_grid(rows = vars(proxy), scales = "free_y") +
    # r/w intervals
    scale_fill_manual(values = c("red" = "indianred", "pink" = "pink", "white" = "gray"),
                      guide = FALSE) +
    geom_rect(aes(fill = str_sub(colour, 1, -2),
                  xmin = depth - .1, xmax = depth + .1, ymin = 50, ymax = 55)) +
    ## annotate("rect",
    ##          xmin = c(-5, 0, 59, 85, 109),
    ##          xmax = c(0, 59, 85, 109, 145),
    ##          ymin = 45, ymax = 50,
    ##          fill = c("gray", "red", "gray", "red", "gray"),
    ##          alpha = .2
    ##          ) +
    ## ggnewscale::new_scale_colour() +

    # "raw" data
    geom_line(colour = "gray") +
    annotate("text", x = 145, y = 10, label = "raw", colour = "gray", hjust = 0) +

    geom_line(aes(y = lin + 30), colour = "gray") +
    annotate("text", x = 145, y = 33, label = "raw - r/w", colour = "gray", hjust = 0) +

    geom_line(aes(y = scale(value)[, 1]), colour = "gray") + # scaled
    annotate("text", x = 145, y = 0, label = "scaled", colour = "gray", hjust = 0) +

    ## geom_line(aes(y = gam - 5), colour = "gray") +
    ## annotate("text", x = 145, y = -5, label = "gam", colour = "gray", hjust = 0) +

    ## geom_line(aes(y = det - 10), colour = "gray") +
    ## annotate("text", x = 145, y = -10, label = "gam r/w", colour = "gray", hjust = 0) +

    # gam and other trends
    geom_line(aes(y = gam_pred, colour = "gam"), data = smooth_basic |>
                              filter(site == "Zumaia", proxy == "MS")) +
    geom_line(aes(y = lin_pred, colour = "mean r/w", group = colour), data = smooth |>
                              filter(site == "Zumaia", proxy == "MS")) +
    geom_line(aes(y = gam_pred + 30, colour = "gam pred r/w"), data = smooth |>
                              filter(site == "Zumaia", proxy == "MS")) +

    # filters
    ## geom_line(aes(y = filt, colour = detrend_type, group = target),
    ##           data = filts |>
    ##             filter(site == "Zumaia", proxy == "MS")) +

    ## # age model from the log
    geom_point(aes(x = strat_bot, y = -2,
                   size = !is.na(comment)),
               inherit.aes = FALSE,
               data = agem |>
                 filter(minmax == "minimum")) +
    annotate("text", x = 145, y = -2, label = "minima", hjust = 0) +
    annotate("text", x = 145, y = 2, label = "maxima", hjust = 0) +
    geom_segment(aes(x = strat_bot, xend = strat_top,
                     y = 2, yend = 2),
                 inherit.aes = FALSE,
                 data = agem |>
                   filter(minmax == "maximum"),
                 linewidth = 2) +
    # try to make it into little sine waves
    ## geom_segment(aes(x = strat_bot, xend = strat_top,
    ##                  y = if_else(minmax == "minimum", 1.5, -1.5),
    ##                  yend = if_else(minmax == "minimum", -1.5, 1.5)),
    ##              data = agem) +

    coord_cartesian(xlim = c(0, 150)) +
    labs(x = "Depth (m)", y = "Proxy value", colour = "Filter type", size = "Well-defined") #+
    ## theme(legend.position = "none")
#+end_src

#+caption: Zumaia and Sopelana trend removal using various strategies. See cref:tab:detrend_types for an overview.
#+RESULTS:
[[file:imgs/Zumaia-Sopelana_records_complicated.png]]
**** construct an eccentricity curve from the filters in the depth domain
:PROPERTIES:
:CREATED:  [2023-09-27 Wed 10:50]
:END:
We normalize the filtered record and combine them in a few different proportions (for now 1:1, 0.5:1, and 1:0.5) using both a filtering approach (default) and a hilbert transform of the precession-filtered record. Furthermore we set the phase relationship to -1 for the d13C and Lstar proxies and to +1 for the MS.

#+begin_src R :results none
  data_ecc <- filts |>
    select(-p, -f, -range, -flow, -fhigh, -ref) |>
    pivot_wider(id_cols = c(proxy, site, detrend_type, depth),
                names_from = target, values_from = filt) |>
    tidylog::left_join(hb_prec) |>
    mutate(
      fracs = list(tribble( ~ comb, ~ s405, ~ s100,
                          "1:1", 1, 1,
                          "0.5:1", 0.5, 1,
                          "1:0.5", 1, 0.5)),
      # the phase relationships for the different proxies
      sign_405 = case_when(proxy == "d13C" ~ -1,
                           proxy == "Lstar" ~ -1,
                           proxy == "MS" ~ 1),
      sign_100 = case_when(proxy == "d13C" ~ -1,
                           proxy == "Lstar" ~ -1,
                           proxy == "MS" ~ 1)) |>
    unnest(fracs) |>
    mutate(filter = scale(sign_405 * s405 * `405 kyr` + sign_100 * s100 * `100 kyr`)[, 1],
           hilbert = scale(sign_405 * s405 * `405 kyr` + sign_100 * s100 * envelope)[, 1],
           # we scale the two sites at the same level
           .by = c(site, proxy, detrend_type, comb)) |>
    pivot_longer(c(filter, hilbert),
                 names_to = "filt_env",
                 values_to = "ecc") |>
    arrange(rev(site), rev(proxy), filt_env, comb, depth)
#+end_src

**** plot extracted eccentricity curve
:PROPERTIES:
:CREATED:  [2023-09-27 Wed 18:51]
:END:
We plot all the different ways in which we have constructed an `eccentricity' record against depth, including the 405 kyr minima that were identified in the field.
See [[cref:fig:record-construct]].

#+begin_src R :results output graphics file :file imgs/Zumaia_ecc_depth.png :width 1200 :height 400
  data_ecc |>
    ggplot(aes(x = depth, y = ecc,
               group = paste(site, comb, detrend_type, filt_env),
               colour = detrend_type)) +
    facet_grid(cols = vars(comb, filt_env), rows = vars(proxy)) +
    ## geom_line(aes(y = `405 kyr`, colour = "405 kyr")) +
    ## geom_line(aes(y = `100 kyr`, colour = "100 kyr")) +
    ## geom_line(aes(y = prec, colour = "prec")) +
    ## geom_line(aes(y = envelope, colour = "envelope")) +
    geom_vline(aes(xintercept = strat_bot), alpha = .3, data = agem_simple) +
    geom_line() +
    scale_x_reverse() +
    labs(x = "Depth (m)", y = "Normalized scaled combination of filters",
         colour = "Method to generate ecc")
#+end_src

#+name: fig:record-construct
#+caption: Zumaia/Sopelana artificial combinations of 405 kyr and 100 kyr bandpass filtered/hilbert-transformed records in various combinations.
#+RESULTS:
[[file:imgs/Zumaia_ecc_depth.png]]

**** [#A] add the orbital solution to the data and calculate the RMSD
:PROPERTIES:
:CREATED:  [2023-09-27 Wed 11:20]
:END:
We filter out only the 1:0.5 filtered records (because they consistently gave the lowest RMSD scores and otherwise my computer often froze).

There are a few parameters we can vary to convert our depth record to a record against time.

First we create a list of potential K/T ages, ranging from 65.92 Ma to 66.02 Ma in increments of 20 kyr, which corresponds to the range of K/T ages for all astronomical solutions in [cite:@ZeebeLourens2022EPSL] table 4.

Second, we look at potential phase lag between the proxy record and the astronomical solution, because in [cite:@Batenburg2012] they describe a lag of 2--3 precession cycles for the d13C record. So we let the lag vary between 0 and 65 kyr in increments of 5 kyr for d13C, and between 0 and 22 kyr in increments of 5 kyr for the remainder of the proxies.
*For now I've disabled this analysis!*

Third, we vary the sedimentation rate for the whole record at once to determine the best fit. In [cite:@Batenburg2014] they describe that the full Zumaia + Sopelana record contains 13 405 kyr cycles spanning 183 m. Thus, we let the inverted sedimentation rate vary between 22  kyr/m (what if there were only 11 cycles?) and 31 kyr/m (what if there were instead 14 cycles?).
If we only look at the Zumaia site, it would be 9 405 kyr minima in 135 m, so 27 kyr / m. If we calculate these inverted sedimentation rates for each cycle in the age model, assuming a fixed age difference of 405 kyr between the minima, we arrive at rates between 20.25 kyr/m and 36.8 kyr/m.
This indicates that this approach of fitting only a single sedimentation rate to the whole record is problematic. See below for a more elegant solution.

Which detrend_type is best?
- Hmm for Zumaia MS, ~lin_scl~ and ~lin_gam_det~ are best  if comb 1:0.5 hilbert!
- For Zumaia Lstar, ~lin_scl~, ~gam_det~, and ~lin_gam_det~ are about equally good with 1:0.5 filter!
- For Zumaia d13C, ~lin_gam_det~ and ~lin_scl~ are identical at 1:0.5 filter.
- For almost all 1:0.5 combs, filter is better than hilbert except for Zumaia d13C scl, so we can safely filter out only those comb/filt_env's.
***** calculate diffs and RMSD
#+begin_src R
  ## kpg_age <- 65970 # age taken from Batenburg et al., 2014
  ## tau <- (13 * 405) / 183 # conversion from depth to time,
  # 13 405 kyr cycles in 183 m of sediment, = 28.77 kyr/m
  # if we multiply the metres by this number you get kyr out.
  ## proxy_lag <- 2--3 precessional cycles, 44--65 kyr (Batenburg et al., 2012)

  diffs <- data_ecc |>
    # filter to limit options a little
    ## tidylog::filter(detrend_type == "lin_gam_det") |>
    ## tidylog::filter(comb == "0.5:1", filt_env == "filter") |>
    tidylog::filter(comb == "1:0.5") |>
    tidylog::filter(filt_env == "filter") |>
    ## tidylog::filter(site == "Zumaia") |>
    ## tidylog::filter(proxy == "MS") |>
    ## tidylog::filter(proxy == "Lstar") |>
    select(-`405 kyr`, -`100 kyr`, -prec, -envelope) %>%
    # It kept crashing if I didn't filter out enough, this ensures this doesn't happen
    assertr::verify(nrow(.) <= 50000) |>
    # let's put some uncertainty on the K/T boundary age
    mutate(kpg_age = list(
             # manual list to keep the number of parameter permutations low
             ## c(65500, 65600, 65700, 65800, 65900,
             ##   66000, #65970, # the estimate from Batenburg et al., 2014
             ##   66100, 66200, 66300, 66400, 66500)
             # sequence of potential ages, increase resolution of x
             ## seq(65500, 66500, 50)
             ## seq(65500, 66100, 20) # slightly smaller range
             seq(65920, 66020, 20) # range of K/T ages in ZB&L2022 table 4
             ## seq(65750, 66100, 50) # full range of calib A calib B K/T age in Zeebe and Lourens EPSL 2022
           )
           ) |>
    unnest(cols = c(kpg_age)) |>
    ## mutate(proxy_lag = case_when(
    ##          proxy == "d13C" ~ list(seq(44, 65, 5)), # 44 to 65 kyr (Batenburg et al., 2012)
    ##          proxy == "MS" ~ list(seq(0, 22, 5)),
    ##          proxy == "Lstar" ~ list(seq(0, 22, 5)),
    ##          TRUE ~ list(0.))) |>
    ## unnest(cols = c(proxy_lag)) |>
    # a single linear sedimentation rate, could well have varied by quite a bit!
    mutate(inv_sedrate = list(seq(
             # what if the Batenburg 2014 tuning is off by 3 405 kyr cycles?
             ## (10 * 405) / 183, (16 * 405) / 183,
             ## that's from 22.13 to 35.41
             ## 22, 36,
             # what if the Batenburg 2014 tuning is off by one 405 kyr cycle?
             ## c((12 * 405) / 183, (14 * 405) / 183),
             ## that's from 26.56 to 30.98
             ## 26, 31,
             ## 22,
             24, # off by 2 cycles, (11 * 405) / 183 = 24.344
             31, # but 26 keeps getting the best score, so expand that side
             # we could also do it based on the sedimentation rate in cm/kyr,
             # what are reasonable sedimentation rates here?
             ## 1 / 8 * 100, 1 / 2 * 100, # 2 to 8 cm / kyr?
             by = .5,
             ## length.out = 12 # this is to limit the total number of simulations
             ))) |>
    unnest(cols = c(inv_sedrate)) |>
    mutate(age = kpg_age + depth * inv_sedrate ## + proxy_lag
           ) |>
    # add target orbital solutions
    mutate(sol = list(c("La10b", "La10c", "ZB18a", "ZB20a"))) |>
    unnest(cols = c(sol)) |>
    mutate(ecc_sln = case_when(
             sol == "ZB18a" ~ approx(sln$age, sln$scl,
                                     xout = age)$y,
             sol == "ZB20a" ~ approx(sln2$age, sln2$scl,
                                     xout = age)$y,
             ## sol == "La11" ~ approx(sln3$age, sln3$scl,
             ##                         xout = age)$y,
             sol == "La10b" ~ approx(sln4$age, sln4$scl,
                                     xout = age)$y,
             sol == "La10c" ~ approx(sln5$age, sln5$scl,
                                     xout = age)$y,
             TRUE ~ NA_real_)) |>
    mutate(SD = (ecc_sln - ecc)^2)

  msd <- diffs |>
    summarize(RMSD = sqrt(mean(SD)),
              .by = c(proxy, site, detrend_type,
                      comb, filt_env,
                      kpg_age, ## proxy_lag,
                      inv_sedrate,
                      sol)) |>
    arrange(RMSD)
#+end_src

#+RESULTS:
: filter: removed 86,580 rows (67%), 43,290 rows remaining
: filter: removed 21,645 rows (50%), 21,645 rows remaining

***** plot RMSD directly
:PROPERTIES:
:CREATED:  [2023-10-02 Mon 10:38]
:END:
[[cref:fig:depth-rmsd-scores]] has become a bit of a complex figure. I wanted to get a glance at which proxy for which site scores the best overall RMSD.

This shows that the d13C record gives us the overall best RMSD's, but the d13C seems to only shows a strong 405 kyr cyclicity, no significant 100 kyr cyclicity (see figure of spectra above).

# #+begin_src R :results output graphics file :file imgs/Zumaia_MSD-overview.png :width 1920 :height 1080
#+begin_src R :results output graphics file :file imgs/Zumaia_MSD-overview.png :width 800 :height 900
  msd |>
    ggplot(aes(x = kpg_age * 0.001,
               y = RMSD,
               colour = paste(inv_sedrate, " = ", round(1 / inv_sedrate * 100, 2))## ,
               ## linetype = comb
               )) +
    facet_grid(cols = vars(site, filt_env, comb), rows = vars(proxy, sol)) +
    ## geom_point() +
    ## geom_vline(xintercept = c(## kpg_age * 0.001, # based on 405 kyr minima in La11
    ##              66.043 + c(-1, 0, 1) * 0.043 # based on 40Ar/39Ar and U-Pb data from bentonites
    ##            ),
    ##            alpha = .3) +
    geom_vline(aes(xintercept = age1), data = kpg_ages |> filter(sln != "La11") |> rename(sol = sln)) +
    geom_vline(aes(xintercept = age2), data = kpg_ages |> filter(sln != "La11") |> rename(sol = sln)) +

    geom_line(aes(group = paste(inv_sedrate,
                                comb,
                                filt_env,
                                detrend_type)),
              linewidth = .7) +
    ## scale_linewidth_discrete(range = c(.5, 2)) +
    scale_colour_viridis_d(#guide = guide_colorbar(direction = "horizontal")
    ) +
    scale_x_reverse() +
    labs(
      title = "Combinations of 405 kyr and 100 kyr filters and their RMSD",
      x = "K/T age", y = "RMSD",
      colour = "Inv sed rate (kyr/m) = Sedimentation rate (cm/kyr)") #+
    ## theme(legend.position = c(.1, .83))
#+end_src

#+name: fig:depth-rmsd-scores
#+caption: *Overview of RMSD scores* Assumed age of the K/T boundary versus the RMSD score. Vertical panels are the sites (Zumaia and the downwards extension in Sopelana) different proxies (MS, L* and d13C). Horizontal panels are the orbital solution the filtered data were compared to (for now only ZB18a and ZB20a), whether I constructed my filtered record as a combination of a direct 405 kyr filter and a 100 kyr filter or as a combination of a 405 kyr filter and the Hilbert transform of the precession filter, and in which proportions I've added the 405 kyr and 100 kyr components together. Vertical lines show the age of the K/T boundary with uncertainty based on \ce{^40Ar/^39Ar} and U--Pb data ([cite:@Batenburg2014] cite [cite:@Renne2013] based on new bentonite ages from coals near the K/T boundary).
#+attr_latex: :width 1.2\linewidth
#+RESULTS:
[[file:imgs/Zumaia_MSD-overview.png]]

***** plot RMSD as a function of orbital solution, tau, K/T age, ...
:PROPERTIES:
:CREATED:  [2023-09-27 Wed 19:04]
:END:
Here I make a heatmap with the same information as the previous figure.

# #+begin_src R :results output graphics file :file imgs/Zumaia_ecc_RMSD.png :width 1920 :height 800
#+begin_src R :results output graphics file :file imgs/Zumaia_ecc_RMSD.png :width 800 :height 1200
  msd |>
    # let's simplify a bit
    ## filter(comb == "1:1", filt_env == "filter", site == "Zumaia") |>
    ggplot(aes(x = kpg_age * 0.001, y = inv_sedrate,
               ## group = paste(comb, filt_env, site, tau, sol),
               ## colour = tau
               fill = RMSD
               )) +
    facet_grid(rows = vars(proxy, sol  # , proxy_lag
                           ),
               cols = vars(site, detrend_type, filt_env, comb)) +
    ## geom_line() +
    geom_raster() +
    geom_vline(aes(xintercept = age1),
               colour = "red", alpha = .3,
               data = kpg_ages |> filter(sln != "La11") |> rename(sol = sln)) +
    geom_vline(aes(xintercept = age2),
               colour = "red", alpha = .3,
               data = kpg_ages |> filter(sln != "La11") |> rename(sol = sln)) +

    scale_fill_viridis_c() +
    labs(x = "Age of the K/T boundary (Ma)",
         y = "Inverted sedimentation rate (m/kyr)",
         fill = "RMSD")
    ## theme_gray()
    ## geom_vline(xintercept = (c(12:14) * 405) / 183) #+
    ## annotate("text", x = (c(12:14) * 405) / 183, y = 70, label = paste(12:14, "cycles"))
#+end_src

#+attr_latex: :width .45\linewidth
#+caption: The various assumptions for the K/T age on the x-axis versus sedimentation rates on the y-axis. Horizontal panels are grouped by detrend_type, filter/Hilbert, and the proportion of the 405 kyr signal compared to the 100 kyr signal, while vertical panels are grouped by site, proxy, and orbital solution.
#+RESULTS:
[[file:imgs/Zumaia_ecc_RMSD.png]]

#+attr_latex: :width \linewidth
#+caption: Older figure, higher resolution in both inverted sedimentation rate (what I thought was \tau) and age_kpg, but without the La11 solution.
[[file:imgs/Zumaia_ecc_MSD.png]]

**** which solution has the overall lowest RMSD?
:PROPERTIES:
:CREATED:  [2023-10-03 Tue 16:14]
:END:
We find out which of the many solutions is the best by filtering out the lowest RMSD score for each proxy and astronomical solution in [[cref:tab:best-depth]].
We only look at Zumaia here though.

#+begin_src R :results value :colnames yes
  best <- msd |>
    # let's limit ourselves a little
    ## filter(site == "Zumaia") |>
    ## filter(proxy != "d13C") |>
    # which one is the lowest for each solution?
    ## mutate(low = min(RMSD),
    ##           .by = c(## proxy, site,
    ##                   sol)) |>
    ## # how about we get the best 3 fits for each proxy/solution/site?
    ## mutate(low = RMSD %in% tail(RMSD, n = 3),
    ##        .by = c(proxy, sol, site)) |>
    ## filter(low) |>
    ## ## arrange(RMSD)# |>
    ## select(-low) |>
    # get the best combination of proxy_lag and inv_sedrate values
    tidylog::filter(RMSD == min(RMSD),
                    .by = c(proxy, site, comb, filt_env, sol)) |>
    arrange(proxy, sol, RMSD)
  best
#+end_src

#+name: tab:best-depth
#+caption: Zumaia records with the lowest RMSD score by proxy and astronomical solution.
#+RESULTS:
| proxy | site     | detrend_type |  comb | filt_env | kpg_age | inv_sedrate | sol   |              RMSD |
|-------+----------+--------------+-------+----------+---------+-------------+-------+-------------------|
| Lstar | Sopelana | lin_gam_det  | 1:0.5 | filter   |   66000 |          30 | La10b | 0.925178029082627 |
| Lstar | Zumaia   | lin_gam_det  | 1:0.5 | filter   |   65960 |          26 | La10b |   1.0337259176876 |
| Lstar | Sopelana | lin_gam_det  | 1:0.5 | filter   |   65920 |          28 | La10c |  1.01483477349611 |
| Lstar | Zumaia   | value        | 1:0.5 | filter   |   66000 |        24.5 | La10c |  1.06159829980068 |
| Lstar | Zumaia   | scl          | 1:0.5 | filter   |   66000 |        24.5 | La10c |  1.06159829980068 |
| Lstar | Sopelana | lin_gam_det  | 1:0.5 | filter   |   66020 |          27 | ZB18a |  1.03503318109526 |
| Lstar | Zumaia   | lin_scl      | 1:0.5 | filter   |   65960 |        25.5 | ZB18a |  1.03567278412549 |
| Lstar | Sopelana | lin_gam_det  | 1:0.5 | filter   |   66000 |          27 | ZB20a | 0.995371878744035 |
| Lstar | Zumaia   | gam_det      | 1:0.5 | filter   |   66020 |          24 | ZB20a |  1.07910623607518 |
| MS    | Zumaia   | lin_gam_det  | 1:0.5 | filter   |   65960 |          26 | La10b | 0.992151498627797 |
| MS    | Sopelana | gam_det      | 1:0.5 | filter   |   65920 |        30.5 | La10b | 0.997023967059141 |
| MS    | Sopelana | gam_det      | 1:0.5 | filter   |   65940 |        30.5 | La10c | 0.963699381863456 |
| MS    | Zumaia   | lin_gam_det  | 1:0.5 | filter   |   65960 |        26.5 | La10c |   1.0143029145587 |
| MS    | Zumaia   | lin_scl      | 1:0.5 | filter   |   65940 |          26 | ZB18a |  1.03234698602041 |
| MS    | Sopelana | lin_scl      | 1:0.5 | filter   |   66020 |          29 | ZB18a |  1.07353723592532 |
| MS    | Sopelana | value        | 1:0.5 | filter   |   65940 |        26.5 | ZB20a |  1.04455266497856 |
| MS    | Sopelana | scl          | 1:0.5 | filter   |   65940 |        26.5 | ZB20a |  1.04455266497856 |
| MS    | Zumaia   | lin_gam_det  | 1:0.5 | filter   |   65920 |          26 | ZB20a |  1.11094894347295 |
| d13C  | Zumaia   | gam_det      | 1:0.5 | filter   |   66020 |          24 | La10b |  1.00382536360231 |
| d13C  | Zumaia   | gam_det      | 1:0.5 | filter   |   66020 |        24.5 | La10c |  1.01687292128371 |
| d13C  | Zumaia   | lin_gam_det  | 1:0.5 | filter   |   65920 |        26.5 | ZB18a |  1.07083921040213 |
| d13C  | Zumaia   | lin_gam_det  | 1:0.5 | filter   |   65920 |          26 | ZB20a |  1.00812207545768 |

Or just blindly calculate the average RMSD of all the different approaches in [[cref:tab:best-depth-global]]

#+begin_src R :results value :colnames yes :exports results
  msd |>
    filter(site == "Zumaia") |>
    ## filter(proxy != "d13C") |>
    filter(RMSD == min(RMSD), .by = sol) |> select(-inv_sedrate, -site)
#+end_src

#+name: tab:best-depth-global
#+caption: Zumaia records lowest RMSD score per astronomical solution.
#+RESULTS:
| proxy | detrend_type |  comb | filt_env | kpg_age | sol   |              RMSD |
|-------+--------------+-------+----------+---------+-------+-------------------|
| MS    | lin_gam_det  | 1:0.5 | filter   |   65960 | La10b | 0.992151498627797 |
| d13C  | lin_gam_det  | 1:0.5 | filter   |   65920 | ZB20a |  1.00812207545768 |
| MS    | lin_gam_det  | 1:0.5 | filter   |   65960 | La10c |   1.0143029145587 |
| MS    | lin_scl      | 1:0.5 | filter   |   65940 | ZB18a |  1.03234698602041 |

We can also make a nice overview figure of all the different parameter perturbations.

#+begin_src R :results output graphics file :file imgs/Zumaia-depth-RMSD-scores.png :width 900 :height 700
  msd |>
    ggplot(aes(x = sol, y = RMSD,
               colour = inv_sedrate,
               shape = detrend_type)) +
    facet_grid(cols = vars(site, filt_env), rows = vars(proxy)) +
    geom_point(size = 4) +
    scale_colour_viridis_c() +
    geom_line(aes(group = paste(comb, detrend_type, filt_env, kpg_age, inv_sedrate)))
#+end_src

#+caption: Best linear age model (single sedimentation rate) fits. We varied the K/T age (different lines/points), the ~inv_sedrate~, and the ~detrend_type~.
#+RESULTS:
[[file:imgs/Zumaia-depth-RMSD-scores.png]]


**** plot the curves with the lowest overall RMSD
:PROPERTIES:
:CREATED:  [2023-09-27 Wed 19:03]
:END:
This becomes [[cref:fig:best-depth]]. Somehow it seems to be in anti-phase sometimes?

#+begin_src R :results output graphics file :file imgs/Zumaia_ecc_ZB18a.png :width 1200 :height 800
  # this plot crashes if I plot them all
  diffs |>
    # the "best" Zumaia setup?
    tidylog::inner_join(best) |>
    # filter out some of the best fits
    ggplot(aes(x = age * 0.001,
               group = paste(comb, filt_env, site, inv_sedrate, kpg_age ##, proxy_lag
                             ),
               alpha = RMSD,
               ## colour = 1 / tau * 100, # convert from kyr/m to cm/kyr
               ## colour = kpg_age,
               # filt_env??
               )) +
    facet_grid(rows = vars(proxy, sol),
               ## cols = vars(site),
               scales = "free_x", space = "free_x") +
    scale_alpha_continuous(range = c(1, .4)) +
    # plot the orbital solutions
    ## geom_line(aes(x = age * 0.001, y = scl, group = sol),
    ##           alpha = .4,
    ##           data = sln |> bind_rows(sln2) |> bind_rows(sln3) |> rename(sol = sln)) +
    geom_line(aes(y = ecc_sln),
              alpha = .4,
              linetype = 1) +
    geom_line(aes(y = ecc, RMSD = RMSD,
                  colour = paste("K/T age = ", kpg_age / 1000,
                                 "\ninv sed. rate = ", inv_sedrate,
                                 "\nsed. rate = ", round(1 / inv_sedrate * 100, 2))
                 ),
              linewidth = 1.2) +
    # annotate RMSD for each proxy/site/sol combo
    geom_text(aes(x = age / 1e3, y = 3.7,
                  group = site,
                  label = round(RMSD, 3)
                  ),
              hjust = 0, alpha = 1,
              data = diffs |>
                inner_join(best) |>
                summarize(age = mean(age),
                          RMSD = mean(RMSD),
                          .by = c(proxy, site, comb, sol))) +
    ## gghighlight::gghighlight(MSD < 23) + # not a fan of this
    ## scale_colour_viridis_c() +
    ## scale_alpha_continuous(range = c(.9, .05)) +
    scale_x_reverse() +
    ## scale_colour_brewer(type = "qual") +
    scale_colour_viridis_d() +
    ## coord_cartesian(xlim = c(69.5, 65.9)) +
    ## geom_vline(xintercept = 66.043 + c(-1, 0, 1) * 0.043) + # based on 40Ar/39Ar and U-Pb data from bentonites
    geom_vline(aes(xintercept = kpg_age * 0.001,
                   alpha = RMSD), colour = "red") +
    ## geom_line(sln)
    labs(x = "Age (Ma)",
         y = "Normalized filtered proxy / Normalized OS",
         linetype = "405:100 kyr weighing",
         ## colour = "Age of the K/T boundary",
         ## colour = "Sedimentation rate (cm/kyr)",
         colour = "",
         alpha = "RMSD\n(lower = better)")
#+end_src

#+name: fig:best-depth
#+caption: Zumaia best proxy match with astronomical solutions based on single sedimentation rate. *NOTE:* Because of my large range in sedimentation rates, the older Sopelana site is often floating off to ages too old.
#+attr_latex: :width \linewidth
#+RESULTS:
[[file:imgs/Zumaia_ecc_ZB18a.png]]

*** analysis in the time domain
:PROPERTIES:
:CREATED:  [2023-09-29 Fri 13:11]
:END:
We use the age model from the field (which has the 405 kyr minima) and tie them to the minima in the 405 kyr filter of the astronomical solution (from [[file:~/SurfDrive/Postdoc1/prj/2023-05-19_cretaceous_constraints/cretaceous_constraints.org::*get 405 kyr minima ages for each solution][get 405 kyr minima ages for each solution]]).
This means that for each orbital solution we test, we generate a unique age model based only on the 405 kyr filter minima.

After applying the age model, we filter the 405 kyr and 100 kyr components to generate an `eccentricity' curve from the record. Then we calculate RMSD between that and the astronomical solution.

Note that this often crashed my laptop, so we limit the variable perturbations a little bit. (My R session runs out of memory, crashing my whole emacs session but luckily not my laptop).

**** Apply age model based on the astronomical solution we wish to target
:PROPERTIES:
:CREATED:  [2023-11-17 Fri 14:07]
:END:
#+begin_src R
  smooth_ages <- smooth_pred |>
    mutate(Ma405 = findInterval(depth, agem_sol$strat_bot[agem_sol$sol == "ZB18a"])) |>
    # add orbital solution ages based on the 405 kyr minima
    mutate(sol = list(c("ZB18a", "ZB20a", ## "La11",
                        "La10b", "La10c"))) |>
    unnest(cols = c(sol)) |>
    mutate(age = case_when(
             sol == "ZB18a" ~ Hmisc::approxExtrap(agem_sol$strat_bot[agem_sol$sol == "ZB18a"],
                                                  agem_sol$age[agem_sol$sol == "ZB18a"],
                                                  xout = depth)$y,
             sol == "ZB20a" ~ Hmisc::approxExtrap(agem_sol$strat_bot[agem_sol$sol == "ZB20a"],
                                                  agem_sol$age[agem_sol$sol == "ZB20a"],
                                                  xout = depth)$y,
             ## sol == "La11" ~ Hmisc::approxExtrap(agem_sol$strat_bot[agem_sol$sol == "La11"],
             ##                                     agem_sol$age[agem_sol$sol == "La11"],
             ##                                     xout = depth)$y,
             sol == "La10b" ~ Hmisc::approxExtrap(agem_sol$strat_bot[agem_sol$sol == "La10b"],
                                                 agem_sol$age[agem_sol$sol == "La10b"],
                                                 xout = depth)$y,
             sol == "La10c" ~ Hmisc::approxExtrap(agem_sol$strat_bot[agem_sol$sol == "La10c"],
                                                 agem_sol$age[agem_sol$sol == "La10c"],
                                                 xout = depth)$y,
             TRUE ~ NA_real_)) |>
    arrange(sol, detrend_type)
#+end_src

#+RESULTS:

**** Did we number the Ma405 correctly?
#+begin_src R :results output graphics file :file imgs/Ma405_categories.png :width 800
  # Did we number the Ma405 correctly?
  ## smooth_ages |>
  ##   distinct(Ma405)

  smooth_ages |>
    ## filter(proxy == "d13C", site == "Zumaia", sol == "ZB18a", detrend_type == "value") |>
    filter(proxy == "MS", ## sol == "ZB18a",
           detrend_type == "value") |>
    ggplot(aes(x = age / 1e3, y = value, colour = site)) +
    facet_grid(rows = vars(sol, proxy)) +
    scale_x_reverse() +

    # annotate astronomical solution
    geom_line(aes(x = age / 1e3, y = scl * 2),
              inherit.aes = FALSE,
              data = slns |>
                filter(sln != "La11") |>
                filter(age > 65800) |>
                filter(age < 71500) |>
                rename(sol = sln)) +

    # annotate the K/T ages
    geom_vline(aes(xintercept = age1),
               data = kpg_ages |> filter(sln != "La11") |> rename(sol = sln)) +
    geom_vline(aes(xintercept = age2),
               data = kpg_ages |> filter(sln != "La11") |> rename(sol = sln)) +

    geom_line() +
    geom_line(aes(y = Ma405 + 20),
              colour = "indianred") +
    annotate("text", x = 67, y = 29, colour = "indianred",
             label = "Ma405 cycle") +
    geom_text(aes(x = age/1e3, y = 27, label = round(age / 1e3, 3)),
              colour = "black",
              data = smooth_ages |>
                filter(proxy == "MS", detrend_type == "value") |>
                filter(Ma405 == 1) |>
                distinct(sol, .keep_all = TRUE)) +
    geom_text(aes(y = Ma405 + 20, label = Ma405),
              colour = "indianred",
              nudge_x = - .405 / 2, nudge_y = 2.5,
              data = smooth_ages |>
                filter(proxy == "MS", detrend_type == "value") |>
                distinct(sol, Ma405, .keep_all = TRUE)) +
    theme(legend.pos = c(.06, .36), legend.background = element_blank())
#+end_src

#+RESULTS:
[[file:imgs/Ma405_categories.png]]

**** calculate spectra in the time domain
:PROPERTIES:
:CREATED:  [2023-09-26 Tue 16:49]
:END:
#+begin_src R
  specs_age <- smooth_ages |>
    spectral_analysis(nest = c("proxy", "site", "detrend_type", "sol"),
                      x = age, y = value)
#+end_src

#+RESULTS:
**** COMMENT do eha on one example dataset
:PROPERTIES:
:CREATED:  [2023-11-17 Fri 15:30]
:END:
#+begin_src R
  smooth_ages |>
    filter(proxy == "MS",
           site == "Zumaia",
           detrend_type == "lin_gam_det",
           sol == "ZB18a") |>
    select(age, value) |>
    astrochron::linterp(genplot = FALSE, verbose = FALSE) |>
    astrochron::eha(fmax = .02, ydir = -1)
#+end_src

#+RESULTS:
#+begin_example

 ----- PERFORMING EVOLUTIVE HARMONIC ANALYSIS -----
 ,* Number of data points in stratigraphic series: 1408
 ,* Stratigraphic series length (space or time): 3781.313
 ,* Sampling interval (space or time): 2.6875
 ,* Number of data points per window: 101
 ,* Moving window size (space or time): 268.75
 ,* Window step points: 10
 ,* Window step (space or time): 26.875
 ,* Number of windows: 131
 ,* Mean value for each window will be subtracted
 ,* Linear trend for each window will be subtracted
 ,* Nyquist frequency: 0.1860465
 ,* Rayleigh frequency: 0.003684089
 ,* MTM Power spectrum bandwidth resolution (halfwidth): 0.007368179
 ,* Will use 3 DPSS tapers
 ,* Padded to 256 points
#+end_example

**** which time-domain filters did they apply in Batenburg?
:PROPERTIES:
:CREATED:  [2023-11-17 Fri 14:21]
:END:
#+begin_src R
  # these are from Batenburg et al., 2014 figure 4
  # in the time domain they do not seem to make a distinction between sites
  bat_age_filters <- tribble(
    ~ target, ~ proxy, ~ center, ~ plow, ~ phigh,
    "405 kyr", "Lstar", 415, 311, 621,
    "100 kyr", "Lstar", 100, 75, 150,
    "prec", "Lstar", 17.9, 13.4, 27.2,
    "405 kyr", "MS", 409, 308, 609,
    "100 kyr", "MS", 100, 75, 150,
    "prec", "MS", 23.6, 17.8, 35.3,
    ) |>
    mutate(flow = 1 / plow, fhigh = 1 / phigh, ref = "Batenburg et al., 2014")
#+end_src

#+RESULTS:


**** add a tibble with our desired filter intervals here
:PROPERTIES:
:CREATED:  [2023-09-28 Thu 17:02]
:END:
We just filter by 405 kyr, 100 kyr and 23 kyr \pm40%.
#+begin_src R
  my_filt_age <- tribble(
    ~ target, ~ p,
    "405 kyr", 405,
    "100 kyr", 100,
    "prec", 22,
  ) |>
    mutate(f = 1 / p,
           range = 0.4 * f,
           flow = f - range,
           fhigh = f + range,
           ref = "This study")
#+end_src

#+RESULTS:

**** plot spectra
:PROPERTIES:
:CREATED:  [2023-09-26 Tue 16:50]
:END:
#+begin_src R :results output graphics file :file imgs/Zumaia_Sopelana_spectra_filters.png :width 900 :height 900
  # plot spectra w/ Freq on x-axis
  specs_age |>
    filter(detrend_type != "value") |>
    ## plot_spectrum() + # only works well for a single line
    ggplot(aes(x = freq, y = power,
               ## linetype = site,
               colour = detrend_type)) +
    ## scale_linetype_manual(values = c("Zumaia" = "solid",
    ##                                  "Sopelana" = "dashed")) +
    coord_cartesian(
      ## xlim = c(1 / 1000, 1 / 10), # for a log x axis
      ## xlim = c(0, .072),
      xlim = c(0, .015), # zoom in on 405 and 100 kyr ecc
      ylim = c(0, .025)) +
    ## scale_y_log10() +
    scale_x_continuous(
    ## scale_x_log10(
      sec.axis = sec_axis("Period (m)", trans = ~ 1 / .,
                          breaks = c(2400, 405, 100))) +
    ## annotation_logticks(sides = "l") +

    ## # plot AR1 fits/confidence levels
    ## ## geom_line(aes(y = AR1_power, group = paste(site, detrend_type, sol, .width))) +
    ## ## geom_line(aes(y = Harmonic_CL)) +
    ## geom_ribbon(aes(ymin = AR1_fit, ymax = AR1_power,
    ##                 linetype = NA, fill = detrend_type,
    ##                 group = paste(detrend_type, site, sol, proxy, .width)),
    ##               alpha = .1) +

    # rectangles for target frequencies
    ## ggnewscale::new_scale_fill() +
    geom_rect(aes(xmin = flow, xmax = fhigh, ymin = 1e-5, ymax = 1, fill = ref),
              inherit.aes = FALSE,
              alpha = .1,
              data = bat_age_filters) +
    geom_rect(aes(xmin = flow, xmax = fhigh, ymin = 1e-5, ymax = 1, fill = ref),
              inherit.aes = FALSE,
              alpha = .1,
              data = my_filt_age) +

    # plot spectra
    geom_line(aes(group = paste(site, sol, proxy, detrend_type))) +

    labs(x = "Frequency (cycles/kyr)", y = "Power (-)") +
    facet_grid(cols = vars(site), rows = vars(proxy, sol))
#+end_src

#+attr_latex: :width \linewidth
#+caption: Zumaia/Sopelana spectral analysis after tuning each of the 405 kyr minima from the field [cite:@Batenburg2012] to 405 kyr mimima in each of the orbital solutions. Note that the d13C doesn't appear to have any spectral peak around the 100 kyr period.
#+RESULTS:
[[file:imgs/Zumaia_Sopelana_spectra_filters.png]]

**** COMMENT plot spectra with period on the x-axis
:PROPERTIES:
:CREATED:  [2023-09-26 Tue 16:50]
:END:
#+begin_src R :eval never
  # plot spectra with period on x-axis (with log-axis)
  specs_age |>
    ggplot(aes(x = 1 / Frequency, y = Power, colour = site)) +
    facet_grid(## cols = vars(site),
               rows = vars(proxy)) +
    geom_line() +
    geom_line(aes(y = AR1_fit)) +
    geom_line(aes(y = AR1_95_power), linetype = "dashed") +
    ## geom_line(aes(y = Harmonic_CL)) +
    ## coord_cartesian(xlim = c(1e-3, 1e-1)) +
    coord_cartesian(xlim = c(10, 5000)) +
    scale_y_log10() +
    scale_x_log10() +
    annotation_logticks() +
    geom_rect(aes(xmin = 1 / flow, xmax = 1 / fhigh, ymin = 1e-5, ymax = 1),
              inherit.aes = FALSE,
              alpha = .3, fill = "yellow",
              data = filts_age |> distinct(proxy, flow, fhigh)) +
    labs(x = "Period (kyr)", y = "Power", colour = "Site")
#+end_src
**** calculate bandpass filters in the time domain
:PROPERTIES:
:CREATED:  [2023-09-26 Tue 16:49]
:END:
#+begin_src R :results none
  filts_age <- smooth_ages |>
    bandpass_filter(freqs = my_filt_age, x = age, y = value,
                    nest = c("proxy", "site", "detrend_type", "sol"))
#+end_src

**** calculate hilbert transform of precession data in the time domain
:PROPERTIES:
:CREATED:  [2023-09-26 Tue 16:50]
:END:
#+begin_src R :results none
  hb_prec_age <- filts_age |>
    filter(target == "prec") |>
    nest(.by = c(site, proxy, detrend_type, sol)) |>
    mutate(hb = map(data, \(d) d |>
                               select(age, filt) |>
                               astrochron::hilbert(genplot = FALSE, verbose = FALSE))) |>
    unnest(hb) |>
    select(-data)
#+end_src

**** plot the data with the filters
:PROPERTIES:
:CREATED:  [2023-09-26 Tue 16:50]
:END:
#+begin_src R :results output graphics file :file imgs/Zumaia_Sopelana_records_and_filters.png :width 1200 :height 900
  smooth_ages |>
    filter(detrend_type != "value") |>
    ## mutate(det = scale(value)[, 1], .by = c(site, proxy)) |>
    ggplot(aes(x = age / 1e3, y = value, colour = detrend_type)) +
    facet_grid(rows = vars(proxy, sol),
               scales = "free", space = "free_x") +
    geom_vline(aes(xintercept = age / 1e3), data = agem_sol) +
    geom_line(aes(group = paste(detrend_type, site)), alpha = .6) +
    geom_line(aes(y = filt + as.integer(as.factor(target)),
                  group = paste(detrend_type, site, target)),
              data = filts_age |> filter(detrend_type != "value")) +
    geom_line(aes(y = envelope + 3.5, group = paste(detrend_type, site)),
              data = hb_prec_age |> filter(detrend_type != "value")) +
    geom_point(aes(y = pk),
               size = 3,
               data = filts_age |>
                 filter(target == "405 kyr") |>
                 filter(detrend_type != "value") |>
                 nest(.by = c(proxy, site, detrend_type, sol, flow, fhigh)) |>
                 mutate(pk = map(data, \(d) d |>
                                            select(age, filt) |>
                                            mutate(filt = -filt) |> # we want minima rather than maxima
                                            astrochron::peak(genplot = FALSE, verbose = FALSE))) |>
                 unnest(pk) |>
                 rename(age = Location, pk = Peak_Value) |>
                 mutate(pk = -pk)) +
    scale_x_reverse(breaks = seq(60, 75, 1),
                    minor_breaks = seq(60, 75, .1)) +
    labs(x = "Age (Ma)", y = "Normalized proxy",
         ## title = "Zumaia raw proxy record filters"
         ## title = "Zumaia fancy detrended proxy record filters"
         )
#+end_src

#+attr_latex: :width \linewidth
#+caption: *Zumaia/Sopelana detrended records (colour represents the way in which the detrending was done, see cref:tab:detrend_types) and various bandpass filters (405 kyr, 100 kyr, 22 kyr \pm 40% in frequency) in the time domain.* Top lines represent the Hilbert transform of the precession filter for comparison to the 405 and 100 kyr direct filters. Large dots identify minima in the 405 kyr filters, which should correspond to the vertical black lines (minima identified in the field and tuned to 405 kyr minima in AS). d13C shows a lag with respect to the other proxies.
#+RESULTS:
[[file:imgs/Zumaia_Sopelana_records_and_filters.png]]

**** compose an `eccentricity' curve from the data
:PROPERTIES:
:CREATED:  [2023-11-17 Fri 15:40]
:END:
#+begin_src R :results none
  data_ecc_age <- filts_age |>
    select(-p, -f, -range, -flow, -fhigh, -ref) |>
    pivot_wider(id_cols = c(proxy, site, detrend_type, sol, age),
                names_from = target, values_from = filt) |>
    tidylog::left_join(hb_prec_age) |>
    mutate(
      fracs = list(tribble( ~ comb, ~ s405, ~ s100,
                          "1:1", 1, 1,
                          "0.5:1", 0.5, 1,
                          "1:0.5", 1, 0.5## ,
                          ## "1:0.2", 1, 0.2 # this outperforms the others but is silly
                          )),
      # the phase relationships for the different proxies
      sign_405 = case_when(proxy == "d13C" ~ -1,
                           proxy == "Lstar" ~ -1,
                           proxy == "MS" ~ 1),
      sign_100 = case_when(proxy == "d13C" ~ -1,
                           proxy == "Lstar" ~ -1,
                           proxy == "MS" ~ 1)) |>
    unnest(fracs) |>
    mutate(filter = scale(sign_405 * s405 * `405 kyr` + sign_100 * s100 * `100 kyr`)[, 1],
           hilbert = scale(sign_405 * s405 * `405 kyr` + sign_100 * s100 * envelope)[, 1],
           # do we want to do this by site or not?
           .by = c(proxy, detrend_type, sol, comb)) |>
    pivot_longer(c(filter, hilbert),
                 names_to = "filt_env", values_to = "ecc") |>
    arrange(rev(site), rev(proxy), filt_env, comb, age)
#+end_src

**** [#B] add the orbital solution to the ecc curve and compute the RMSD
:PROPERTIES:
:CREATED:  [2023-09-26 Tue 16:51]
:END:

#+begin_src R :results none
  data_diffs_age <- data_ecc_age |>
    ## tidylog::filter(sol == "ZB18a") |>
    ## tidylog::filter(sol == "ZB20a") |>
    ## tidylog::filter(sol == "La11") |>
    ## tidylog::filter(site == "Zumaia") |>
    ## tidylog::filter(proxy == "MS") |>
    ## tidylog::filter(comb == "1:0.5") |>
    select(-envelope, -`405 kyr`, -`100 kyr`, -prec) |>
    ## mutate(proxy_lag = #case_when(
    ##          ## proxy == "d13C" ~ list(seq(44, 65, 5)), # 44 to 65 kyr (Batenburg et al., 2012)
    ##          ## proxy == "MS" ~ list(seq(0, 22, 5)),
    ##          ## proxy == "Lstar" ~ list(seq(0, 22, 5)),
    ##          ## TRUE ~ list(0.))
    ##          list(seq(0, 75, 15)), .by = proxy) |>
    ## unnest(cols = c(proxy_lag)) |>
    ## mutate(lagged = age + proxy_lag) |>
    mutate(ecc_sln = case_when(
             sol == "ZB18a" ~ approx(sln$age, sln$scl,
                                     xout = age)$y,
             sol == "ZB20a" ~ approx(sln2$age, sln2$scl,
                                     xout = age)$y,
             ## sol == "La11" ~ approx(sln3$age, sln3$scl,
             ##                        xout = age)$y,
             sol == "La10b" ~ approx(sln4$age, sln4$scl,
                                    xout = age)$y,
             sol == "La10c" ~ approx(sln5$age, sln5$scl,
                                    xout = age)$y,
             TRUE ~ NA_real_)) |>
    mutate(SD = (ecc_sln - ecc)^2) %>%
    assertr::verify(nrow(.) <= 6e6)

  msd_age <- data_diffs_age |>
      summarize(RMSD = sqrt(mean(SD)),
                .by = c(proxy, site, sol,
                        ## proxy_lag,
                        detrend_type, comb, filt_env)) |>
      arrange(RMSD)
#+end_src

**** plot data ecc from filters
:PROPERTIES:
:CREATED:  [2023-10-02 Mon 16:01]
:END:
#+begin_src R :results output graphics file :file imgs/Zumaia_MSD-vs-age.png :width 900
  data_ecc_age |>
    filter(detrend_type != "value") |>
    ggplot(aes(x = age * 0.001, y = ecc, colour = detrend_type)) +
    facet_grid(rows = vars(proxy, sol),
               cols = vars(filt_env, comb)) +
    geom_line(aes(group = paste(proxy, site, detrend_type, sol, comb, filt_env))) +
    scale_x_reverse() +
    labs(x = "Age (Ma)")
#+end_src

#+caption: Artificial 405 kyr + 100 kyr filters for Zumaia/Sopelana.
#+RESULTS:
[[file:imgs/Zumaia_MSD-vs-age.png]]

**** COMMENT plot the squared difference vs age
:PROPERTIES:
:CREATED:  [2023-10-02 Mon 16:05]
:END:
For which time periods is the construction doing well and where is it failing?

#+begin_src R :results output graphics file :file imgs/Zumaia_age_MSD-overview.png :width 800
  data_diffs_age |>
    ## filter(detrend_type != "value") |>
    filter(detrend_type == "lin_gam_det") |>
    ggplot(aes(x = age * 0.001,
               y = squared_diff,
               ## colour = paste(site, proxy)
               )) +
    facet_grid(cols = vars(filt_env, comb), rows = vars(proxy, sol)) +
    ## geom_point() +
    ## geom_vline(xintercept = c(## kpg_age * 0.001, # based on 405 kyr minima in La11
    ##              66.043 + c(-1, 0, 1) * 0.043 # based on 40Ar/39Ar and U-Pb data from bentonites
    ##            ),
    ##            alpha = .3) +
    geom_line(aes(#colour = detrend_type,
                  group = paste(comb, filt_env, site, proxy)),
              ## linewidth = .7
              ) +
    scale_colour_viridis_d() +
    scale_x_reverse(breaks = seq(65,75,1)
                    minor_breaks = seq(65, 75, .1)) +
    labs(
      ## title = "Combinations of 405 kyr and 100 kyr filters and their MSD scores",
      x = "Age (Ma)", y = "Squared difference"## ,
      ## colour = tau~"(kyr/m) = Sedimentation rate (cm/kyr)"
    ) #+
    ## theme(legend.position = c(.1, .83))
#+end_src

#+caption: *Squared difference as a function of age* Here we vary the age of the K/T and apply the age model based on 405 kyr cycles identified in the field. The RMSD is the mean squared difference between the filtered and scaled proxy record and the filtered and scaled orbital solution.
#+RESULTS:
[[file:imgs/Zumaia_age_MSD-overview.png]]


**** which one is best?
:PROPERTIES:
:CREATED:  [2023-11-17 Fri 16:01]
:END:
#+begin_src R :results none
  best_age <- msd_age |>
    filter(filt_env != "hilbert") |>
    # then filter out the best for each site as well
    tidylog::filter(
               RMSD == min(RMSD),
               .by = c(proxy,
                       ## detrend_type,
                       ## comb,
                       filt_env,
                       site,
                       sol)
    ) |>
    arrange(site, proxy, RMSD, sol)
#+end_src

#+begin_src R :exports both
  msd_age |>
    filter(comb == "1:1") |>
    filter(detrend_type == "scl") |>
    filter(filt_env == "filter") |>
    arrange(site, proxy, sol) |>
    select(-detrend_type, -comb, -filt_env)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 20 × 4
   proxy site     sol    RMSD
   <chr> <chr>    <chr> <dbl>
 1 Lstar Sopelana La10b 1.33
 2 Lstar Sopelana La10c 1.25
 3 Lstar Sopelana ZB18a 1.41
 4 Lstar Sopelana ZB20a 1.13
 5 MS    Sopelana La10b 1.31
 6 MS    Sopelana La10c 1.13
 7 MS    Sopelana ZB18a 1.22
 8 MS    Sopelana ZB20a 0.878
 9 Lstar Zumaia   La10b 1.20
10 Lstar Zumaia   La10c 1.31
11 Lstar Zumaia   ZB18a 1.19
12 Lstar Zumaia   ZB20a 1.26
13 MS    Zumaia   La10b 1.15
14 MS    Zumaia   La10c 1.26
15 MS    Zumaia   ZB18a 1.18
16 MS    Zumaia   ZB20a 1.28
17 d13C  Zumaia   La10b 1.20
18 d13C  Zumaia   La10c 1.25
19 d13C  Zumaia   ZB18a 1.25
20 d13C  Zumaia   ZB20a 1.21
#+end_example

#+begin_src R :results output graphics file :file imgs/Zumaia-RMSD-scores.png :width 900 :height 700
  msd_age |>
    # richard doesn't like Hilbert transform, too sensitive numerically!
    filter(filt_env != "hilbert") |>
    ggplot(aes(x = sol, y = RMSD,
               colour = detrend_type,
               shape = comb)) +
    facet_grid(cols = vars(site, filt_env), rows = vars(proxy)) +
    geom_point(size = 4) +
    geom_line(aes(group = paste(comb, detrend_type, filt_env)))
#+end_src

#+caption: Overview plot of RMSD scores by applying the 405 kyr minima age model from the field (no tie-point uncertainty). Colours represent ~detrend_type~ (see cref:tab:detrend_types for explanation), point shapes represent different proportions of the 405 kyr component and the 100 kyr component. Horizontal groups consist of sites Sopelana (older) and Zumaia (younger) and whether the 100 kyr component was generated by filtering or by a hilbert transform of the precession filter. Vertical groups are proxy type.
#+RESULTS:
[[file:imgs/Zumaia-RMSD-scores.png]]

**** plot the curves with the lowest overall RMSD
:PROPERTIES:
:CREATED:  [2023-11-17 Fri 16:02]
:END:

#+begin_src R :results output graphics file :file imgs/best_fits_age.png :width 1200 :height 800
  # this plot crashes if I plot them all
  data_diffs_age |>
    ## filter(proxy == "MS", site == "Zumaia") |>
    # filter out some of the best fits
    tidylog::inner_join(best_age) |>
    ggplot(aes(x = age / 1e3,
               group = paste(comb, filt_env, site),
               ## colour = 1 / tau * 100, # convert from kyr/m to cm/kyr
               ## colour = kpg_age,
               ## linetype = filt_env # we plot both hilbert and filter now
               )) +
    facet_grid(rows = vars(proxy, sol)
               ## cols = vars(site),
               ## scales = "free_x", space = "free_x"
               ) +
    # plot the orbital solutions
    # 405 kyr filters
    geom_line(aes(x = age * 0.001,
                  y = scale(filt)[, 1],
                  group = sol),
              inherit.aes = FALSE,
              alpha = .4,
              data = sln_filters |>
                filter(sln != "La11") |>
                filter(target == "405 kyr") |>
                filter(age >= 65900, age <= 71200) |>
                rename(sol = sln)) +
    # raw orbital solution
    geom_line(aes(y = ecc_sln),
              alpha = .4,
              linetype = 1) +
    # orbital solution 405 kyr minima as points
    geom_point(aes(x = age / 1e3, y = -2), inherit.aes = FALSE, data = agem_sol) +
    # proxy 'eccentricity' record
    geom_line(aes(y = ecc, RMSD = RMSD,
                  colour = sol,
                  alpha = RMSD,
                 ##  colour = paste("K/T age = ", kpg_age / 1000,
                 ##                 "\ntau = ", tau,
                 ##                 "\nsed. rate = ", round(1 / tau * 100, 2))
                 ),
              linewidth = 1.2) +
    # annotate RMSD for each fit
    geom_text(aes(x = age / 1e3, y = as.integer(as.factor(filt_env)) + 2.7,
                  group = site,
                  label = round(RMSD, 3),
                  colour = sol),
              hjust = 0, alpha = 1,
              data = data_diffs_age |>
                tidylog::inner_join(best_age) |>
                summarize(age = mean(age), RMSD = min(RMSD),
                          .by = c(filt_env, sol, site, proxy))) +
    geom_text(aes(y = as.integer(as.factor(filt_env)),
                  group = site,
                  label = paste(## proxy_lag,
                                detrend_type, comb, filt_env)),
              hjust = 0,
              data = data_diffs_age |>
                inner_join(best_age) |>
                summarize(age = max(age),
                          .by = c(sol, site, proxy,
                                  ## proxy_lag,
                                  detrend_type, comb, filt_env))) +
    scale_x_reverse(breaks = 66:72, minor_breaks = seq(59.9, 73, .1)) +
    ## scale_colour_viridis_d() +
    scale_colour_brewer(type = "qual", guide = FALSE) +
    scale_alpha_continuous(range = c(1, .5)) +
    ## geom_vline(aes(xintercept = kpg_age * 0.001), colour = "red") +
    geom_vline(aes(xintercept = age1),
               colour = "red",
               data = kpg_ages |>
                  filter(sln != "La11") |>
                 rename(sol = sln)) +
    labs(x = "Age (Ma)",
         y = "Normalized filtered proxy / Normalized astronomical solution",
         ## linetype = "405:100 kyr weighing",
         ## colour = "Age of the K/T boundary",
         ## colour = "Sedimentation rate (cm/kyr)",
         colour = "",
         alpha = "RMSD\n(lower = better)",
         ## title = "Zumaia (right) and Sopelana (left) Cretaceous proxies tuned to 3 orbital solutions",
         ## subtitle = str_wrap("Root mean square deviation (RMSD, opacity and numbers above respective lines) between normalized proxy 'eccentricity' construct (coloured lines, calculated as 0.5 * normalized 405 kyr filter + normalized 100 kyr filter) and normalized orbital solution (light gray lines), after anchoring 405-kyr minima identified in the field to 405 kyr minima in each orbital solution (black dots). Normalized 405 kyr filters of orbital solutions (light gray lines) and K/T age (red line) are shown.", width = 79)
         ) +
    theme(legend.pos = c(.0381, .95),
          legend.background = element_blank(),
          legend.key.height = unit(.2, "mm")
          ## plot.title = element_text(hjust = 0.5),
          ## plot.subtitle = element_text(hjust = 0.5)
          )
#+end_src

#+attr_latex: :width 1.2\linewidth
#+name: fig:best-age
#+caption: *Zumaia (right) and Sopelana (left) Cretaceous proxies tuned to 3 orbital solutions.*
#+caption: Root mean square deviation (RMSD, opacity and numbers above respective lines) between normalized proxy `eccentricity' construct (coloured lines, calculated as scaled sum of normalized 405 kyr filter and normalized 100 kyr filter/Hilbert transform of precession filter) and normalized orbital solution (light gray lines), after anchoring 405-kyr minima identified in the field to 405 kyr minima in each orbital solution (black dots). Normalized 405 kyr filters of orbital solutions (light gray lines) and K/T age (red line) are shown.
#+caption: For now I've also quickly added a text annotation that says the number of kyr of lag applied to this record, which detrending type we've done (see cref:tab:detrend_types), which combination of 405 kyr and 100 kyr filtered signals we've created and whether it was a combination of filters or of a filter and a hilbert transform of the precession filter.
#+RESULTS:
[[file:imgs/best_fits_age.png]]

**** COMMENT plot data and orbital solution
:PROPERTIES:
:CREATED:  [2023-09-26 Tue 16:51]
:END:
#+begin_src R :results output graphics file :file imgs/Zumaia_OS-ecc-vs-age.png :width 900
  smooth_ages |>
    filter(detrend_type != "value") |>
    ggplot(aes(x = age / 1e3, y = value, colour = site, group = site)) +
    facet_grid(rows = vars(proxy,sol), scales = "free_y") +
    geom_vline(aes(xintercept = age / 1e3), data = agem_simple) +
    geom_line(aes(group = detrend_type)) +
    geom_line(aes(x = age / 1e3, y = scl),
              inherit.aes = FALSE,
              colour = "gray",
              data = sln |> bind_rows(sln2) |> bind_rows(sln3) |>
                filter(age < 71300, age > 65800) |>
                rename (sol = sln)) +
    ## geom_line(aes(y = scl), colour = "gray", inherit.aes = FALSE, data = sln) +
    ## geom_line(aes(y = `405` + `100`, colour = "1:1 filt"), data = data_ecc) +
    ## geom_line(aes(y = `405` + .5 * `100`, colour = "1:0.5 filt"), data = data_ecc) +
    ## geom_line(aes(y = `405` + 2 * envelope, colour = "1:2 filt/hilbert"), data = data_ecc) +
    ## geom_line(aes(y = `405` + envelope, colour = "1:1 filt/hilbert"), data = data_ecc) +
    ## geom_line(aes(y = `405` + 0.5 * envelope, colour = "1:0.5 filt/hilbert"), data = data_ecc) +
    ## geom_line(aes(y = envelope + 5.5, group = site), colour = "red", data = hb_age_prec) +
    scale_x_reverse() +
    labs(x = "Age (Ma)", y = "Normalized filtered proxy",
         ## title = "Zumaia raw proxy record filters"
         ## title = "Zumaia fancy detrended proxy record filters"
         )
#+end_src

#+RESULTS:
[[file:imgs/Zumaia_OS-ecc-vs-age.png]]

**** COMMENT do the same analysis with different ages for the K/T boundary
:PROPERTIES:
:CREATED:  [2023-09-26 Tue 16:52]
:END:
This slides the whole time series along the time axis and checks the RMSD w/ respect to ZB18a.

#+begin_src R :results output graphics file :file imgs/Zumaia_time-slider.png :width 900
  data_diffs |>
    ggplot(aes(x = kpg_age * 0.001, y = squared_diff,
               paste(site, proxy, name))) +
    geom_line() +
    facet_grid(rows = vars(site, proxy), cols = vars(comb, filt_env)) +
    labs(x = "Age of the K/T boundary", y = "RMSD")
#+end_src

#+RESULTS:
[[file:imgs/Zumaia_time-slider.png]]
*** variable tie-points
:PROPERTIES:
:CREATED:  [2023-10-03 Tue 16:09]
:END:
I have tried various ways of letting the tie-point depths in the age model change for optimal fits, but this often resulted in overlapping bits of record where for one 405 kyr cycle one sedimentation rate gave the best fit, and for another another.
This was messy but after trying for stupid amounts of time, I got it working in a simple hardcoded way. I think this *could still result in some parts of the record being counted twice or not at all*!

The main approach is that we re-use the depth-filtered records, apply the age model based on the tiepoint uncertainty, then for each 405 kyr cycle we find the best fit and show it.
**** apply age model for variable tie-points
:PROPERTIES:
:CREATED:  [2023-11-21 Tue 16:16]
:END:
#+begin_src R
  # an attempt to work with the raw data first, and do the filtering after:
  ## tie_ages <- smooth_pred |>
    ## select(-comment, -colour, -lin, -lin_gam) |>
  # work with the already filtered data in the depth domain
  diffs_tie <- data_ecc |>
    select(-`405 kyr`, -`100 kyr`, -prec, -envelope) |>
    ## tidylog::filter(detrend_type == "lin_gam_det") |>
    # we want to group by each Ma405 cycle
    mutate(Ma405 = findInterval(depth, agem_simple$strat_bot) - 1) |>
    nest(.by = Ma405) |>
    # there is a HARDCODED +-2 m error on the depth in the age model now
    mutate(tie_err = list(seq(-2, 2, 1))) |>
    unnest(cols = c(tie_err)) |>
    unnest(cols = c(data)) |>
    ## tidylog::filter(!(Ma405 == 0 & tie_err != 0)) |> # we know where the K/T boundary is in the depth domain
    ## mutate(age = kpg_age + (depth + tie_err) * tau + proxy_lag) |>
    # add target orbital solution ages
    mutate(sol = list(c("ZB18a", "ZB20a", ## "La11"
                        "La10b", "La10c"
                        ))) |>
    unnest(cols = c(sol)) |>
    mutate(age = case_when(
             # I'm doing this in a ridiculous way with explicity copies because I
             # don't know how to do it in a simpler way...
             sol == "ZB18a" & tie_err == -2. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "ZB18a" & agem_tie$tie_err == -2],
                                   agem_tie$age[agem_tie$sol == "ZB18a" & agem_tie$tie_err == -2],
                                   xout = depth)$y,
             sol == "ZB18a" & tie_err == -1. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "ZB18a" & agem_tie$tie_err == -1],
                                   agem_tie$age[agem_tie$sol == "ZB18a" & agem_tie$tie_err == -1],
                                   xout = depth)$y,
             sol == "ZB18a" & tie_err == 0. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "ZB18a" & agem_tie$tie_err == 0],
                                   agem_tie$age[agem_tie$sol == "ZB18a" & agem_tie$tie_err == 0],
                                   xout = depth)$y,
             sol == "ZB18a" & tie_err == 1. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "ZB18a" & agem_tie$tie_err == 1],
                                   agem_tie$age[agem_tie$sol == "ZB18a" & agem_tie$tie_err == 1],
                                   xout = depth)$y,
             sol == "ZB18a" & tie_err == 2. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "ZB18a" & agem_tie$tie_err == 2],
                                   agem_tie$age[agem_tie$sol == "ZB18a" & agem_tie$tie_err == 2],
                                   xout = depth)$y,

             sol == "ZB20a" & tie_err == -2. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "ZB20a" & agem_tie$tie_err == -2],
                                   agem_tie$age[agem_tie$sol == "ZB20a" & agem_tie$tie_err == -2],
                                   xout = depth)$y,
             sol == "ZB20a" & tie_err == -1. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "ZB20a" & agem_tie$tie_err == -1],
                                   agem_tie$age[agem_tie$sol == "ZB20a" & agem_tie$tie_err == -1],
                                   xout = depth)$y,
             sol == "ZB20a" & tie_err == 0. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "ZB20a" & agem_tie$tie_err == 0],
                                   agem_tie$age[agem_tie$sol == "ZB20a" & agem_tie$tie_err == 0],
                                   xout = depth)$y,
             sol == "ZB20a" & tie_err == 1. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "ZB20a" & agem_tie$tie_err == 1],
                                   agem_tie$age[agem_tie$sol == "ZB20a" & agem_tie$tie_err == 1],
                                   xout = depth)$y,
             sol == "ZB20a" & tie_err == 2. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "ZB20a" & agem_tie$tie_err == 2],
                                   agem_tie$age[agem_tie$sol == "ZB20a" & agem_tie$tie_err == 2],
                                   xout = depth)$y,

             ## sol == "La11" & tie_err == -2. ~
             ##   Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "La11" & agem_tie$tie_err == -2],
             ##                       agem_tie$age[agem_tie$sol == "La11" & agem_tie$tie_err == -2],
             ##                       xout = depth)$y,
             ## sol == "La11" & tie_err == -1. ~
             ##   Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "La11" & agem_tie$tie_err == -1],
             ##                       agem_tie$age[agem_tie$sol == "La11" & agem_tie$tie_err == -1],
             ##                       xout = depth)$y,
             ## sol == "La11" & tie_err == 0. ~
             ##   Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "La11" & agem_tie$tie_err == 0],
             ##                       agem_tie$age[agem_tie$sol == "La11" & agem_tie$tie_err == 0],
             ##                       xout = depth)$y,
             ## sol == "La11" & tie_err == 1. ~
             ##   Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "La11" & agem_tie$tie_err == 1],
             ##                       agem_tie$age[agem_tie$sol == "La11" & agem_tie$tie_err == 1],
             ##                       xout = depth)$y,
             ## sol == "La11" & tie_err == 2. ~
             ##   Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "La11" & agem_tie$tie_err == 2],
             ##                       agem_tie$age[agem_tie$sol == "La11" & agem_tie$tie_err == 2],
             ##                       xout = depth)$y,

             sol == "La10b" & tie_err == -2. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "La10b" & agem_tie$tie_err == -2],
                                   agem_tie$age[agem_tie$sol == "La10b" & agem_tie$tie_err == -2],
                                   xout = depth)$y,
             sol == "La10b" & tie_err == -1. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "La10b" & agem_tie$tie_err == -1],
                                   agem_tie$age[agem_tie$sol == "La10b" & agem_tie$tie_err == -1],
                                   xout = depth)$y,
             sol == "La10b" & tie_err == 0. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "La10b" & agem_tie$tie_err == 0],
                                   agem_tie$age[agem_tie$sol == "La10b" & agem_tie$tie_err == 0],
                                   xout = depth)$y,
             sol == "La10b" & tie_err == 1. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "La10b" & agem_tie$tie_err == 1],
                                   agem_tie$age[agem_tie$sol == "La10b" & agem_tie$tie_err == 1],
                                   xout = depth)$y,
             sol == "La10b" & tie_err == 2. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "La10b" & agem_tie$tie_err == 2],
                                   agem_tie$age[agem_tie$sol == "La10b" & agem_tie$tie_err == 2],
                                   xout = depth)$y,

             sol == "La10c" & tie_err == -2. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "La10c" & agem_tie$tie_err == -2],
                                   agem_tie$age[agem_tie$sol == "La10c" & agem_tie$tie_err == -2],
                                   xout = depth)$y,
             sol == "La10c" & tie_err == -1. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "La10c" & agem_tie$tie_err == -1],
                                   agem_tie$age[agem_tie$sol == "La10c" & agem_tie$tie_err == -1],
                                   xout = depth)$y,
             sol == "La10c" & tie_err == 0. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "La10c" & agem_tie$tie_err == 0],
                                   agem_tie$age[agem_tie$sol == "La10c" & agem_tie$tie_err == 0],
                                   xout = depth)$y,
             sol == "La10c" & tie_err == 1. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "La10c" & agem_tie$tie_err == 1],
                                   agem_tie$age[agem_tie$sol == "La10c" & agem_tie$tie_err == 1],
                                   xout = depth)$y,
             sol == "La10c" & tie_err == 2. ~
               Hmisc::approxExtrap(agem_tie$tie_depth[agem_tie$sol == "La10c" & agem_tie$tie_err == 2],
                                   agem_tie$age[agem_tie$sol == "La10c" & agem_tie$tie_err == 2],
                                   xout = depth)$y,

             TRUE ~ NA_real_)) |> # we only do the below when we re-use the already filtered record
    # add orbital solution
    mutate(ecc_sln = case_when(
             sol == "ZB18a" ~ approx(sln$age, sln$scl,
                                     xout = age)$y,
             sol == "ZB20a" ~ approx(sln2$age, sln2$scl,
                                     xout = age)$y,
             ## sol == "La11" ~ approx(sln3$age, sln3$scl,
             ##                        xout = age)$y,
             sol == "La10b" ~ approx(sln4$age, sln4$scl,
                                     xout = age)$y,
             sol == "La10c" ~ approx(sln5$age, sln5$scl,
                                     xout = age)$y,
             TRUE ~ NA_real_)) |>
    # calculate squared difference
    mutate(SD = (ecc - ecc_sln)^2)

  # calculate the RMSD for each unique parameter combination
  msd_tie <- diffs_tie |>
    summarize(RMSD = sqrt(mean(SD)),
              .by = c(proxy, site, comb,
                      detrend_type,
                      filt_env,
                      Ma405,
                      tie_err,
                      sol))
#+end_src

#+RESULTS:

**** illustrate overlap/underlap problem
:PROPERTIES:
:CREATED:  [2023-11-21 Tue 14:09]
:END:

If we select the Ma405 cycles with the /best/ RMSD scores, this means that for some they'll get a tiepoint uncertainty of +2 m and for the next cycle -2 m, resulting in overlapping depths getting mapped to the same age. This results in either a gap or an overlap at the edges of the 405 kyr minima!

#+begin_src R :results output graphics file :file imgs/Zumaia_tiepoint_uncertainty.png :width 900 :height 1200
  diffs_tie |>
    # filter out some of the best fits
    tidylog::inner_join(best_tie) |>
    # plot vs. depth to illustrate tiepoint uncertainty
    ggplot(aes(x = depth, y = ecc)) +
    facet_grid(rows = vars(proxy, sol)) +
    scale_x_reverse() +
    scale_colour_brewer(type = "qual", guide = FALSE) +
    theme(legend.pos = c(.1, .95)) +
    geom_line(aes(colour = proxy,
                  linetype = filt_env,
                  group = paste(filt_env, site))) +
    # annotate maxima
    geom_segment(aes(x = strat_bot, xend = strat_top,
                     y = 2, yend = 2),
                 data = agem) +
    # annotate all tiepoints
    geom_point(aes(x = strat_bot, y = -2),
               data = agem_tie) +
    # annotate tiepoint error
    geom_point(aes(x = tie_depth, y = -2),
               size = .3,
               data = agem_tie) #+
    # annotate used tiepoint for best fit
    ## geom_point(aes(x = depth, y = tie_err, group = Ma405))
#+end_src

#+attr_latex: :width \textwidth
#+caption: Best fits vs. depth, illustrating agemodel tie-point uncertainty overlap issues.
#+RESULTS:
[[file:imgs/Zumaia_tiepoint_uncertainty.png]]

**** NEXT bandpass filters
:PROPERTIES:
:CREATED:  [2023-11-21 Tue 16:16]
:END:
How can we do bandpass filtering if we don't yet know which combination of filters is best?
i.e. for Ma405^{1} the best tie_err might be -2, whereas for Ma405^{2} it may be +2, how can we filter if we don't know yet which age tiepoints to use, and therefore don't have a simple age column yet?
#+begin_src R :eval never
  tie_filts <- tie_ages |>
    bandpass_filter(freqs = my_filt_age, x = age, y = value,
                    nest = c("proxy", "site", "detrend_type", "sol"))
#+end_src

**** COMMENT add astronomical solutions and calculate diff
:PROPERTIES:
:CREATED:  [2023-11-21 Tue 16:16]
:END:
#+begin_src R :eval never
    ## mutate(age = age + proxy_lag) |>
    mutate(ecc_sln = case_when(
             sol == "ZB18a" ~ approx(sln$age, sln$scl,
                                     xout = age)$y,
             sol == "ZB20a" ~ approx(sln2$age, sln2$scl,
                                     xout = age)$y,
             sol == "La11" ~ approx(sln3$age, sln3$scl,
                                    xout = age)$y,
             TRUE ~ NA_real_)) |>
    mutate(SD = (ecc - ecc_sln)^2)

  msd_tie <- diffs_tie |>
    summarize(RMSD = sqrt(mean(SD)),
              .by = c(proxy, site, comb,
                      detrend_type,
                      filt_env, #inv_sedrate,
                      Ma405,
                      ## tie_err,
                      #kpg_age,
                      ## proxy_lag,
                      sol)) |>
    arrange(RMSD)
#+end_src

#+RESULTS:
**** COMMENT use eTimeOpt to estimate sedimentation rates
:PROPERTIES:
:CREATED:  [2023-11-15 Wed 15:57]
:END:
#+begin_src R
  res0 <- comp |>
    filter(site == "Zumaia", proxy == "MS") |>
    select(depth, MS = value) |>
    astrochron::linterp(genplot = FALSE) |>
    astrochron::timeOpt(sedmin = 2, sedmax = 6,
                        targetE = c(405, 100),
                        targetP = c(22))

  res <- comp |>
    filter(site == "Zumaia", proxy == "MS") |>
    select(depth, MS = value) |>
    astrochron::linterp(genplot = FALSE) |>
    astrochron::eTimeOpt(step = 1, fit = 1, output = 1,
                         sedmin = 0.5, sedmax = 6,
                         targetE = c(405, 100),
                         targetP = c(22))

  # extract the optimal fits for the power optimization
  sedrates <- astrochron::eTimeOptTrack(res[2])

  # extract the optimal fits for the envelope*power optimization
  osedrates <- astrochron::eTimeOptTrack(res[3])

  # interactively track the results
  sedrates_trace <- astrochron::tracePeak(res[2])
  sedrates_track <- astrochron::trackPeak(res[2])

  # eval precession & ecc power plus short-ecc modulations
  ## eTimeOpt(fit = 2)


#+end_src
**** which one is best?
:PROPERTIES:
:CREATED:  [2023-11-14 Tue 12:22]
:END:
We filter out the best fit for each proxy, site, proxy_lag, and astronomical solution. This means we now finally get the best value for each Ma405 kyr group

#+begin_src R
  best_tie_405 <- msd_tie |>
    tidylog::filter(RMSD == min(RMSD),
                    # for each of the following we want the best
                    # average over the remaining groups
                    .by = c(proxy, # all three proxies
                            site, # both sites
                            comb,
                            detrend_type,
                            filt_env, # two lines per graph
                            Ma405, # separate lines for each 405 kyr, otherwise we only get 1 per site
                            sol, # each solution
                            ))

  best_tie <- diffs_tie |>
    filter(filt_env != "hilbert") |>
    # filter out only those with the best combinations of parameters
    tidylog::inner_join(best_tie_405) |>
    # then calculate the RMSD for each of these best records
    tidylog::summarize(RMSD = sqrt(mean(SD)),
                       .by = c(
                         proxy, site, comb,
                         filt_env, detrend_type, sol))
#+end_src

#+RESULTS:
: filter: removed 19,680 rows (80%), 4,920 rows remaining
: + Joining with `by = join_by(Ma405, proxy, site, detrend_type, comb, filt_env, tie_err, sol)`
: inner_join: added one column (RMSD)
: rows only in x  (2,077,920)
: rows only in y  (        0)
: matched rows       519,480
:                 ===========
: rows total         519,480
: summarize: now 600 rows and 7 columns, ungrouped

Note that a lot of RMSD scores are at least slightly above 1! Even if we do the exact same analysis as in [cite:@ZeebeLourens2022EPSL], by filtering out only ~comb == "1:1"~, ~filt_env == "filter"~, and ~detrend_type == "scl"~.

However, this averages all the ~tie_err~ values for all the Ma405 cycles, so it's not the best fit.

#+begin_src R :exports both
  best_tie |>
    filter(comb == "1:1") |>
    filter(detrend_type == "scl") |>
    filter(filt_env == "filter")
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 20 × 7
   proxy site     comb  filt_env detrend_type sol    RMSD
   <chr> <chr>    <chr> <chr>    <chr>        <chr> <dbl>
 1 d13C  Zumaia   1:1   filter   scl          ZB18a 0.973
 2 d13C  Zumaia   1:1   filter   scl          ZB20a 0.997
 3 d13C  Zumaia   1:1   filter   scl          La10b 0.957
 4 d13C  Zumaia   1:1   filter   scl          La10c 0.992
 5 MS    Zumaia   1:1   filter   scl          ZB18a 0.945
 6 MS    Zumaia   1:1   filter   scl          La10b 0.995
 7 Lstar Zumaia   1:1   filter   scl          ZB18a 1.01
 8 Lstar Zumaia   1:1   filter   scl          ZB20a 1.03
 9 Lstar Zumaia   1:1   filter   scl          La10b 0.986
10 Lstar Zumaia   1:1   filter   scl          La10c 1.04
11 MS    Zumaia   1:1   filter   scl          ZB20a 1.02
12 MS    Zumaia   1:1   filter   scl          La10c 1.02
13 MS    Sopelana 1:1   filter   scl          La10b 1.03
14 MS    Sopelana 1:1   filter   scl          La10c 1.00
15 Lstar Sopelana 1:1   filter   scl          ZB18a 1.04
16 MS    Sopelana 1:1   filter   scl          ZB18a 0.777
17 MS    Sopelana 1:1   filter   scl          ZB20a 0.965
18 Lstar Sopelana 1:1   filter   scl          ZB20a 1.18
19 Lstar Sopelana 1:1   filter   scl          La10b 1.15
20 Lstar Sopelana 1:1   filter   scl          La10c 1.20
#+end_example

#+begin_src R :results output graphics file :file imgs/Zumaia-tie-RMSD-scores.png :width 900 :height 700
  best_tie |>
    ggplot(aes(x = sol, y = RMSD,
             colour = detrend_type,
             shape = comb)) +
    facet_grid(cols = vars(site, filt_env), rows = vars(proxy)) +
    ## coord_cartesian(ylim = c(0.7, 1.3))+
    # annotate scores for each Ma405 cycle
    ## geom_point(alpha = .05, data = msd_tie) +
    ## geom_line(aes(group = paste(comb, detrend_type, filt_env,
    ##                             Ma405, tie_err)),
    ##           alpha = .05,
    ##           data = msd_tie) +
    # only the best combinations
    geom_point(size = 4) +
    geom_line(aes(group = paste(comb, detrend_type, filt_env)))
#+end_src

#+caption: Best tiepoint-varying RMSD scores for each astronomical solution, site, ~filt_env~, ~detrend_type~, and ~comb~. Lower opacity points/lines reflect RMSD scores for each Ma405 kyr cycle and tie-point error, and thus show larger variability.
#+RESULTS:
[[file:imgs/Zumaia-tie-RMSD-scores.png]]


**** plot the curves with the lowest overall RMSD
:PROPERTIES:
:CREATED:  [2023-09-27 Wed 19:03]
:END:
This is [[cref:fig:best-age]], the most elaborate figure I've been able to concoct so far!

#+begin_src R :results output graphics file :file imgs/best_fits_tiepoints.png :width 1200 :height 800
  my_filt <- function(data) {
    data |>
      filter(comb == "1:0.5") |>
      filter(detrend_type == "lin_scl") |>
      filter(filt_env == "filter")
  }

  # this plot crashes if I plot them all
  diffs_tie |>
    # filter out the best fits for each 405 kyr cycle
    tidylog::inner_join(best_tie_405) |>
    ## # filter out best fits
    ## tidylog::inner_join(best_tie) |>
    my_filt() |>
    ggplot(aes(x = age / 1e3,
               group = paste(sol,
                             proxy, site,
                             detrend_type,
                             comb,
                             filt_env,
                             Ma405
                             ),
               ## linetype = filt_env,
               )) +
    facet_grid(rows = vars(proxy, sol)) +
    # plot the orbital solutions
    # 405 kyr filters
    geom_line(aes(x = age / 1e3,
                  y = scale(filt)[, 1],
                  ## linetype = filt_env,
                  group = sol),
              alpha = .4,
              data = sln_filters |>
                filter(sln != "La11") |>
                filter(target == "405 kyr") |>
                filter(age >= 65900, age <= 71200) |>
                rename(sol = sln)) +
    # raw orbital solution
    geom_line(aes(y = ecc_sln),
              alpha = .4,
              linetype = 1) +
    # orbital solution 405 kyr minima as points
    geom_point(aes(x = age / 1e3, y = -2),
               inherit.aes = FALSE,
               data = agem_tie |>
                 distinct(sol, age, .keep_all = TRUE)) +
    # proxy 'eccentricity' record
    geom_line(aes(y = ecc, RMSD = RMSD,
                  ## colour = proxy,
                  ## colour = detrend_type,
                  colour = factor(tie_err),
                  ## colour = depth,

                  ## alpha = RMSD,

                  ## linetype = filt_env,
                  ## group = proxy_lag
                 ##  colour = paste("K/T age = ", kpg_age / 1000,
                 ##                 "\ntau = ", tau,
                 ##                 "\nsed. rate = ", round(1 / tau * 100, 2))
                 )## ,
              ## linewidth = 1.2
              ) +
    # annotate tie_err for each 405 kyr fit
    geom_text(aes(x = age / 1e3, y = 1.7,
                  group = site,
                  label = tie_err,
                  colour = factor(tie_err)
                  ## colour = depth
                  ),
              hjust = 0, alpha = 1,
              data = diffs_tie |>
                my_filt() |>
                tidylog::inner_join(best_tie_405) |>
                summarize(depth = mean(depth),
                          age = mean(age),
                          tie_err = mean(tie_err),
                          .by = c(sol, site, proxy, Ma405, detrend_type))) +
    ## # annotate RMSD for each 405 kyr fit
    ## geom_text(aes(x = age / 1e3, y = 2.7,
    ##               group = site,
    ##               label = round(RMSD, 3),
    ##               ## colour = depth
    ##               colour = detrend_type
    ##               ),
    ##           hjust = 0, alpha = 1,
    ##           data = diffs_tie |>
    ##             tidylog::inner_join(best_tie_405) |>
    ##             summarize(depth = mean(depth),
    ##                       age = mean(age),
    ##                       RMSD = min(RMSD),
    ##                       .by = c(sol, site, proxy, Ma405, detrend_type))) +
    # annotate RMSD for each proxy/site/sol combo
    geom_text(aes(x = age / 1e3, y = 3.7,
                  group = site,
                  label = round(RMSD, 3),
                  ## colour = proxy
                  ## colour = detrend_type
                  ),
              hjust = 0, alpha = 1,
              data = diffs_tie |>
                my_filt() |>
                inner_join(best_tie) |>
                summarize(age = mean(age),
                          RMSD = mean(RMSD),
                          .by = c(proxy, site, comb, sol, detrend_type))) +
    scale_x_reverse(breaks = 66:72, minor_breaks = seq(59.9, 73, .1)) +
    ## scale_colour_viridis_c() +
    ## scale_colour_brewer(type = "qual", guide = FALSE) +
    ## scale_colour_brewer(type = "qual") +

    ## scale_alpha_continuous(range = c(1, .3)) +

    ## geom_vline(aes(xintercept = kpg_age * 0.001), colour = "red") +
    ## geom_vline(aes(xintercept = age / 1e3), data = agem_tie) +
    geom_vline(aes(xintercept = age1),
               colour = "red",
               data = kpg_ages |>
                 filter(sln != "La11") |>
                 rename(sol = sln)) +
    labs(x = "Age (Ma)",
         y = "Normalized filtered proxy / Normalized astronomical solution",
         ## linetype = "405:100 kyr weighing",
         ## colour = "Age of the K/T boundary",
         ## colour = "Sedimentation rate (cm/kyr)",
         ## colour = "",
         ## alpha = "RMSD\n(lower = better)",
         ## title = "Zumaia (right) and Sopelana (left) Cretaceous proxies tuned to 3 orbital solutions",
         ## subtitle = str_wrap("Root mean square deviation (RMSD, opacity and numbers above respective lines) between normalized proxy 'eccentricity' construct (coloured lines, calculated as 0.5 * normalized 405 kyr filter + normalized 100 kyr filter) and normalized orbital solution (light gray lines), after anchoring 405-kyr minima identified in the field to 405 kyr minima in each orbital solution (black dots). Normalized 405 kyr filters of orbital solutions (light gray lines) and K/T age (red line) are shown.", width = 79)
         ) +
    theme(
      #legend.pos = c(.0381, .95), # only RMSD
      legend.pos = c(.0381, .85), # also colour = depth
          legend.background = element_blank(),
          ## legend.key.height = unit(.2, "mm")
          ## plot.title = element_text(hjust = 0.5),
          ## plot.subtitle = element_text(hjust = 0.5)
          )
#+end_src

#+attr_latex: :width 1.3\linewidth
#+name: fig:best-age
#+caption: *Zumaia (right) and Sopelana (left) Cretaceous proxies tuned to 3 orbital solutions.*
#+caption: Root mean square deviation (RMSD, opacity and black numbers above respective lines) between normalized proxy `eccentricity' construct (coloured lines, calculated as scaled normalized 405 kyr filter + normalized 100 kyr filter) and normalized orbital solution (light gray lines), after anchoring 405-kyr minima identified in the field \pm\qty{2}{\metre} (colour, coloured numbers above lines) to 405 kyr minima in each orbital solution (black dots). Normalized 405 kyr filters of orbital solutions (light gray lines) and K/T age (red line) are shown. We limit this figure to a ~comb~ of ~1:0.5~, ~filt_env~ = filter and ~detrend_type~ = ~lin_scl~.
#+RESULTS:
[[file:imgs/best_fits_tiepoints.png]]
*** rolling variable tie-points
:PROPERTIES:
:CREATED:  [2023-11-28 Tue 16:54]
:END:

**** add Ma405 and astronomical solutions to data
:PROPERTIES:
:CREATED:  [2023-12-01 Fri 14:14]
:END:
#+begin_src R
  diffs_tie <- data_ecc |>
    select(-`405 kyr`, -`100 kyr`, -prec, -envelope) |>
    # we want to group by each Ma405 cycle
    mutate(Ma405 = findInterval(depth, agem_simple$strat_bot) - 1) |>
    # add target orbital solution ages
    mutate(sol = list(c("ZB18a", "ZB20a", ## "La11"
                        "La10b", "La10c"))) |>
    unnest(cols = c(sol))

  # I think I can loop over all of these in my normal map way later
  ste <- "Zumaia"
  prx <- "MS"
  ## prx <- "Lstar"
  ## prx <- "d13C"
  sln <- "ZB18a"
  ## sln <- "ZB20a" # let's see if it'll run all-at-once for ZB20a now
  ## sln <- "La10b"
  ## sln <- "La10c"
  cmb <- "0.5:1"
  dty <- "scl"
  fen <- "filter"

  subs <- diffs_tie |>
    filter(site == ste) |>
    filter(sol == sln) |>
    filter(proxy == prx) |>
    filter(detrend_type == dty) |>
    filter(comb == cmb) |>
    filter(filt_env == fen)

  # remove them again so we're not accidentally grabbing these
  rm(list = c("ste", "prx", "sln", "cmb", "dty", "fen"))
#+end_src

#+RESULTS:

**** [#A] wrap age model
:PROPERTIES:
:CREATED:  [2023-12-01 Fri 14:15]
:END:
#+begin_src R :tangle R/wrap_age_model.R
  wrap_age_model <- function(data,
                             agemodel,
                             astronomical_solution = sln,
                             tiepoint_uncertainty = seq(-4, 4, .5),
                             fix_0 = TRUE,
                             genplot = FALSE,
                             output = "default") {
    # create a tibble that holds the best fits for each tie-point
    # for now just for this unique combination
    ## the_best <- tibble(sol = sln, proxy = prx, site = ste, comb = cmb,
    ##                    detrend_type = dty, filt_env = fen) |>
    ##   mutate(Ma405 = list(unique(subs$Ma405))) |>
    ##   unnest(cols = c(Ma405)) |>
    valid_outputs <- c("default", "full")

    if (!output %in% valid_outputs) {
      cli::cli_abort(c("{.var output} must be one of {.or {.q {valid_outputs}}}",
                       "x" = "You've supplied {.q {output}}"))

    }

    if (length(unique(data$sol)) > 1) {
      cli::cli_abort(c("{.var data} must contain only one unique astronomical solution in column {.var sol}.",
                       "x" = "{.var data} contains {.and {unique(data$sol)}}"
                       ))
    }

    if (length(unique(agemodel$sol)) > 1) {
      cli::cli_abort(c("{.var agemodel} must contain only one unique astronomical solution in column {.var sol}.",
                       "x" = "{.var agemodel} contains {.and {unique(agemodel$sol)}}"
                       ))
    }

    if (length(unique(astronomical_solution$sln)) > 1) {
      cli::cli_abort(c("{.var astronomical_solution} must contain only one unique astronomical solution in column {.var sln}.",
                       "x" = "{.var astronomical_solution} contains {.and {unique(astronomical_solution$sln)}}"
                       ))
    }

    # make sure to fully initialize the whole output dataframe
    # this will make looping less slow
    the_best <- agemodel |>
      rename(Ma405 = n) |>
      select(all_of(c("sol", "Ma405", "strat_bot", "age"))) |>
      mutate(tie_err = NA_real_, # what's the best tiepoint error in m?
             RMSD_Ma405 = NA_real_, # best RMSD score for this Ma405 cycle?
             scl_Ma405 = NA_real_, # best scl for this Ma405 cycle?
             wgt_Ma405 = NA_real_) # best weighted scl for this Ma405 cycle

    if (output == "full" | genplot) {
      the_best <- the_best |>
        mutate(
          ## cycles = NA # this is bad, it creates an empty column that then gets incrementally larger
          cycles = list(tibble(tie_RMSD = NA_real_,
                               tie = NA_real_,
                               scl = NA_real_,
                               wgt = NA_real_,
                               .rows = length(tiepoint_uncertainty)))
        )
    }

    if (min(data$Ma405) < 0) {
      it <- sort(unique(data$Ma405))[c(which(it >= 0), which(it < 0))]
    } else {
      it <- unique(data$Ma405) |> sort()
    }

  ## bm_0 <- microbenchmark::microbenchmark(times = 1, loop =

    for (cycle in it) {

      ## message(glue::glue("cycle is {cycle}"))

      # subset the agemodel to this and the previous cycle
      am <- agemodel |>
        filter((cycle == 0 & (n == 0 | n == 1)) |
               (n == cycle - 1 | n == cycle)) |>
        mutate(tie = list(tiepoint_uncertainty)) |>
        unnest(tie) |>
        mutate(depth = strat_bot + tie) |>
        select(sol, n, tie, depth, age)

      # first two cycles?
        if (cycle <= 0) {
          next
        } else if ((cycle == 1 && fix_0) | (cycle == min(data$Ma405) && fix_0)) {
          ## message(glue::glue("Fixing tiepoint K/T boundary to 405 kyr minimum close to K/T boundary"))
          am <- am |>
            # the 405 kyr cycle we're currently trying to match
            filter(n == cycle |
                   # no uncertainty around 0
                   (n == 0 & tie == 0) |
                   # or if we're doing Sopelana, no uncertainty around first
                   # cycle
                   (n == min(data$Ma405) - 1 & tie == 0))

          tmp <- data |>
            ## bst <- data |>
            filter(Ma405 == cycle) |>
            # TODO: make this filter match the depth based on the tie-point instead?
            mutate(tie = list(tiepoint_uncertainty)) |>
            unnest(cols = c(tie)) |>
            # calculate age from age model for each uncertainty
            mutate(age = map2_dbl(
                     tie, depth,
                     ~ Hmisc::approxExtrap(
                                am |>
                                filter(n == cycle - 1 | (n == cycle & tie == .x)) |>
                                pull(depth),
                                am |>
                                filter(n == cycle - 1 | (n == cycle & tie == .x)) |>
                                pull(age),
                                xout = .y)$y)) |>
            # linearly interpolate the astronomical solution eccentricity
            mutate(ecc_sln = approx(astronomical_solution$age,
                                    astronomical_solution$scl,
                                    xout = age)$y) |>
            # calculate SD between ecc and ecc_sol
            mutate(SD = (ecc - ecc_sln)^2) #|>

          # summarize into RMSD
          smy <- tmp |>
            summarize(tie_RMSD = sqrt(mean(SD)),
                      .by = c(tie)) |>
            # we downscale the values that deviate a lot from the originally identified depth
            mutate(scl = exp(abs(tie)) / 10 + 1) |>
            mutate(wgt = scl * tie_RMSD)

          # filter out only best tiepoint uncertainty
          bst <- smy |>
            filter(wgt == min(wgt))

          # save the result to our overlord table
          the_best$tie_err[the_best$Ma405 == cycle] <- bst$tie
          the_best$RMSD_Ma405[the_best$Ma405 == cycle] <- bst$tie_RMSD
          the_best$scl_Ma405[the_best$Ma405 == cycle] <- bst$scl
          the_best$wgt_Ma405[the_best$Ma405 == cycle] <- bst$wgt

          if (output == "full" | genplot) {
            ## the_best$cycles[the_best$Ma405 == cycle] <- list(smy)
            the_best$cycles[the_best$Ma405 == cycle][[1]]$tie <- smy$tie
            the_best$cycles[the_best$Ma405 == cycle][[1]]$tie_RMSD <- smy$tie_RMSD
            the_best$cycles[the_best$Ma405 == cycle][[1]]$scl <- smy$scl
            the_best$cycles[the_best$Ma405 == cycle][[1]]$wgt <- smy$wgt
          }

        } else if ((cycle == 1 && !fix_0) | (cycle == min(data$Ma405) && !fix_0)) {
          message("Letting tiepoint at K/T boundary and Ma405-1 both vary")
          message("... this will take a while! ...")
          # let's assemble, just for tiepoints 0 and 1 a comprehensive list of all
          # combinations of tiepoint uncertainties, so we can apply agemodels based
          # on all combinations and figure out which combination works best.

          # this is probably too computationally intensive to do for everything!
          amc <- expand.grid(tie_0 = tiepoint_uncertainty, tie_1 = tiepoint_uncertainty) |>
            as_tibble() |>
            bind_cols(
              agemodel |>
              filter(sol == the_best$sol[[1]]) |>
              filter(n == 0) |>
              select(depth_0 = strat_bot, age_0 = age)) |>
            bind_cols(
              agemodel |>
              filter(sol == the_best$sol[[1]]) |>
              filter(n == 1) |>
              select(depth_1 = strat_bot, age_1 = age)) |>
            mutate(depth_0 = tie_0 + depth_0,
                   depth_1 = tie_1 + depth_1) |>
            pivot_longer(cols = c(depth_0, depth_1, age_0, age_1),
                         values_to = "value",
                         names_sep = "_",
                         names_to = c("name", "n")) |>
            pivot_wider()
          # this leaves 2 rows per unique combination on purpose, so we can filter
          # out by tie_0 and tie_1, resulting in a 2-row dataframe with depth and age
          # so we can interpolate

          tmp <- data |>
            ## bst <- data |>
            filter(Ma405 %in% c(0, 1)) |>
            mutate(tie = list(expand.grid(tie_0 = tiepoint_uncertainty, tie_1 = tiepoint_uncertainty))) |>
            unnest(cols = c(tie)) |>
            # calculate age from age model for each uncertainty
            mutate(age = pmap_dbl(
                     list(.x = tie_0, .y = tie_1, .z = depth),
                     ~ Hmisc::approxExtrap(
                                amc |>
                                filter(tie_0 == .x, tie_1 == .y) |>
                                pull(depth),
                                amc |>
                                filter(tie_0 == .x, tie_1 == .y) |>
                                pull(age),
                                xout = .y)$y)) |>
            # linearly interpolate the astronomical solution eccentricity
            mutate(ecc_sln = approx(astronomical_solution$age,
                                    astronomical_solution$scl,
                                    xout = age)$y) |>
            # calculate SD between ecc and ecc_sol
            mutate(SD = (ecc - ecc_sln)^2) #|>

          # summarize into RMSD
          smy <- tmp |>
            summarize(tie_RMSD = sqrt(mean(SD)),
                      .by = c(tie_0, tie_1)) |>
            mutate(scl = exp(abs(tie)) / 10 + 1) |>
            mutate(wgt = scl * tie_RMSD)

          # filter out only best tiepoint uncertainty
          bst <- smy |>
            filter(wgt == min(wgt)) |>
            # this gives me 4 equivalent results
            # filter out the one that's closest to tie_0 == 0
            # identified in the field
            filter(tie_0 == min(abs(tie_0)))

          # save the result to our overlord table
          the_best$tie_err[the_best$Ma405 == 0] <- bst$tie_0
          the_best$tie_err[the_best$Ma405 == 1] <- bst$tie_1
          the_best$RMSD_Ma405[the_best$Ma405 == 0] <- bst$tie_RMSD
          the_best$RMSD_Ma405[the_best$Ma405 == 1] <- bst$tie_RMSD

          if (output == "full" | genplot) {
            ## the_best$cycles[the_best$Ma405 == cycle] <- list(smy)
            the_best$cycles[the_best$Ma405 == cycle][[1]]$tie <- smy$tie
            the_best$cycles[the_best$Ma405 == cycle][[1]]$tie_RMSD <- smy$tie_RMSD
            the_best$cycles[the_best$Ma405 == cycle][[1]]$scl <- smy$scl
            the_best$cycles[the_best$Ma405 == cycle][[1]]$wgt <- smy$wgt
          }

          if (genplot) {
            pl <- smy |>
              ggplot(aes(x = tie_0, y = tie_1, fill = RMSD)) +
              geom_raster() +
              scale_fill_viridis_c(direction = -1) +
              geom_point(fill = "red", colour = "red", size = 3,
                         data = the_best |>
                           filter(Ma405 %in% 0:1) |>
                           select(Ma405, tie_err, RMSD) |>
                           pivot_wider(names_from = Ma405,
                                       values_from = tie_err) |>
                           rename(tie_0 = `0`, tie_1 = `1`)) +
              labs(title = paste("Ma405 cycle: ", cycle))
          }

        } else if (cycle > 1) {

        am <- am |>
          # the 405 kyr cycle we're currently trying to match
          filter(n == cycle |
                 # and the previous best match
                 (n == cycle - 1 & tie == the_best$tie_err[the_best$Ma405 == cycle - 1]))


        tmp <- data |>
          ## bst <- data |>
          filter(Ma405 == cycle) |>
          # TODO: make this filter match the depth based on the tie-point instead?
          mutate(tie = list(tiepoint_uncertainty)) |>
          unnest(cols = c(tie)) |>
          # calculate age from age model for each uncertainty
          mutate(age = map2_dbl(
                   tie, depth,
                   ~ Hmisc::approxExtrap(
                              am |>
                              filter(n == cycle - 1 | (n == cycle & tie == .x)) |>
                              pull(depth),
                              am |>
                              filter(n == cycle - 1 | (n == cycle & tie == .x)) |>
                              pull(age),
                              xout = .y)$y)) |>
          # linearly interpolate the astronomical solution eccentricity
          mutate(ecc_sln = approx(astronomical_solution$age,
                                  astronomical_solution$scl,
                                  xout = age)$y) |>
          # calculate SD between ecc and ecc_sol
          mutate(SD = (ecc - ecc_sln)^2) #|>


        # summarize into RMSD
        smy <- tmp |>
          summarize(tie_RMSD = sqrt(mean(SD)),
                    .by = c(tie)) |>
          # we downscale the values that deviate a lot from the originally identified depth
          mutate(scl = exp(abs(tie)) / 10 + 1) |>
          mutate(wgt = scl * tie_RMSD)

        # filter out only best tiepoint uncertainty
        bst <- smy |>
          ## filter(RMSD == min(RMSD))
          filter(wgt == min(wgt))

        # save the result to our overlord table
        the_best$tie_err[the_best$Ma405 == cycle] <- bst$tie
        the_best$RMSD_Ma405[the_best$Ma405 == cycle] <- bst$tie_RMSD
        the_best$scl_Ma405[the_best$Ma405 == cycle] <- bst$scl
        the_best$wgt_Ma405[the_best$Ma405 == cycle] <- bst$wgt

        if (output == "full" | genplot) {
          ## the_best$cycles[the_best$Ma405 == cycle] <- list(smy)
            the_best$cycles[the_best$Ma405 == cycle][[1]]$tie <- smy$tie
            the_best$cycles[the_best$Ma405 == cycle][[1]]$tie_RMSD <- smy$tie_RMSD
            the_best$cycles[the_best$Ma405 == cycle][[1]]$scl <- smy$scl
            the_best$cycles[the_best$Ma405 == cycle][[1]]$wgt <- smy$wgt
        }

      } # end if
    } # end for-loop

    # make it so the fixed tiepoint also prints?
    ## if ((output == "full" | genplot) & fix_0) {
    ##   the_best <- the_best |>
    ##     mutate(tie_err = ifelse(Ma405 == 0 | Ma405 == min(data$Ma405), 0, tie_err)) |>
    ##     mutate(RMSD_Ma405 = ifelse(Ma405 == 0 | Ma405 == min(data$Ma405), 0, RMSD_Ma405))
    ## }

    # simplify output
    the_best <- the_best |>
      # we limit the output to cycle 0 through what's there in the data
      filter((Ma405 == 0 | Ma405 == min(data$Ma405) - 1) | !is.na(RMSD_Ma405)) |>
      mutate(tie_err = ifelse(Ma405 == 0 | Ma405 == min(data$Ma405) - 1, 0, tie_err)) |>
      mutate(RMSD_Ma405 = ifelse(Ma405 == 0 | Ma405 == min(data$Ma405) - 1, 0, RMSD_Ma405)) |>
      mutate(depth = strat_bot + tie_err) |>
      # make depth at 0 doesn't include the depth error?
      mutate(depth = ifelse(Ma405 == 0, 0., depth))

    # For Sopelana, the lowest fixed Ma405 is 8
    if (min(data$Ma405) > 0) {
      the_best <- the_best |>
        filter(Ma405 != 0)
    }

    # TODO: figure out how to plot !fix_0 as well?
    if (genplot & fix_0) {
      pl <- the_best |>
        ggplot(aes(x = tie, y = RMSD)) +
        facet_wrap(facets = vars(Ma405)) +
        geom_line(aes(y = tie_RMSD),
                  data = \(x) x |> unnest(cycles)) +
        geom_line(aes(y = scl),
                  colour = "red",
                  data = \(x) x |> unnest(cycles)) +
        geom_line(aes(y = wgt),
                  colour = "purple",
                  data = \(x) x |> unnest(cycles)) +
        geom_point(aes(x = tie_err, y = RMSD_Ma405), colour = "red", size = 3) +
        geom_point(aes(x = tie_err, y = wgt_Ma405), colour = "purple", size = 3)
      print(pl)
    }

    if (output == "full") {
      return(the_best)
    } else {
      return((the_best) |>
             select(depth, age, Ma405, tie_err, RMSD_Ma405))
    }
  } # end function definition
  ## ) # end microbenchmark mb_0
#+end_src

#+RESULTS:
**** enable debugging
:PROPERTIES:
:CREATED:  [2023-12-02 Sat 15:22]
:END:
#+begin_src R
  # let's naively try to just get results for all detrend_types etc.
  debug(wrap_age_model)
  ## the_best <- wrap_age_model(diffs_tie, agem_sol, fix_0 = TRUE)
#+end_src

#+RESULTS:

**** example function calls
:PROPERTIES:
:CREATED:  [2023-12-01 Fri 14:15]
:END:
***** SOME variable cycle 0 (slow)
:PROPERTIES:
:CREATED:  [2023-12-05 Tue 10:17]
:END:
:LOGBOOK:
- Note taken on [2023-12-07 Thu 09:52] \\
  this is currently broken after I reworked the figure generation!
- State "SOME"       from "NEXT"       [2023-12-07 Thu 09:52]
:END:

#+begin_src R :results output graphics file :file imgs/Zumaia_variable_d13C.png :width 900 :height 700
  # example call
  # WARNING: pretty slow!
  print(tb <- wrap_age_model(subs,
                             agem_sol |>
                             filter(sol == "ZB18a"),
                             fix_0 = FALSE, genplot = TRUE))
#+end_src

#+RESULTS:
[[file:imgs/Zumaia_variable_d13C.png]]

***** fixed cycle 0
:PROPERTIES:
:CREATED:  [2023-12-05 Tue 10:17]
:END:
#+begin_src R :results output graphics file :file imgs/Zumaia_fixed_d13C.png :width 900 :height 700
  # WARNING: still slow, but slightly less so
  tst2 <- wrap_age_model(subs,
                 agem_sol |> filter(sol == "ZB18a"),
                 astronomical_solution = slns |> filter(sln == "ZB18a"),
                 fix_0 = TRUE, genplot = TRUE, output = "full")
#+end_src

#+RESULTS:
[[file:imgs/Zumaia_fixed_d13C.png]]

***** only Sopelana available
:PROPERTIES:
:CREATED:  [2023-12-05 Tue 10:17]
:END:
#+begin_src R :results output graphics file :file imgs/Sopelana_fixed_MS.png :width 900 :height 700
  # WARNING: still slow, but slightly less so
  tst <- wrap_age_model(diffs_tie |>
                 filter(site == "Sopelana",
                        proxy == "MS",
                        sol == "ZB18a",
                        detrend_type == "scl",
                        filt_env == "filter",
                        comb == "0.5:1"),
                 agem_sol |> filter(sol == "ZB18a"),
                 astronomical_solution = slns |> filter(sln == "ZB18a"),
                 fix_0 = TRUE, genplot = TRUE, output = "full")
#+end_src

#+RESULTS:
[[file:imgs/Sopelana_fixed_MS.png]]

***** DONE attempt to scale the weights?
CLOSED: [2023-12-07 Thu 09:53]
:PROPERTIES:
:CREATED:  [2023-12-06 Wed 10:56]
:END:
Note that cycles 1, 4, and 9 were marked as "well-defined" in the field, indicating that they shouldn't deviate too much from 0!

Perhaps we can dowscale the RMSD scores for different tie_errors so that the points closer to the point as identified in the field get a better score?

This is now embedded in our ~wrap_age_model~ function!

#+begin_src R :results output graphics file :file imgs/Zumaia_fixed_d13C_weighted.png :width 900 :height 700 :eval never
  tst <- wrap_age_model(subs,
                        agem_sol |> filter(sol == "ZB18a"),
                        astronomical_solution = slns |> filter(sln == "ZB18a"),
                        fix_0 = TRUE, genplot = FALSE, output = "full")

  tst |>
    unnest(cycles) |>
    mutate(scl = exp(abs(tie)) / 10 + 1) |>
    mutate(wgt = scl * RMSD) |>
    mutate(wgt_best = wgt == min(wgt), .by = Ma405) |>
    ## glimpse()
    ggplot(aes(x = tie, y = RMSD)) +
    facet_wrap(vars(Ma405)) +
    geom_line() +
    geom_line(aes(y = scl), colour = "red") +
    geom_line(aes(y = wgt), colour = "purple") +
    geom_point(aes(x = tie_err, y = RMSD_Ma405),
               colour = "red",
               data = tst) +
    geom_point(aes(y = wgt),
               colour = "purple",
               data = \(x) filter(x, wgt_best)) +
    coord_cartesian(ylim = c(0, 4)) +
    labs(#title = "Zumaia d13C 1:1 filter vs ZB18a",
         subtitle = "Optimal fit find for each 405 kyr minimum tie-point")
#+end_src

#+RESULTS:
[[file:imgs/Zumaia_fixed_d13C_weighted.png]]


**** benchmarking different versions
:PROPERTIES:
:CREATED:  [2023-12-01 Fri 14:18]
:END:
I tried out different versions of the functions to see how I can improve the speed a little, since it's pretty slow now...
#+begin_src R
  # BENCHMARKING
  # we're trying to find the optimizations that really make a difference
  # we start bm_0 all the way up-top because it's just the plain for-loop
  ## bm_0 |>
  ##   write_rds("out/bm_0.rds")

  # here we switched to a function definition for the first time
  ## bm_1 <- microbenchmark::microbenchmark(fixed_0 = wrap_age_model(subs, agem_sol, fix_0 = TRUE),
  ##                                        free_0 = wrap_age_model(subs, agem_sol, fix_0 = FALSE),
  ##                                        times = 1)
  ## bm_1 |>
  ##   write_rds("out/bm_1.rds")
  bm_1 <- read_rds("out/bm_1.rds")

  # this time it returns the best
  ## bm_2 <- microbenchmark::microbenchmark(returns_best = wrap_age_model(subs, agem_sol, fix_0 = TRUE),
  ##                                        times = 5)
  ## bm_2 |>
  ##   write_rds("out/bm_2.rds")
  bm_2 <- read_rds("out/bm_2.rds")

  # I want to know if creating a single pipe without storing intermediate results is faster
  # since it might prevent it from making copies of some of the columns because it's lazy?
  ## bm_3 <- microbenchmark::microbenchmark(one_pipe = wrap_age_model(subs, agem_sol, fix_0 = TRUE),
  ##                                        times = 5)
  ## bm_3 |>
  ##   write_rds("out/bm_3.rds")
  bm_3 <- read_rds("out/bm_3.rds")
  # that's interesting, seems like it might actually be slower!!
  # and I prefer to store the intermediate results anyway (for debugging purposes).

  ## bm_4 <- microbenchmark::microbenchmark(genplot = wrap_age_model(subs, agem_sol, fix_0 = TRUE, genplot = TRUE),
  ##                                        times = 1)
  ## bm_4 |>
  ##   write_rds("out/bm_4.rds")
  bm_4 <- write_rds("out/bm_4.rds")

  # this uses the agem to build the_best!
  ## bm_5 <- microbenchmark::microbenchmark(use_agem = wrap_age_model(subs,
  ##                                                                 agem_sol |>
  ##                                                                 filter(site == "Zumaia", sol == "ZB18a"),
  ##                                                                 fix_0 = TRUE, genplot = TRUE),
  ##                                        times = 1) |>
  ##     write_rds("out/bm_5.rds")
  bm_5 <- read_rds("out/bm_5.rds")

  # I read somewhere that writing messages within loops seriously slows stuff down.
  ## bm_6 <- microbenchmark::microbenchmark(no_message = wrap_age_model(subs,
  ##                                                                 agem_sol |>
  ##                                                                 filter(site == "Zumaia", sol == "ZB18a"),
  ##                                                                 fix_0 = TRUE, genplot = TRUE),
  ##                                        times = 1) |>
  ##     write_rds("out/bm_6.rds")
  bm_6 <- read_rds("out/bm_6.rds")
  # doesn't seem to be the case, really

#+end_src

#+begin_src R :results output graphics file :file imgs/benchmark_wrap_age_model.png :width 800
  list.files("out", pattern = "^bm_[0-9]+.rds$", full.names = TRUE) |>
    map_dfr(read_rds) |>
    autoplot() +
    geom_point()
#+end_src

#+RESULTS:
[[file:imgs/benchmark_wrap_age_model.png]]

Ah, okay. So the_best has 600 unique combinations of site, sol, proxy, detrend_type, comb, filt_env.
that means that if all of them take an average of 17 seconds (median value of bm_3) it will take a total of:

#+begin_src R
  (nrow(distinct(diffs_tie, proxy, site, detrend_type, comb, filt_env, sol)) *
  ## (48 *
   summary(bm_5)$median) / 60  /# seconds to minutes
   60 # minutes to hours
  # so 2.84 hours to run all combinations with fix_0 = TRUE.
  # after optimization, perhaps 2.7 hours
#+end_src

#+RESULTS:

which is pretty bad!

**** profile the function
:PROPERTIES:
:CREATED:  [2023-12-07 Thu 10:50]
:END:
#+begin_src R
  source("R/wrap_age_model.R")
  prof <- profvis::profvis(
                     wrap_age_model(subs,
                                    agem_sol |> filter(sol == "ZB18a"),
                                    astronomical_solution = slns |> filter(sln == "ZB18a"),
                                    fix_0 = TRUE, genplot = FALSE, output = "full"))
#+end_src

#+RESULTS:
: profvis: code exited with error:
: replacement has length zero
:
: Warning message:
: Unknown or uninitialised column: `RMSD`.

**** call the rolling agemodel function on the full dataframe
:PROPERTIES:
:CREATED:  [2023-12-01 Fri 14:24]
:END:
#+begin_src R
  # let's first get it to work with some mappage
  the_superduper_best <-
    diffs_tie |>
    nest(.by = c(proxy, site,
                 detrend_type, comb, filt_env, sol)) |>
    filter(filt_env != "hilbert") |>
    ## slice(1:3) |> # test first few
    ## slice(c(1, 550)) |> # sopelana wasn't working
    ## unnest(data) |>
    ## glimpse()
    mutate(the_best = furrr::future_map2( # use cores
                               .x = data, .y = sol,
                               .f = ~ .x |> wrap_age_model(
                                     agemodel = agem_sol |>
                                       filter(sol == .y),
                                     astronomical_solution = slns |>
                                       filter(sln == .y),
                                     ## tiepoint_uncertainty = ,
                                     # default -4, 4, .5
                                     fix_0 = TRUE,
                                     output = "full"),
                               .progress = TRUE
                             )) |>
    write_rds("out/2023-12-07_the_superduper_best_site.rds")
#+end_src

#+RESULTS:

I just compared fix_0 results for d13C ZB18a, and there the overal RMSD goes from 1.12 (with variable K/T age) to 1.07 while the computation time drops significantly!

This now fixes tiepoint 8/9 at the value identified in the field, not at the optimal one as determined in Zumaia.
**** DONE fix issue with overlapping record between sites?
CLOSED: [2023-12-04 Mon 17:19]
:PROPERTIES:
:CREATED:  [2023-12-04 Mon 16:00]
:END:
hmm I think I can just *not* filter the age model/solutions but do filter the input?
**** apply the new age models to the data
:PROPERTIES:
:CREATED:  [2023-12-01 Fri 15:34]
:END:
#+begin_src R
  ## the_superduper_best <- read_rds("out/the_superduper_best.rds")
  the_superduper_best <- read_rds("out/the_superduper_best_site.rds")

  # apply the optimal age models for each solution/detrend_type etc.
  suba <- the_superduper_best |>
    mutate(age = map2(data, the_best,
                          ~ Hmisc::approxExtrap(
                                     x = .y |> pull(depth),
                                     y = .y |> pull(age),
                                     xout = .x |> pull(depth))$y
                      )) |>
    select(-the_best) |>
    unnest(cols = c(data, age))

  subdiff <- suba |>
    nest(.by = sol) |>
    mutate(data = map2(data, sol,
                       ~ .x |>
                         mutate(ecc_sln = approx(x = slns$age[slns$sln == .y],
                                                 y = slns$scl[slns$sln == .y],
                                                 xout = age)$y))) |>
    unnest(cols = c(data)) |>
    ## calculate SD between ecc and ecc_sol
    mutate(SD = (ecc - ecc_sln)^2)

  # sumamrize into RMSD
  sumy <- subdiff |>
    summarize(RMSD = sqrt(mean(SD)),
              .by = c(proxy, site, comb,
                      detrend_type,
                      filt_env,
                      sol))
#+end_src

#+RESULTS:
**** best
:PROPERTIES:
:CREATED:  [2023-12-05 Tue 17:23]
:END:
#+begin_src R
  bsty <- sumy |>
    filter(filt_env != "hilbert") |>
    filter(RMSD == min(RMSD),
           .by = c(proxy, site, sol))
#+end_src

#+RESULTS:
**** rerun my fancy function with full output on only the best fits
:PROPERTIES:
:CREATED:  [2023-12-06 Wed 15:15]
:END:
#+begin_src R
  only_the_best_full <-
    diffs_tie |>
    nest(.by = c(proxy, site,
                 detrend_type, comb, filt_env, sol)) |>
    inner_join(bsty) |> # only get those that were THE BEST
    ## slice(1:3) |> # test first few
    ## slice(c(1, 550)) |> # sopelana wasn't working
    ## unnest(data) |>
    ## glimpse()
    mutate(the_best = furrr::future_map2( # use cores
                               .x = data, .y = sol,
                               .f = ~ wrap_age_model(
                                     data = .x
                                     agemodel = agem_sol |>
                                       filter(sol == .y),
                                     astronomical_solution = slns |>
                                       filter(sln == .y),
                                     ## tiepoint_uncertainty = ,
                                     # default -4, 4, .5
                                     fix_0 = TRUE,
                                     output = "full"),
                               .progress = TRUE
                             )) |>
    write_rds("out/2023-12-07_only_the_best_full.rds")
#+end_src
**** apply agemodels from only_the_best
:PROPERTIES:
:CREATED:  [2023-12-06 Wed 15:44]
:END:
#+begin_src R
  ## only_the_best_full <- read_rds("out/only_the_best_full.rds")
  only_the_best_full <- read_rds("out/2023-12-07_only_the_best_full.rds")

  bsuba <- only_the_best_full |>
    mutate(age = map2(data, the_best,
                          ~ Hmisc::approxExtrap(
                                     x = .y |> pull(depth),
                                     y = .y |> pull(age),
                                     xout = .x |> pull(depth))$y
                      )) |>
    select(-the_best) |>
    unnest(cols = c(data, age))

  bsubdiff <- bsuba |>
    nest(.by = sol) |>
    mutate(data = map2(data, sol,
                       ~ .x |>
                         mutate(ecc_sln = approx(x = slns$age[slns$sln == .y],
                                                 y = slns$scl[slns$sln == .y],
                                                 xout = age)$y))) |>
    unnest(cols = c(data)) |>
    ## calculate SD between ecc and ecc_sol
    mutate(SD = (ecc - ecc_sln)^2)

  # sumamrize into RMSD
  bsumy <- bsubdiff |>
    summarize(RMSD = sqrt(mean(SD)),
              .by = c(proxy, site, comb,
                      detrend_type,
                      filt_env,
                      sol))
#+end_src

#+RESULTS:

**** generate single overview plot of how optimization went
:PROPERTIES:
:CREATED:  [2023-12-05 Tue 17:48]
:END:
This is not possible, I only saved the best RMSD score for each 405 kyr cycle.

I can plot how the different detrend_types etc. compare?

I now made t he intermediate output also write to file, but haven't (and probably won't) rerun the giant table of parameter combinations.

#+begin_src R
  only_the_best_full |>
    ## mutate(NNN = 1:n()) |>
        ggplot(aes(x = tie_err, y = RMSD)) +
        facet_wrap(facets = vars(Ma405)) +
        geom_line(aes(y = RMSD_Ma405),
                  data = \(x) x |> select(-sol) |> unnest(the_best)) +
        geom_line(aes(y = scl),
                  colour = "red",
                  data = \(x) x |> select(-sol) |> unnest(the_best)) +
        geom_line(aes(y = wgt),
                  colour = "purple",
                  data = \(x) x |> select(-sol) |> unnest(the_best)) +
        geom_point(aes(x = tie_err, y = RMSD), colour = "red", size = 3) +
        geom_point(aes(x = tie_err, y = wgt_Ma405), colour = "purple", size = 3)

    ## left_join(agem_sol, by = c("sol", "site", "age")) |>
    ggplot(aes(x = tie_err, y = RMSD_Ma405,
               paste(proxy,
                     site,
                     detrend_type,
                     comb,
                     filt_env,
                     sol, Ma405)
               )) +
    facet_grid(cols = vars(proxy),
               rows = vars(sol)) +
    geom_line() +
    geom_point() +
    geom_line(aes(y = scl_Ma405), colour = "purple") +
    geom_point(aes(y = scl_Ma405), colour = "purple")
#+end_src
**** COMMENT read in the different age models
:PROPERTIES:
:CREATED:  [2023-11-30 Thu 15:30]
:END:
#+begin_src R
  list.files("out", pattern = "best_tiepoint_uncertainty.csv", full.names = TRUE) |>
    map_dfr(read_csv) |>
    distinct(proxy, sol)
#+end_src

#+RESULTS:
#+begin_example
indexing La10b_best_tiepoint_uncertainty.csv, [=====================================] 65.76MB/s, eta:  0s                                                                                                                                            Rows: 10 Columns: 15
── Column specification ─────────────────────────────────────────────────────────────────────────────────
Delimiter: ","
chr (7): sol, comment, site, proxy, comb, detrend_type, filt_env
dbl (8): Ma405, strat_bot, age, depth_diff, age_diff, tie_err, depth, RMSD

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
indexing ZB18a_best_tiepoint_uncertainty.csv, [====================================] 134.90MB/s, eta:  0s                                                                                                                                            Rows: 10 Columns: 15
── Column specification ─────────────────────────────────────────────────────────────────────────────────
Delimiter: ","
chr (7): sol, comment, site, proxy, comb, detrend_type, filt_env
dbl (8): Ma405, strat_bot, age, depth_diff, age_diff, tie_err, depth, RMSD

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
indexing ZB18a_Lstar_best_tiepoint_uncertainty.csv, [==============================] 133.67MB/s, eta:  0s                                                                                                                                            Rows: 10 Columns: 15
── Column specification ─────────────────────────────────────────────────────────────────────────────────
Delimiter: ","
chr (7): sol, comment, site, proxy, comb, detrend_type, filt_env
dbl (8): Ma405, strat_bot, age, depth_diff, age_diff, tie_err, depth, RMSD

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
indexing ZB20a_best_tiepoint_uncertainty.csv, [====================================] 131.46MB/s, eta:  0s                                                                                                                                            Rows: 10 Columns: 15
── Column specification ─────────────────────────────────────────────────────────────────────────────────
Delimiter: ","
chr (7): sol, comment, site, proxy, comb, detrend_type, filt_env
dbl (8): Ma405, strat_bot, age, depth_diff, age_diff, tie_err, depth, RMSD

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 4 × 2
  proxy sol
  <chr> <chr>
1 MS    La10b
2 MS    ZB18a
3 Lstar ZB18a
4 MS    ZB20a
#+end_example

**** new output figure
:PROPERTIES:
:CREATED:  [2023-12-04 Mon 15:44]
:END:
How did making the tiepoint uncertainty more variable affect the final RMSD scores?
Arrows indicate how the value has shifted from the old score (small circle) to the new score (bigger circle). It seems like overall the 1:0.5 comb is best, but different orbital solutions benefitted to a different extent from this optimization.

#+begin_src R :results output graphics file :file imgs/Zumaia_rolling_tiepoints_parameter_combinations.png :width 800
  sumy |>
    filter(filt_env == "filter") |>
    filter(site == "Zumaia") |>
    # by how much has our score improved after varying the tie-points?
    left_join(msd_age |> rename(age_RMSD = RMSD)) |>
    mutate(diff_RMSD = age_RMSD - RMSD) |> #
    ## filter(comb == "0.5:1") |>
    ## filter(comb == "1:0.5") |>
    ## filter(detrend_type == "lin_gam_det") |>
    ggplot(aes(x = detrend_type,
               y = RMSD, # variable tie-points
               ## y = age_RMSD, # field-based age model
               ## y = diff_RMSD,
               colour = comb)) +
    facet_grid(rows = vars(proxy), cols = vars(filt_env, site, sol)) +
    geom_segment(aes(xend = detrend_type, y = age_RMSD, yend = RMSD),
                 linewidth = 3,
                 arrow = grid::arrow(type = "closed")) +
    geom_point(aes(fill = comb), colour = "black", shape = 21, size = 5) +
    ## geom_line(aes(group = paste(comb,
    ##                             detrend_type,
    ##                             filt_env))) +
    geom_point(aes(y = age_RMSD, fill = comb),
               colour = "black", shape = 21, size = 3) +
    geom_point(aes(x = detrend_type, y = RMSD),
               colour = "black", fill = "purple", shape = 21, size = 4, stroke = 3,
               data = bsumy |>
               filter(site != "Sopelana"))

    # how did our age model from the field without adjustments compare?
    ## geom_line(aes(y = age_RMSD, alpha = .2,
    ##               group = paste(comb,
    ##                             detrend_type,
    ##                             filt_env)))
    # did we identify the best ones correctly? yes
    ## geom_point(colour = "red", show.legend = FALSE, size = 6, data = bsty) +

    ## coord_cartesian(ylim = c(.75, 1.75))
#+end_src

#+RESULTS:
[[file:imgs/Zumaia_rolling_tiepoints_parameter_combinations.png]]

**** thoughts
:PROPERTIES:
:CREATED:  [2023-12-05 Tue 18:01]
:END:
How is it possible that if I tweak the tiepoints so that each 405 kyr cycle gets a better RMSD value, the overall score is sometimes worse than if I just use the tiepoints as identified in the field?
Ok on closer inspection this almost never happens, only for Sopelana in some cases.

Are my error tolerances just way too large (\pm4 m right now)?

I've sometimes seen a larger tie_err just because the RMSD was barely/slightly lower. Should I do some kind of weighing so that smaller tie_err's get preference when the diffs in RMSD are not that great?

**** plot depth and age signals
:PROPERTIES:
:CREATED:  [2023-11-29 Wed 16:38]
:END:
Looks like Sopelana's 0th cycle still has an issue...

#+begin_src R :results output graphics file :file imgs/Zumaia_rolling_tiepoints_depth.png :width 800 :height 650
  ## comp |>
  subdiff |>
   inner_join(bsty) |>
   ggplot(aes(x = depth, y = ecc,
              colour = factor(Ma405))) +
   facet_grid(rows = vars(proxy, sol)) +
   # annotate AS
   ## geom_line(aes(y = scale(ecc_sln)[, 1],
   ##               group = paste(site, proxy, detrend_type, filt_env, comb)),
   ##           colour = "gray") +
   ## # annotate 405 kyr minima in depth record filter
   ## geom_point(aes(x = depth, y = -2),
   ##            colour = "brown",
   ##            data = rec_peaks |>
   ##              filter(proxy %in% sumy$proxy,
   ##                     detrend_type %in% sumy$detrend_type,
   ##                     site %in% sumy$site)) +
   # annotate age model maxima as identified in the field
   geom_segment(aes(x = strat_bot, xend = strat_top, y = 2, yend = 2),
              colour = "gray",
              data = agem |> filter(minmax == "maximum")) +
   # annotate age model minima as identified in the field
   geom_point(aes(x = strat_bot, y = -1.8),
              colour = "black",
              data = agem_simple) +
   geom_point(aes(x = strat_bot, y = -1.8),
              colour = "black", size = 3,
              data = agem_simple |> filter(!is.na(comment))) +
   # annotate potential tie-point uncertainties tried out
   geom_point(aes(x = depth, y = -1.8),
              colour = "gray", size = .2,
              data = agem_tie |>
                filter(n == 0 & tie_err == 0 | n != 0)) +
   # annotate best tie-point uncertainty
   geom_point(aes(x = depth, y = -2.2, shape = site),
              colour = "red",
              data = the_superduper_best |>
                unnest(cols = c(the_best)) |>
                inner_join(sumy |>
                           filter(RMSD == min(RMSD),
                                  .by = c(proxy, site, sol)))) +
   geom_point(aes(x = depth, y = -2.4, shape = site),
              colour = "purple",
              data = only_the_best_full |>
                select(-sol) |>
                unnest(cols = c(the_best))) +
   ## annotate("text", x = c(0, 0, 0) - 5, y = c(-2, -1.8, -2.2),
   ##          hjust = 0,
   ##          colour = c("brown", "purple", "red"),
   ##          label = c("record filter", "field ties", "optimized ties")) +
    geom_line(aes(group = paste(site, proxy, detrend_type, filt_env, comb)),
              ## linewidth = 2
              ) +
   ## coord_cartesian(xlim = c(150, -20)) +
   scale_x_reverse() +
   labs(x = "Depth (m)", y = "Normalized proxy construct")
#+end_src

#+RESULTS:
[[file:imgs/Zumaia_rolling_tiepoints_depth.png]]

#+begin_src R :results output graphics file :file imgs/Zumaia_rolling_tiepoints_age.png :width 800 :height 650
  subdiff |>
     inner_join(sumy |>
                filter(RMSD == min(RMSD), .by = c(sol, site, proxy))) |>
     ggplot(aes(x = age / 1e3, y = ecc,
                colour = factor(Ma405))) +
     facet_grid(rows = vars(proxy, sol)) +
    # draw orbital solution
     geom_line(aes(y = scale(ecc_sln)[, 1],
                   group = paste(sol, site, proxy, detrend_type, filt_env, comb)), colour = "gray") +
    # draw 405 kyr minima
     geom_point(aes(x = age / 1e3, y = -2, shape = site),
               colour = "red",
               data = the_superduper_best |> unnest(cols = c(the_best))) +
    # draw record
    geom_line(aes(group = paste(sol, site, proxy, detrend_type, filt_env, comb)),
              linewidth = 1.5) +
    geom_line(aes(group = paste(sol, site, proxy, detrend_type, filt_env, comb)),
              colour = "purple",
              data = bsubdiff) +
     ## geom_vline(aes(xintercept = age1), data = kpg_ages |> filter(sln == "ZB18a") |> rename(sol = sln)) +
    scale_x_reverse() +
    labs(x = "Age (Ma)", y = "Normalized proxy construct") +
    labs(colour = "Ma405")
    ## scale_colour_brewer(type = "qual", palette = 1) +
    ## plot_layout(guides = "collect")
#+end_src

#+RESULTS:
[[file:imgs/Zumaia_rolling_tiepoints_age.png]]

*** COMMENT save/load the workspace image (I didn't enjoy having to rerun everything everytime)
:PROPERTIES:
:CREATED:  [2023-11-22 Wed 13:42]
:END:
:LOGBOOK:
- Note taken on [2023-11-28 Tue 16:51] \\
  this is the image after running the standard depth analysis as well as the simple agemodel time analysis after adding La10b and La10c
:END:

#+begin_src R :eval query
  save.image()
#+end_src

#+begin_src R
  load(".RData")
#+end_src
** Gubbio
:PROPERTIES:
:CREATED:  [2023-08-31 Thu 15:51]
:END:
via [cite:@Batenburg2018] fig 7

Umbria--March Basin, Italy

66 Ma to ~76 Ma

Ma_{405}1 to at least Ma_{405}12ish?

[cite:@Voigt2012]
https://doi.pangaea.de/10.1594/PANGAEA.778969

Also MS from [cite:@Husson2014] https://doi.pangaea.de/10.1594/PANGAEA.829778

#+begin_src R :results output graphics file :file imgs/Gubbio_MS_Husson2014.png :width 900 :height 500
  Gubbio <- pangaear::pg_data("10.1594/PANGAEA.829778")[[1]]

  dat <- Gubbio$data

  dat |>
    ggplot(aes(x = `Depth sed [m]`, y = `chi [10**-9 m**3/kg]`)) +
    geom_line() +
    labs(title = "Gubbio MS")
#+end_src

#+caption: Gubbio MS.
#+RESULTS:
[[file:imgs/Gubbio_MS_Husson2014.png]]

Also this newer composite by [cite:@Gabriella2023]

malformed forams
OAE-2
https://doi.pangaea.de/10.1594/PANGAEA.954540

** ODP Leg 198 Site 1210B
:PROPERTIES:
:CREATED:  [2023-08-31 Thu 15:52]
:END:
found via [cite:@Batenburg2018]

Shatsky Rise equatorial Pacific [cite:@Jung2012]

Ma_{405}2 to at least Ma_{405}12 ish?

66.25 Ma to ~71.5 Ma

Table in the supplement:
#+begin_src R :results output graphics file :file imgs/198-1210B_d13C_Jung2012.png :width 900 :height 500
  ODP198_1210B <- readxl::read_excel("dat/Jung2012/1-s2.0-S0195667112000547-mmc1.xls",
                                     range = "B2:E618",
                                     col_types = "numeric") |>
    rename(depth_mbsf = `Depth (mbsf)`,
           d13C_VPDB = `δ13C (‰ V-PDB)`,
           d18O_VPDB = `δ18O (‰ V-PDB)`,
           age = `Age (Ma)`)

  (ODP198_1210B |>
   ggplot(aes(x = depth_mbsf, y = d13C_VPDB)) +
   geom_line() +
   labs(title = "ODP 198 Site 1210B")) /
    (ODP198_1210B |>
     ggplot(aes(x = age, y = d18O_VPDB)) +
     geom_line())
#+end_src

#+caption: ODP 198 Site 1210B d13C and d18O data from Shatsky Rise in the equatorial Pacific [cite:@Jung2012].
#+RESULTS:
[[file:imgs/198-1210B_d13C_Jung2012.png]]

But the data are also available on pangaea now in [cite:@Ji-Eun2022]
refers to this study for raw data: https://doi.pangaea.de/10.1594/PANGAEA.950806
#+begin_src R :results output graphics file :file imgs/198-1210_d13C_Jung2012-fig6.png :width 900 :height 500
  IODP198_1210B <- pangaear::pg_data("10.1594/PANGAEA.950806")[[1]]

  dat <- IODP198_1210B$data

  (dat |>
   ggplot(aes(x = `Tuned time [Ma] (405)`, y = `δ13C carb [‰ PDB] (vs. VPDB)`)) +
   geom_line() +
   labs(title = "ODP 198 Site 1210B")) /
  (dat |>
    ggplot(aes(x = `Tuned time [Ma] (405)`, y = `δ18O carb [‰ PDB] (vs. VPDB)`)) +
    geom_line())
#+end_src

#+caption: ODP 198 Site 1210B d13C and d18O data from Shatsky Rise in the equatorial Pacific on a tuned age model [cite:@Ji-Eun2022].
#+RESULTS:
[[file:imgs/198-1210_d13C_Jung2012-fig6.png]]

** ODP Leg 74 Site 525A
:PROPERTIES:
:CREATED:  [2023-08-31 Thu 14:57]
:END:
Ma_{405}6 to Ma_{405}8.5

67.8 Ma to 69 Ma

[cite:@Husson2011] grayscale log

*** WAIT waiting for grayscale log in email
:LOGBOOK:
- State "WAIT"       from              [2023-08-31 Thu 15:20]
:END:

** ODP Leg 207 Site 1258B
:PROPERTIES:
:CREATED:  [2023-08-31 Thu 14:58]
:END:
Ma_{405}8? to Ma_{405}14

raw data from https://doi.pangaea.de/10.1594/PANGAEA.266578
analysis copies [cite:@Husson2011]

#+begin_src R :results output graphics file :file imgs/207-1258B_MS_Husson-fig4.png :width 900 :height 500
  ODP207_1258B_MS <- pangaear::pg_data("10.1594/PANGAEA.266578")[[1]]

  dat <- ODP207_1258B_MS$data |>
    rename(depth_mbsf = `Depth sed [m]`,
           depth_mcd = `Depth comp [mcd]`,
           label = `Sample label`,
           MS = `kappa [10**-6 SI]`) #|>
    ## mutate(MS = MS * 1e2) # convert from 10^-6 SI to 10^-8kgm^-3

  mtm <- dat |>
    select(depth_mcd, MS) |>
    astrochron::linterp(genplot = FALSE) |> # this seems to get rid of the main outliers as well
    astrochron::mtm(xmax = 3, pl = 2) |>
    as_tibble()

  f100 <- dat |>
    select(depth_mcd, MS) |>
    astrochron::linterp(genplot = FALSE) |> # this seems to get rid of the main outliers as well
    astrochron::taner(flow = 0, fhigh = 0.9, xmax = 3) |>
    as_tibble()

  f405 <- dat |>
    select(depth_mcd, MS) |>
    astrochron::linterp(genplot = FALSE) |> # this seems to get rid of the main outliers as well
    astrochron::taner(flow = 0, fhigh = 0.4, xmax = 1) |>
    as_tibble()

  dat |>
    ggplot(aes(x = depth_mcd, y = MS)) +
    ## annotate("rect", xmin = 285.9, xmax = 286.5, ymin = -Inf, ymax = Inf,
    ##          fill = "yellow", alpha = .6) + # the K/T boundary
    geom_line(colour = "darkblue") +
    geom_line(aes(y = MS + 5), data = f100, colour = "skyblue") +
    geom_line(aes(y = MS + 7), data = f405, colour = "black") +
    coord_cartesian(xlim = c(285, 350), expand = FALSE) +
    labs(x = "Depth (mbsf)", y = MS ~ "(10"^{-8} ~ "kgm"^{-3} * ")",
         title = "ODP Leg 207 Site 1258B")


  ## rmcd <- pangaear::pg_data("10.1594/pangaea.666132")[[1]]$data

  ## # add rmcd depth
  ## dat <- dat |>
  ##   ## astrochron::tune(controlPts = rmcd, genplot = FALSE)
  ##   mutate(rmcd = approx(x = rmcd$`Depth comp [mcd]`,
  ##                        y = rmcd$`Depth comp r [rmcd]`,
  ##                        xout = dat$`Depth comp [mcd]`)$y)

  # add age model. This links raw mcd and armcd scale to 100 kyr maxima
  # agem <- pangaear::pg_data("10.1594/PANGAEA.666282")
  # but it's a PDF :S

#+end_src

#+caption: ODP 207 Site 1258B MS record (from shipboard) analyzed in the same way as [cite:@Husson2011] using Taner filters.
#+RESULTS:
[[file:imgs/207-1258B_MS_Husson-fig4.png]]

*** SOME get raw data
:PROPERTIES:
:CREATED:  [2023-08-31 Thu 15:21]
:END:
:LOGBOOK:
- State "SOME"       from              [2023-08-31 Thu 15:21]
:END:
from [cite:@Husson2011], they've extended this record!
** ODP Leg 122 Site 762C
:PROPERTIES:
:CREATED:  [2023-08-31 Thu 14:24]
:END:
Grayscale log from [cite:@Husson2011,Thibault2012]

Ma_{405}8 until Ma_{408}17 and then on to Ca_{405}4

~69 Ma to ~77.5 Ma?

These were sent to me by Nicolas Thibault upon request, also cite [cite:@Thibault2012]
reproduce [cite:@Husson2011] figure 3 and 4

#+begin_src R :results output graphics file :file imgs/122-762B_grayscale_Husson-fig4.png :width 900 :height 500
  ODP122_762C_gs <- readxl::read_excel("dat/Thibault2012/pal06092-mmc4.xls",
                                       range = "A1:H7995",
                                       guess_max = 2000)

  dat <- ODP122_762C_gs |>
    rename(depth_ambsf = ambsf, gray = `grey level (0-255)`,
           depth_mbsf = mbsf,
           core = `ODP Site 762C Cores`,
           section = Section,
           remarks = Remarks,
           kyr100 = `100 kyr cycles`,
           kyr405 = `405 kyr cycles`) |>
    mutate(leg = 122, site = 762, hole = "C", .before = core) |>
    mutate(smooth = slider::slide_dbl(gray, mean, .before = 7, .after = 7))

  f100 <- dat |>
    select(depth_ambsf, gray) |>
    astrochron::linterp(genplot = FALSE) |> # TODO: take care of gaps!
    astrochron::taner(flow = 0, fhigh = 1)

  f405 <- dat |>
    select(depth_ambsf, gray) |>
    astrochron::linterp(genplot = FALSE) |> # TODO: take care of gaps!
    astrochron::taner(flow = 0, fhigh = 0.25) # or is it 0.4?

  dat |>
    ## astrochron::linterp(genplot = FALSE) |>
    ggplot(aes(x = depth_ambsf, y = gray)) +
    annotate("rect", xmin = 555.8, xmax = 556.3, ymin = -Inf, ymax = Inf,
             fill = "yellow", alpha = .6) + # the K/T boundary
    ## geom_line(alpha = .2, colour = "darkblue") +
    geom_line(aes(y = smooth), colour = "darkblue") +
    geom_line(aes(y = gray - 90), data = f100, colour = "skyblue") +
    geom_line(aes(y = gray - 100), data = f405, colour = "black") +
    geom_text(aes(label = kyr100, y = 50)) +
    geom_text(aes(label = kyr405, y = 40)) +
    ## coord_cartesian(xlim = c(552, 588), expand = FALSE) +
    scale_y_reverse() +
    labs(title = "ODP122 762C grayscale from photo")
#+end_src

#+caption: ODP 122 Site 762C grayscale record by [cite:@Husson2011], shared with my by [cite:@Thibault2012].
#+RESULTS:
[[file:imgs/122-762B_grayscale_Husson-fig4.png]]

** Bottaccione == Gubbio?
:PROPERTIES:
:CREATED:  [2023-08-31 Thu 16:09]
:END:
d13C and d18O data from [cite:@Sabatino2018]

~ 72.1 Ma to 84.2 Ma (a little more, these are the ages of the Campanian/Maastrichtian and Santonian/Campanian boundaries)

about 12 405 kyr minima

ah, slightly too old? -> can stitch w/ 1210B!

#+begin_src R :results output graphics file :file imgs/Bottaccione_d13C_Sabatino2018.png :width 900 :height 500
  Bottaccione <- readxl::read_excel("dat/Sabatino2018/1-s2.0-S0031018216309336-mmc1.xlsx",
                     range = "A2:C658") |>
    rename(depth = `Sample (m)`,
           d13C_VPDB = `δ13C`,
           d18O_VPDB = `δ18O`)

  Bottaccione |>
    ggplot(aes(x = depth, y = d13C_VPDB)) +
    geom_line() +
    labs(title = "Bottaccione d13C and d18O")
#+end_src

#+caption: Bottaccione d13C record from [cite:@Sabatino2018].
#+RESULTS:
[[file:imgs/Bottaccione_d13C_Sabatino2018.png]]

** Furlo
:PROPERTIES:
:CREATED:  [2023-09-05 Tue 16:09]
:END:
[cite:@Batenburg2016]
color reflectance, carbon/oxygen isotopes from Furlo https://doi.pangaea.de/10.1594/PANGAEA.864715

something like 90 Ma to 96 Ma

straight through the Bonarelli level OAE-2

** Jordanian Levant Platform
:PROPERTIES:
:CREATED:  [2023-09-05 Tue 16:06]
:END:
TOC, d13C, d18O

90.86 Ma to 96.24 Ma

[cite:@Wendler2014]
https://doi.pangaea.de/10.1594/PANGAEA.834794

* References
:PROPERTIES:
:UNNUMBERED: t
:END:
# \printbibliography[heading=none]
#+bibliography: /home/japhir/SurfDrive/bibliography/references.bib
#+cite_export: csl apa.csl
#+print_bibliography:


* latex settings that I haven't settled on yet :noexport:
:PROPERTIES:
:CREATED:  [2023-11-17 Fri 13:08]
:END:
** engraved
:PROPERTIES:
:CREATED:  [2023-11-22 Wed 10:54]
:END:
installed ~engrave-faces~.
#+latex_engraved_theme: modus-operandi
#+begin_src emacs-lisp
  (setq org-latex-src-block-backend 'engraved)
#+end_src
